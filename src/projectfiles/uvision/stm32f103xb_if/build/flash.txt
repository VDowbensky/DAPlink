; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\flash.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\flash.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\flash.crf ..\..\..\source\hic_hal\stm32\stm32f103xb\flash.c]
                          THUMB

                          AREA ||i.EraseChip||, CODE, READONLY, ALIGN=2

                  EraseChip PROC
;;;57     
;;;58     uint32_t EraseChip(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;59     {
;;;60         FLASH_EraseInitTypeDef erase_init;
;;;61         uint32_t error;
;;;62         uint32_t ret = 0;  // O.K.
;;;63         if (g_board_info.target_cfg) {
000002  4823              LDR      r0,|L1.144|
000004  b085              SUB      sp,sp,#0x14           ;59
000006  2400              MOVS     r4,#0                 ;62
000008  4605              MOV      r5,r0
00000a  f7fffffe          BL       __aeabi_uread4
00000e  2800              CMP      r0,#0
000010  d03a              BEQ      |L1.136|
;;;64             HAL_FLASH_Unlock();
000012  f7fffffe          BL       HAL_FLASH_Unlock
000016  4628              MOV      r0,r5
;;;65             //bootloader, interface flashing only concerns 1 flash region
;;;66             util_assert((g_board_info.target_cfg->flash_regions[0].end - g_board_info.target_cfg->flash_regions[0].start) %
000018  f7fffffe          BL       __aeabi_uread4
00001c  4606              MOV      r6,r0
00001e  3010              ADDS     r0,r0,#0x10
000020  f7fffffe          BL       __aeabi_uread4
000024  4607              MOV      r7,r0
000026  f106000c          ADD      r0,r6,#0xc
00002a  f7fffffe          BL       __aeabi_uread4
00002e  1a38              SUBS     r0,r7,r0
000030  0580              LSLS     r0,r0,#22
000032  d027              BEQ      |L1.132|
000034  2000              MOVS     r0,#0
                  |L1.54|
000036  2242              MOVS     r2,#0x42
000038  a116              ADR      r1,|L1.148|
00003a  f7fffffe          BL       _util_assert
;;;67                         FLASH_PAGE_SIZE == 0);
;;;68             memset(&erase_init, 0, sizeof(erase_init));
00003e  2100              MOVS     r1,#0
000040  9100              STR      r1,[sp,#0]
000042  9101              STR      r1,[sp,#4]
000044  9102              STR      r1,[sp,#8]
000046  4628              MOV      r0,r5
;;;69             erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
;;;70             erase_init.PageAddress = g_board_info.target_cfg->flash_regions[0].start;
000048  9103              STR      r1,[sp,#0xc]
00004a  f7fffffe          BL       __aeabi_uread4
00004e  4606              MOV      r6,r0
000050  300c              ADDS     r0,r0,#0xc
000052  4605              MOV      r5,r0
000054  f7fffffe          BL       __aeabi_uread4
;;;71             erase_init.NbPages = (g_board_info.target_cfg->flash_regions[0].end - g_board_info.target_cfg->flash_regions[0].start) % FLASH_PAGE_SIZE;
000058  9002              STR      r0,[sp,#8]
00005a  f1060010          ADD      r0,r6,#0x10
00005e  f7fffffe          BL       __aeabi_uread4
000062  4606              MOV      r6,r0
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       __aeabi_uread4
00006a  1a30              SUBS     r0,r6,r0
00006c  f3c00009          UBFX     r0,r0,#0,#10
;;;72             if (HAL_FLASHEx_Erase(&erase_init, &error) != HAL_OK) {
000070  9003              STR      r0,[sp,#0xc]
000072  a904              ADD      r1,sp,#0x10
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       HAL_FLASHEx_Erase
00007a  b100              CBZ      r0,|L1.126|
;;;73                 ret = 1;
00007c  2401              MOVS     r4,#1
                  |L1.126|
;;;74             }
;;;75             
;;;76             HAL_FLASH_Lock();
00007e  f7fffffe          BL       HAL_FLASH_Lock
000082  e002              B        |L1.138|
                  |L1.132|
000084  2001              MOVS     r0,#1                 ;66
000086  e7d6              B        |L1.54|
                  |L1.136|
;;;77         }else{
;;;78             ret = 1;
000088  2401              MOVS     r4,#1
                  |L1.138|
;;;79         }
;;;80         return ret;
;;;81     }
00008a  b005              ADD      sp,sp,#0x14
00008c  4620              MOV      r0,r4                 ;80
00008e  bdf0              POP      {r4-r7,pc}
;;;82     
                          ENDP

                  |L1.144|
                          DCD      g_board_info+0x10
                  |L1.148|
000094  2e2e5c2e          DCB      "..\\..\\..\\source\\hic_hal\\stm32\\stm32f103xb\\flash."
000098  2e5c2e2e
00009c  5c736f75
0000a0  7263655c
0000a4  6869635f
0000a8  68616c5c
0000ac  73746d33
0000b0  325c7374
0000b4  6d333266
0000b8  31303378
0000bc  625c666c
0000c0  6173682e
0000c4  6300              DCB      "c",0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.EraseSector||, CODE, READONLY, ALIGN=1

                  EraseSector PROC
;;;82     
;;;83     uint32_t EraseSector(uint32_t adr)
000000  b530              PUSH     {r4,r5,lr}
;;;84     {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;85         FLASH_EraseInitTypeDef erase_init;
;;;86         uint32_t error;
;;;87         uint32_t ret = 0;  // O.K.
000006  2400              MOVS     r4,#0
;;;88     
;;;89         HAL_FLASH_Unlock();
000008  f7fffffe          BL       HAL_FLASH_Unlock
;;;90         
;;;91         memset(&erase_init, 0, sizeof(erase_init));
;;;92         erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
;;;93         erase_init.PageAddress = adr;
;;;94         erase_init.NbPages = 1;
00000c  2001              MOVS     r0,#1
00000e  2100              MOVS     r1,#0                 ;91
000010  9003              STR      r0,[sp,#0xc]
000012  9100              STR      r1,[sp,#0]
000014  e9cd1501          STRD     r1,r5,[sp,#4]
;;;95         if (HAL_FLASHEx_Erase(&erase_init, &error) != HAL_OK) {
000018  a904              ADD      r1,sp,#0x10
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       HAL_FLASHEx_Erase
000020  b100              CBZ      r0,|L2.36|
;;;96             ret = 1;
000022  2401              MOVS     r4,#1
                  |L2.36|
;;;97         }
;;;98     
;;;99         HAL_FLASH_Lock();
000024  f7fffffe          BL       HAL_FLASH_Lock
;;;100        return ret;
;;;101    }
000028  b005              ADD      sp,sp,#0x14
00002a  4620              MOV      r0,r4                 ;100
00002c  bd30              POP      {r4,r5,pc}
;;;102    
                          ENDP


                          AREA ||i.Init||, CODE, READONLY, ALIGN=1

                  Init PROC
;;;41     */
;;;42     uint32_t Init(uint32_t adr, uint32_t clk, uint32_t fnc)
000000  2000              MOVS     r0,#0
;;;43     {
;;;44         //
;;;45         // No special init required
;;;46         //
;;;47         return (0);
;;;48     }
000002  4770              BX       lr
;;;49     
                          ENDP


                          AREA ||i.ProgramPage||, CODE, READONLY, ALIGN=2

                  ProgramPage PROC
;;;102    
;;;103    uint32_t ProgramPage(uint32_t adr, uint32_t sz, uint32_t *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;104    {
000004  4617              MOV      r7,r2
000006  460d              MOV      r5,r1
000008  4680              MOV      r8,r0
;;;105        uint32_t i;
;;;106        uint32_t ret = 0;  // O.K.
00000a  2600              MOVS     r6,#0
;;;107    
;;;108        HAL_FLASH_Unlock();
00000c  f7fffffe          BL       HAL_FLASH_Unlock
;;;109    
;;;110        util_assert(sz % 4 == 0);
000010  07a8              LSLS     r0,r5,#30
000012  d006              BEQ      |L4.34|
000014  2000              MOVS     r0,#0
                  |L4.22|
000016  226e              MOVS     r2,#0x6e
000018  a10d              ADR      r1,|L4.80|
00001a  f7fffffe          BL       _util_assert
;;;111        for (i = 0; i < sz / 4; i++) {
00001e  2400              MOVS     r4,#0
000020  e00d              B        |L4.62|
                  |L4.34|
000022  2001              MOVS     r0,#1                 ;110
000024  e7f7              B        |L4.22|
                  |L4.38|
;;;112            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, adr + i * 4, buf[i]) != HAL_OK) {
000026  f8572024          LDR      r2,[r7,r4,LSL #2]
00002a  eb080184          ADD      r1,r8,r4,LSL #2
00002e  2300              MOVS     r3,#0
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       HAL_FLASH_Program
000036  b108              CBZ      r0,|L4.60|
;;;113                ret = 1;
000038  2601              MOVS     r6,#1
;;;114                break;
00003a  e003              B        |L4.68|
                  |L4.60|
00003c  1c64              ADDS     r4,r4,#1
                  |L4.62|
00003e  ebb40f95          CMP      r4,r5,LSR #2          ;111
000042  d3f0              BCC      |L4.38|
                  |L4.68|
;;;115            }
;;;116        }
;;;117    
;;;118        HAL_FLASH_Lock();
000044  f7fffffe          BL       HAL_FLASH_Lock
;;;119        return ret;
000048  4630              MOV      r0,r6
;;;120    }
00004a  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

00004e  0000              DCW      0x0000
                  |L4.80|
000050  2e2e5c2e          DCB      "..\\..\\..\\source\\hic_hal\\stm32\\stm32f103xb\\flash."
000054  2e5c2e2e
000058  5c736f75
00005c  7263655c
000060  6869635f
000064  68616c5c
000068  73746d33
00006c  325c7374
000070  6d333266
000074  31303378
000078  625c666c
00007c  6173682e
000080  6300              DCB      "c",0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.UnInit||, CODE, READONLY, ALIGN=1

                  UnInit PROC
;;;49     
;;;50     uint32_t UnInit(uint32_t fnc)
000000  2000              MOVS     r0,#0
;;;51     {
;;;52         //
;;;53         // No special uninit required
;;;54         //
;;;55         return (0);
;;;56     }
000002  4770              BX       lr
;;;57     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\hic_hal\\stm32\\stm32f103xb\\flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_Init____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___7_flash_c_Init____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_Init____REVSH|
#line 495
|__asm___7_flash_c_Init____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_Init____RRX|
#line 682
|__asm___7_flash_c_Init____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
