L 1 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c"
N/**
N * @file    virtual_fs.c
N * @brief   Implementation of virtual_fs.h
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#include <string.h>
L 1 "C:\Keil_v535\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
X#elif !0L
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 23 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N
N#include "virtual_fs.h"
L 1 "..\..\..\source\daplink\drag-n-drop\virtual_fs.h" 1
N/**
N * @file    virtual_fs.h
N * @brief   FAT 12/16 filesystem handling
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef VIRTUAL_FS_H
N#define VIRTUAL_FS_H
N
N#include <stdint.h>
L 1 "C:\Keil_v535\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 26 "..\..\..\source\daplink\drag-n-drop\virtual_fs.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define VFS_CLUSTER_SIZE        0x1000
N#define VFS_SECTOR_SIZE         512
N#define VFS_INVALID_SECTOR      0xFFFFFFFF
N#define VFS_FILE_INVALID        0
N#define VFS_MAX_FILES           16
N
Ntypedef char vfs_filename_t[11];
N
Ntypedef enum {
N    VFS_FILE_ATTR_READ_ONLY     = (1 << 0),
N    VFS_FILE_ATTR_HIDDEN        = (1 << 1),
N    VFS_FILE_ATTR_SYSTEM        = (1 << 2),
N    VFS_FILE_ATTR_VOLUME_LABEL  = (1 << 3),
N    VFS_FILE_ATTR_SUB_DIR       = (1 << 4),
N    VFS_FILE_ATTR_ARCHIVE       = (1 << 5),
N} vfs_file_attr_bit_t;
N
Ntypedef enum {
N    VFS_FILE_CREATED = 0,   /*!< A new file was created */
N    VFS_FILE_DELETED,       /*!< An existing file was deleted */
N    VFS_FILE_CHANGED,       /*!< Some attribute of the file changed.
N                                  Note: when a file is deleted or
N                                  created a file changed
N                                  notification will also occur*/
N} vfs_file_change_t;
N
Ntypedef void *vfs_file_t;
Ntypedef uint32_t vfs_sector_t;
N
N// Callback for when data is written to a file on the virtual filesystem
Ntypedef void (*vfs_write_cb_t)(uint32_t sector_offset, const uint8_t *data, uint32_t num_sectors);
N// Callback for when data is ready from the virtual filesystem
Ntypedef uint32_t (*vfs_read_cb_t)(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors);
N// Callback for when a file's attributes are changed on the virtual filesystem.  Note that the 'file' parameter
N// can be saved and compared to other files to see if they are referencing the same object.  The
N// same cannot be done with new_file_data since it points to a temporary buffer.
Ntypedef void (*vfs_file_change_cb_t)(const vfs_filename_t filename, vfs_file_change_t change,
N                                     vfs_file_t file, vfs_file_t new_file_data);
N
N// Initialize the filesystem with the given size and name
Nvoid vfs_init(const vfs_filename_t drive_name, uint32_t disk_size);
N
N// Get the total size of the virtual filesystem
Nuint32_t vfs_get_total_size(void);
N
N// Add a file to the virtual FS and return a handle to this file.
N// This must be called before vfs_read or vfs_write are called.
N// Adding a new file after vfs_read or vfs_write have been called results in undefined behavior.
Nvfs_file_t vfs_create_file(const vfs_filename_t filename, vfs_read_cb_t read_cb, vfs_write_cb_t write_cb, uint32_t len);
N
N// Set the attributes of a file
Nvoid vfs_file_set_attr(vfs_file_t file, vfs_file_attr_bit_t attr);
N
N// Get the starting sector of this file.
N// NOTE - If the file size is 0 there is no starting
N// sector so VFS_INVALID_SECTOR will be returned.
Nvfs_sector_t vfs_file_get_start_sector(vfs_file_t file);
N
N// Get the size of the file.
Nuint32_t vfs_file_get_size(vfs_file_t file);
N
N// Get the attributes of a file
Nvfs_file_attr_bit_t vfs_file_get_attr(vfs_file_t file);
N
N// Set the callback when a file is created, deleted or has atributes changed.
Nvoid vfs_set_file_change_callback(vfs_file_change_cb_t cb);
N
N// Read one or more sectors from the virtual filesystem
Nvoid vfs_read(uint32_t sector, uint8_t *buf, uint32_t num_of_sectors);
N
N// Write one or more sectors to the virtual filesystem
Nvoid vfs_write(uint32_t sector, const uint8_t *buf, uint32_t num_of_sectors);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 25 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N#include "info.h"
L 1 "..\..\..\source\daplink\info.h" 1
N/**
N * @file    info.h
N * @brief   methods to get information about the board
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef INFO_H
N#define INFO_H
N
N#include <stdbool.h>
L 1 "C:\Keil_v535\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 26 "..\..\..\source\daplink\info.h" 2
N#include <stdint.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nvoid info_init(void);
Nvoid info_set_uuid_target(uint32_t *uuid_data);
Nvoid info_crc_compute(void);
N
N
N// Get the 48 digit unique ID as a null terminated string.
N// This is the string used as the USB serial number.
N// This string is made up of the following:
N// <board ID><family ID><host ID><hic ID>
Nconst char *info_get_unique_id(void);
N
N// Get the 4 digit board ID as a null terminated string
Nconst char *info_get_board_id(void);
N
N// Get the 32 digit ID of the processor running daplink as a null terminated string
Nconst char *info_get_host_id(void);
N
N// Get the 32 digit ID of the target processor as a null terminated string
Nconst char *info_get_target_id(void);
N
N// Get the 8 digit hic ID as a null terminated string
Nconst char *info_get_hic_id(void);
N
N// Get the 4 digit version ID as a null terminated string
Nconst char *info_get_version(void);
N
N// Get the 12 digit mac as a null terminated string
Nconst char *info_get_mac(void);
N
N
N// Get the string descriptor for for the unique_id
N// This is in the format of a USB string descriptor
N// offset 0, size 1, bLength
N// offset 1, size 1, bDescriptorType always 3
N// offset 2, size n, bString - unicode encoded unique id
Nconst char *info_get_unique_id_string_descriptor(void);
N
N
N// Check if various regions are present
Nbool info_get_bootloader_present(void);
X_Bool info_get_bootloader_present(void);
Nbool info_get_interface_present(void);
X_Bool info_get_interface_present(void);
Nbool info_get_config_admin_present(void);
X_Bool info_get_config_admin_present(void);
Nbool info_get_config_user_present(void);
X_Bool info_get_config_user_present(void);
N
N// Get the CRCs of various regions.
N// The CRC returned is only valid if
N// the given region is present.
Nuint32_t info_get_crc_bootloader(void);
Nuint32_t info_get_crc_interface(void);
Nuint32_t info_get_crc_config_admin(void);
Nuint32_t info_get_crc_config_user(void);
N
N// Get version info as an integer
Nuint32_t info_get_bootloader_version(void);
Nuint32_t info_get_interface_version(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 26 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N#include "settings.h"
L 1 "..\..\..\source\daplink\settings\settings.h" 1
N/**
N * @file    settings.h
N * @brief   Access to read user configuration settings
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * Copyright 2019, Cypress Semiconductor Corporation 
N * or a subsidiary of Cypress Semiconductor Corporation.
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N#ifndef SETTINGS_H
N#define SETTINGS_H
N
N#include <stdint.h>
N#include <stdbool.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Ntypedef enum {
N    ASSERT_SOURCE_NONE = 0,
N    ASSERT_SOURCE_BL = 1,
N    ASSERT_SOURCE_APP = 2
N} assert_source_t;
N
Nvoid config_init(void);
N
N// Get/set settings residing in flash
Nvoid config_set_auto_rst(bool on);
Xvoid config_set_auto_rst(_Bool on);
Nvoid config_set_automation_allowed(bool on);
Xvoid config_set_automation_allowed(_Bool on);
Nvoid config_set_overflow_detect(bool on);
Xvoid config_set_overflow_detect(_Bool on);
Nbool config_get_auto_rst(void);
X_Bool config_get_auto_rst(void);
Nbool config_get_automation_allowed(void);
X_Bool config_get_automation_allowed(void);
Nbool config_get_overflow_detect(void);
X_Bool config_get_overflow_detect(void);
N
N// Get/set settings residing in shared ram
Nvoid config_ram_set_hold_in_bl(bool hold);
Xvoid config_ram_set_hold_in_bl(_Bool hold);
Nvoid config_ram_set_assert(const char *file, uint16_t line);
Nvoid config_ram_clear_assert(void);
Nbool config_ram_get_hold_in_bl(void);
X_Bool config_ram_get_hold_in_bl(void);
Nbool config_ram_get_initial_hold_in_bl(void);
X_Bool config_ram_get_initial_hold_in_bl(void);
Nbool config_ram_get_assert(char *buf, uint16_t buf_size, uint16_t *line, assert_source_t *source);
X_Bool config_ram_get_assert(char *buf, uint16_t buf_size, uint16_t *line, assert_source_t *source);
Nuint8_t config_ram_add_hexdump(uint32_t hexdump);
Nuint8_t config_ram_get_hexdumps(uint32_t **hexdumps);
Nvoid config_ram_set_disable_msd(bool disable_msd);
Xvoid config_ram_set_disable_msd(_Bool disable_msd);
Nuint8_t config_ram_get_disable_msd(void);
Nvoid config_ram_set_page_erase(bool page_erase_enable);
Xvoid config_ram_set_page_erase(_Bool page_erase_enable);
Nbool config_ram_get_page_erase(void);
X_Bool config_ram_get_page_erase(void);
N
N// Private - should only be called from settings.c
Nvoid config_rom_init(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 27 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N#include "compiler.h"
L 1 "..\..\..\source\daplink\compiler.h" 1
N/**
N * @file    compiler.h
N * @brief   Special asserts and macros
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef COMPILER_H
N#define COMPILER_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define COMPILER_CONCAT_(a, b) a##b
N#define COMPILER_CONCAT(a, b) COMPILER_CONCAT_(a, b)
N
N// Divide by zero if the the expression is false.  This
N// causes an error at compile time.
N//
N// The special value '__COUNTER__' is used to create a unique value to
N// append to 'compiler_assert_' to create a unique token.  This prevents
N// conflicts resulting from the same enum being declared multiple times.
N#define COMPILER_ASSERT(e) enum { COMPILER_CONCAT(compiler_assert_, __COUNTER__) = 1/((e) ? 1 : 0) }
N
N#define __at(_addr) __attribute__ ((at(_addr)))
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 28 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N#include "util.h"
L 1 "..\..\..\source\daplink\util.h" 1
N/**
N * @file    util.h
N * @brief   useful things
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2020, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef UTIL_H
N#define UTIL_H
N
N#include <stdbool.h>
N#include <stdint.h>
N
N// Protect commonly-defined macros with ifdefs, to prevent conflicts if redefined
N// in imported sources (mostly vendor SDKs).
N
N#if !defined(ARRAY_SIZE)
X#if !0L
N//! @brief Get number of elements in the array.
N#define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))
N#endif
N
N#if !defined(MIN)
X#if !0L
N#define MIN(a,b)                        ((a) < (b) ? (a) : (b))
N#endif
N
N#if !defined(MAX)
X#if !0L
N#define MAX(a,b)                        ((a) > (b) ? (a) : (b))
N#endif
N
N#define MB(size)                        ((size) * 1024 * 1024)
N
N#define KB(size)                        ((size) * 1024)
N
N#define ROUND_UP(value, boundary)       ((value) + ((boundary) - (value)) % (boundary))
N
N#define ROUND_DOWN(value, boundary)     ((value) - ((value) % (boundary)))
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N// Write the value to the address specified and return the size
Nuint32_t util_write_hex8(char *str, uint8_t value);
Nuint32_t util_write_hex16(char *str, uint16_t value);
Nuint32_t util_write_hex32(char *str, uint32_t value);
Nuint32_t util_write_uint32(char *str, uint32_t value);
Nuint32_t util_write_uint32(char *str, uint32_t value);
Nuint32_t util_write_uint32_zp(char *str, uint32_t value, uint16_t total_size);
Nuint32_t util_write_string(char *str, const char *data);
N
Nuint32_t util_div_round_up(uint32_t dividen, uint32_t divisor);
Nuint32_t util_div_round_down(uint32_t dividen, uint32_t divisor);
Nuint32_t util_div_round(uint32_t dividen, uint32_t divisor);
N
N#if !(defined(DAPLINK_NO_ASSERT_FILENAMES) && defined(DAPLINK_BL))
X#if !(1L && 0L)
N// With the filename enabled.
N#define util_assert(expression) _util_assert((expression), __FILE__, __LINE__)
N#else
S// Filename disabled to save code size.
S#define util_assert(expression) _util_assert((expression), "(file)", __LINE__)
N#endif
Nvoid _util_assert(bool expression, const char *filename, uint16_t line);
Xvoid _util_assert(_Bool expression, const char *filename, uint16_t line);
N
Nvoid util_assert_clear(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 29 "..\..\..\source\daplink\drag-n-drop\virtual_fs.c" 2
N
N// Virtual file system driver
N// Limitations:
N//   - files must be contiguous
N//   - data written cannot be read back
N//   - data should only be read once
N
N// FAT16 limitations +- safety margin
N#define FAT_CLUSTERS_MAX (65525 - 100)
N#define FAT_CLUSTERS_MIN (4086 + 100)
N
Ntypedef struct {
N    uint8_t boot_sector[11];
N    /* DOS 2.0 BPB - Bios Parameter Block, 11 bytes */
N    uint16_t bytes_per_sector;
N    uint8_t  sectors_per_cluster;
N    uint16_t reserved_logical_sectors;
N    uint8_t  num_fats;
N    uint16_t max_root_dir_entries;
N    uint16_t total_logical_sectors;
N    uint8_t  media_descriptor;
N    uint16_t logical_sectors_per_fat;
N    /* DOS 3.31 BPB - Bios Parameter Block, 12 bytes */
N    uint16_t physical_sectors_per_track;
N    uint16_t heads;
N    uint32_t hidden_sectors;
N    uint32_t big_sectors_on_drive;
N    /* Extended BIOS Parameter Block, 26 bytes */
N    uint8_t  physical_drive_number;
N    uint8_t  not_used;
N    uint8_t  boot_record_signature;
N    uint32_t volume_id;
N    char     volume_label[11];
N    char     file_system_type[8];
N    /* bootstrap data in bytes 62-509 */
N    uint8_t  bootstrap[448];
N    /* These entries in place of bootstrap code are the *nix partitions */
N    //uint8_t  partition_one[16];
N    //uint8_t  partition_two[16];
N    //uint8_t  partition_three[16];
N    //uint8_t  partition_four[16];
N    /* Mandatory value at bytes 510-511, must be 0xaa55 */
N    uint16_t signature;
N} __attribute__((packed)) mbr_t;
N
Ntypedef struct file_allocation_table {
N    uint8_t f[512];
N} file_allocation_table_t;
N
Ntypedef struct FatDirectoryEntry {
N    vfs_filename_t filename;
N    uint8_t attributes;
N    uint8_t reserved;
N    uint8_t creation_time_ms;
N    uint16_t creation_time;
N    uint16_t creation_date;
N    uint16_t accessed_date;
N    uint16_t first_cluster_high_16;
N    uint16_t modification_time;
N    uint16_t modification_date;
N    uint16_t first_cluster_low_16;
N    uint32_t filesize;
N} __attribute__((packed)) FatDirectoryEntry_t;
NCOMPILER_ASSERT(sizeof(FatDirectoryEntry_t) == 32);
Xenum { compiler_assert_0 = 1/((sizeof(FatDirectoryEntry_t) == 32) ? 1 : 0) };
N
N// to save RAM all files must be in the first root dir entry (512 bytes)
N//  but 2 actually exist on disc (32 entries) to accomodate hidden OS files,
N//  folders and metadata
Ntypedef struct root_dir {
N    FatDirectoryEntry_t f[32];
N} root_dir_t;
N
Ntypedef struct virtual_media {
N    vfs_read_cb_t read_cb;
N    vfs_write_cb_t write_cb;
N    uint32_t length;
N} virtual_media_t;
N
Nstatic uint32_t read_zero(uint32_t offset, uint8_t *data, uint32_t size);
Nstatic void write_none(uint32_t offset, const uint8_t *data, uint32_t size);
N
Nstatic uint32_t read_mbr(uint32_t offset, uint8_t *data, uint32_t size);
Nstatic uint32_t read_fat(uint32_t offset, uint8_t *data, uint32_t size);
Nstatic uint32_t read_dir(uint32_t offset, uint8_t *data, uint32_t size);
Nstatic void write_dir(uint32_t offset, const uint8_t *data, uint32_t size);
Nstatic void file_change_cb_stub(const vfs_filename_t filename, vfs_file_change_t change,
N                                vfs_file_t file, vfs_file_t new_file_data);
Nstatic uint32_t cluster_to_sector(uint32_t cluster_idx);
Nstatic bool filename_valid(const vfs_filename_t filename);
Xstatic _Bool filename_valid(const vfs_filename_t filename);
Nstatic bool filename_character_valid(char character);
Xstatic _Bool filename_character_valid(char character);
N
N// If sector size changes update comment below
NCOMPILER_ASSERT(0x0200 == VFS_SECTOR_SIZE);
Xenum { compiler_assert_1 = 1/((0x0200 == 512) ? 1 : 0) };
N// If root directory size changes update max_root_dir_entries
NCOMPILER_ASSERT(0x0020 == sizeof(root_dir_t) / sizeof(FatDirectoryEntry_t));
Xenum { compiler_assert_2 = 1/((0x0020 == sizeof(root_dir_t) / sizeof(FatDirectoryEntry_t)) ? 1 : 0) };
Nstatic const mbr_t mbr_tmpl = {
N    /*uint8_t[11]*/.boot_sector = {
N        0xEB, 0x3C, 0x90,
N        'M', 'S', 'D', '0', 'S', '4', '.', '1' // OEM Name in text (8 chars max)
N    },
N    /*uint16_t*/.bytes_per_sector           = 0x0200,       // 512 bytes per sector
N    /*uint8_t */.sectors_per_cluster        = 0x08,         // 4k cluser
N    /*uint16_t*/.reserved_logical_sectors   = 0x0001,       // mbr is 1 sector
N    /*uint8_t */.num_fats                   = 0x02,         // 2 FATs
N    /*uint16_t*/.max_root_dir_entries       = 0x0020,       // 32 dir entries (max)
N    /*uint16_t*/.total_logical_sectors      = 0x1f50,       // sector size * # of sectors = drive size
N    /*uint8_t */.media_descriptor           = 0xf8,         // fixed disc = F8, removable = F0
N    /*uint16_t*/.logical_sectors_per_fat    = 0x0001,       // FAT is 1k - ToDO:need to edit this
N    /*uint16_t*/.physical_sectors_per_track = 0x0001,       // flat
N    /*uint16_t*/.heads                      = 0x0001,       // flat
N    /*uint32_t*/.hidden_sectors             = 0x00000000,   // before mbt, 0
N    /*uint32_t*/.big_sectors_on_drive       = 0x00000000,   // 4k sector. not using large clusters
N    /*uint8_t */.physical_drive_number      = 0x00,
N    /*uint8_t */.not_used                   = 0x00,         // Current head. Linux tries to set this to 0x1
N    /*uint8_t */.boot_record_signature      = 0x29,         // signature is present
N    /*uint32_t*/.volume_id                  = 0x27021974,   // serial number
N    // needs to match the root dir label
N    /*char[11]*/.volume_label               = {'D', 'A', 'P', 'L', 'I', 'N', 'K', '-', 'D', 'N', 'D'},
N    // unused by msft - just a label (FAT, FAT12, FAT16)
N    /*char[8] */.file_system_type           = {'F', 'A', 'T', '1', '6', ' ', ' ', ' '},
N
N    /* BOOTSTRAP SOURCE CODE AND PAYLOAD GENERATOR
N     * PRINTS OUT WARNING MESSAGE ON ACCIDENTAL BOOT FROM DAPLINK
N     1                                  [BITS 16]
N     2                                  %define BLSTART 0x3E
N     3                                  %define BLLEN 448
N     4
N     5 00000000 FA                      cli
N     6 00000001 B8C007                  mov ax, 07C0h
N     7 00000004 052001                  add ax, 288
N     8 00000007 8ED0                    mov ss, ax
N     9 00000009 BC0010                  mov sp, 4096
N    10 0000000C B8C007                  mov ax, 07C0h
N    11 0000000F 8ED8                    mov ds, ax
N    12 00000011 BE[6D00]                mov si,message+BLSTART
N    13 00000014 E80B00                  call print
N    14 00000017 EBFE                    jmp $
N    15
N    16                                  printc:
N    17 00000019 B40E                        mov ah, 0x0E
N    18 0000001B B700                        mov bh, 0x00
N    19 0000001D B307                        mov bl, 0x07
N    20 0000001F CD10                        int 0x10
N    21 00000021 C3                          ret
N    22
N    23                                  print:
N    24                                      nextc:
N    25 00000022 8A04                            mov al, [si]
N    26 00000024 46                              inc si
N    27 00000025 08C0                            or al, al
N    28 00000027 7405                            jz return
N    29 00000029 E8EDFF                          call printc
N    30 0000002C EBF4                            jmp nextc
N    31                                      return:
N    32 0000002E C3                              ret
N    33
N    34 0000002F 504C45415345205245-     message db 'PLEASE REMOVE THE ARM MBED DAPLINK USB DEVICE AND REBOOT THE SYSTEM..', 0
N    35 00000038 4D4F56452054484520-
N    36 00000041 41524D204D42454420-
N    37 0000004A 4441504C494E4B2055-
N    38 00000053 534220444556494345-
N    39 0000005C 20414E44205245424F-
N    40 00000065 4F5420544845205359-
N    41 0000006E 5354454D2E2E00
N    42
N    43 00000075 00<rept>                times BLLEN-($-$$) db 0
N
N    USE BELOW SCRIPT TO COMPILE BOOTSTRAP AND GENERATE PAYLOAD:
N    #!/usr/bin/env python
N    import os
N    os.system('nasm -f bin -o print.bin -l print.lst print.asm')
N    print(open('print.lst','r').read())
N    x=1
N    for c in open('print.bin','rb').read():
N            print('0x%02X, '%c, end='' if x % 16 else '\n')
N            x += 1
N     */
N    /*uint8_t[448]*/.bootstrap = {
N        0xFA, 0xB8, 0xC0, 0x07, 0x05, 0x20, 0x01, 0x8E, 0xD0, 0xBC, 0x00, 0x10, 0xB8, 0xC0, 0x07, 0x8E,
N        0xD8, 0xBE, 0x6D, 0x00, 0xE8, 0x0B, 0x00, 0xEB, 0xFE, 0xB4, 0x0E, 0xB7, 0x00, 0xB3, 0x07, 0xCD,
N        0x10, 0xC3, 0x8A, 0x04, 0x46, 0x08, 0xC0, 0x74, 0x05, 0xE8, 0xED, 0xFF, 0xEB, 0xF4, 0xC3, 0x50,
N        0x4C, 0x45, 0x41, 0x53, 0x45, 0x20, 0x52, 0x45, 0x4D, 0x4F, 0x56, 0x45, 0x20, 0x54, 0x48, 0x45,
N        0x20, 0x41, 0x52, 0x4D, 0x20, 0x4D, 0x42, 0x45, 0x44, 0x20, 0x44, 0x41, 0x50, 0x4C, 0x49, 0x4E,
N        0x4B, 0x20, 0x55, 0x53, 0x42, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x20, 0x41, 0x4E, 0x44,
N        0x20, 0x52, 0x45, 0x42, 0x4F, 0x4F, 0x54, 0x20, 0x54, 0x48, 0x45, 0x20, 0x53, 0x59, 0x53, 0x54,
N        0x45, 0x4D, 0x2E, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N    },
N    // Signature MUST be 0xAA55 to maintain compatibility (i.e. with Android).
N    /*uint16_t*/.signature = 0xAA55,
N};
N
Nenum virtual_media_idx_t {
N    MEDIA_IDX_MBR = 0,
N    MEDIA_IDX_FAT1,
N    MEDIA_IDX_FAT2,
N    MEDIA_IDX_ROOT_DIR,
N
N    MEDIA_IDX_COUNT
N};
N
N// Note - everything in virtual media must be a multiple of VFS_SECTOR_SIZE
Nconst virtual_media_t virtual_media_tmpl[] = {
N    /*  Read CB         Write CB        Region Size                 Region Name     */
N    {   read_mbr,       write_none,     VFS_SECTOR_SIZE         },  /* MBR          */
X    {   read_mbr,       write_none,     512         },   
N    {   read_fat,       write_none,     0 /* Set at runtime */  },  /* FAT1         */
N    {   read_fat,       write_none,     0 /* Set at runtime */  },  /* FAT2         */
N    {   read_dir,       write_dir,      VFS_SECTOR_SIZE * 2     },  /* Root Dir     */
X    {   read_dir,       write_dir,      512 * 2     },   
N    /* Raw filesystem contents follow */
N};
N// Keep virtual_media_idx_t in sync with virtual_media_tmpl
NCOMPILER_ASSERT(MEDIA_IDX_COUNT == ARRAY_SIZE(virtual_media_tmpl));
Xenum { compiler_assert_3 = 1/((MEDIA_IDX_COUNT == (sizeof(virtual_media_tmpl) / sizeof(virtual_media_tmpl[0]))) ? 1 : 0) };
N
Nstatic const FatDirectoryEntry_t root_dir_entry = {
N    /*uint8_t[11] */ .filename = {""},
N    /*uint8_t */ .attributes = VFS_FILE_ATTR_VOLUME_LABEL | VFS_FILE_ATTR_ARCHIVE,
N    /*uint8_t */ .reserved = 0x00,
N    /*uint8_t */ .creation_time_ms = 0x00,
N    /*uint16_t*/ .creation_time = 0x0000,
N    /*uint16_t*/ .creation_date = 0x0000,
N    /*uint16_t*/ .accessed_date = 0x0000,
N    /*uint16_t*/ .first_cluster_high_16 = 0x0000,
N    /*uint16_t*/ .modification_time = 0x8E41,
N    /*uint16_t*/ .modification_date = 0x32bb,
N    /*uint16_t*/ .first_cluster_low_16 = 0x0000,
N    /*uint32_t*/ .filesize = 0x00000000
N};
N
Nstatic const FatDirectoryEntry_t dir_entry_tmpl = {
N    /*uint8_t[11] */ .filename = {""},
N    /*uint8_t */ .attributes = VFS_FILE_ATTR_READ_ONLY,
N    /*uint8_t */ .reserved = 0x00,
N    /*uint8_t */ .creation_time_ms = 0x00,
N    /*uint16_t*/ .creation_time = 0x0000,
N    /*uint16_t*/ .creation_date = 0x4876,
N    /*uint16_t*/ .accessed_date = 0x4876,
N    /*uint16_t*/ .first_cluster_high_16 = 0x0000,
N    /*uint16_t*/ .modification_time = 0x83dc,
N    /*uint16_t*/ .modification_date = 0x4876,
N    /*uint16_t*/ .first_cluster_low_16 = 0x0000,
N    /*uint32_t*/ .filesize = 0x00000000
N};
N
Nmbr_t mbr;
Nfile_allocation_table_t fat;
Nvirtual_media_t virtual_media[16];
Nroot_dir_t dir_current;
Nuint8_t file_count;
Nvfs_file_change_cb_t file_change_cb;
Nuint32_t virtual_media_idx;
Nuint32_t fat_idx;
Nuint32_t dir_idx;
Nuint32_t data_start;
N
N// Virtual media must be larger than the template
NCOMPILER_ASSERT(sizeof(virtual_media) > sizeof(virtual_media_tmpl));
Xenum { compiler_assert_4 = 1/((sizeof(virtual_media) > sizeof(virtual_media_tmpl)) ? 1 : 0) };
N
Nstatic void write_fat(file_allocation_table_t *fat, uint32_t idx, uint16_t val)
N{
N    uint32_t low_idx;
N    uint32_t high_idx;
N    low_idx = idx * 2 + 0;
N    high_idx = idx * 2 + 1;
N
N    // Assert that this is still within the fat table
N    if (high_idx >= ARRAY_SIZE(fat->f)) {
X    if (high_idx >= (sizeof(fat->f) / sizeof(fat->f[0]))) {
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 314);
N        return;
N    }
N
N    fat->f[low_idx] = (val >> 0) & 0xFF;
N    fat->f[high_idx] = (val >> 8) & 0xFF;
N}
N
Nvoid vfs_init(const vfs_filename_t drive_name, uint32_t disk_size)
N{
N    uint32_t i;
N    uint32_t num_clusters;
N    uint32_t total_sectors;
N    // Clear everything
N    memset(&mbr, 0, sizeof(mbr));
N    memset(&fat, 0, sizeof(fat));
N    fat_idx = 0;
N    memset(&virtual_media, 0, sizeof(virtual_media));
N    memset(&dir_current, 0, sizeof(dir_current));
N    dir_idx = 0;
N    file_count = 0;
N    file_change_cb = file_change_cb_stub;
N    virtual_media_idx = 0;
N    data_start = 0;
N    // Initialize MBR
N    memcpy(&mbr, &mbr_tmpl, sizeof(mbr_t));
N    total_sectors = ((disk_size + KB(64)) / mbr.bytes_per_sector);
X    total_sectors = ((disk_size + ((64) * 1024)) / mbr.bytes_per_sector);
N    // Make sure this is the right size for a FAT16 volume
N    if (total_sectors < FAT_CLUSTERS_MIN * mbr.sectors_per_cluster) {
X    if (total_sectors < (4086 + 100) * mbr.sectors_per_cluster) {
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 343);
N        total_sectors = FAT_CLUSTERS_MIN * mbr.sectors_per_cluster;
X        total_sectors = (4086 + 100) * mbr.sectors_per_cluster;
N    } else if (total_sectors > FAT_CLUSTERS_MAX * mbr.sectors_per_cluster) {
X    } else if (total_sectors > (65525 - 100) * mbr.sectors_per_cluster) {
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 346);
N        total_sectors = FAT_CLUSTERS_MAX * mbr.sectors_per_cluster;
X        total_sectors = (65525 - 100) * mbr.sectors_per_cluster;
N    }
N    if (total_sectors >= 0x10000) {
N        mbr.total_logical_sectors = 0;
N        mbr.big_sectors_on_drive  = total_sectors;
N    } else {
N        mbr.total_logical_sectors = total_sectors;
N        mbr.big_sectors_on_drive  = 0;
N    }
N    // FAT table will likely be larger than needed, but this is allowed by the
N    // fat specification
N    num_clusters = total_sectors / mbr.sectors_per_cluster;
N    mbr.logical_sectors_per_fat = (num_clusters * 2 + VFS_SECTOR_SIZE - 1) / VFS_SECTOR_SIZE;
X    mbr.logical_sectors_per_fat = (num_clusters * 2 + 512 - 1) / 512;
N    // Initailize virtual media
N    memcpy(&virtual_media, &virtual_media_tmpl, sizeof(virtual_media_tmpl));
N    virtual_media[MEDIA_IDX_FAT1].length = VFS_SECTOR_SIZE * mbr.logical_sectors_per_fat;
X    virtual_media[MEDIA_IDX_FAT1].length = 512 * mbr.logical_sectors_per_fat;
N    virtual_media[MEDIA_IDX_FAT2].length = VFS_SECTOR_SIZE * mbr.logical_sectors_per_fat;
X    virtual_media[MEDIA_IDX_FAT2].length = 512 * mbr.logical_sectors_per_fat;
N    // Initialize indexes
N    virtual_media_idx = MEDIA_IDX_COUNT;
N    data_start = 0;
N
N    for (i = 0; i < ARRAY_SIZE(virtual_media_tmpl); i++) {
X    for (i = 0; i < (sizeof(virtual_media_tmpl) / sizeof(virtual_media_tmpl[0])); i++) {
N        data_start += virtual_media[i].length;
N    }
N
N    // Initialize FAT
N    fat_idx = 0;
N    write_fat(&fat, fat_idx, 0xFFF8);    // Media type "media_descriptor"
N    fat_idx++;
N    write_fat(&fat, fat_idx, 0xFFFF);    // FAT12 - always 0xFFF (no meaning), FAT16 - dirty/clean (clean = 0xFFFF)
N    fat_idx++;
N    // Initialize root dir
N    dir_idx = 0;
N    dir_current.f[dir_idx] = root_dir_entry;
N    memcpy(dir_current.f[dir_idx].filename, drive_name, sizeof(dir_current.f[0].filename));
N    dir_idx++;
N}
N
Nuint32_t vfs_get_total_size()
N{
N    uint32_t size;
N    if (mbr.total_logical_sectors > 0) {
N        size = mbr.total_logical_sectors * mbr.bytes_per_sector;
N    } else if (mbr.big_sectors_on_drive > 0) {
N        size = mbr.big_sectors_on_drive * mbr.bytes_per_sector;
N    } else {
N        size = 0;
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 394);
N    }
N    return size;
N}
N
Nvfs_file_t vfs_create_file(const vfs_filename_t filename, vfs_read_cb_t read_cb, vfs_write_cb_t write_cb, uint32_t len)
N{
N    uint32_t first_cluster;
N    FatDirectoryEntry_t *de;
N    uint32_t clusters;
N    uint32_t cluster_size;
N    uint32_t i;
N    util_assert(filename_valid(filename));
X    _util_assert((filename_valid(filename)), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 406);
N    // Compute the number of clusters in the file
N    cluster_size = mbr.bytes_per_sector * mbr.sectors_per_cluster;
N    clusters = (len + cluster_size - 1) / cluster_size;
N    // Write the cluster chain to the fat table
N    first_cluster = 0;
N
N    if (len > 0) {
N        first_cluster = fat_idx;
N
N        for (i = 0; i < clusters - 1; i++) {
N            write_fat(&fat, fat_idx, fat_idx + 1);
N            fat_idx++;
N        }
N
N        write_fat(&fat, fat_idx, 0xFFFF);
N        fat_idx++;
N    }
N
N    // Update directory entry
N    if (dir_idx >= ARRAY_SIZE(dir_current.f)) {
X    if (dir_idx >= (sizeof(dir_current . f) / sizeof(dir_current . f[0]))) {
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 427);
N        return VFS_FILE_INVALID;
X        return 0;
N    }
N
N    de = &dir_current.f[dir_idx];
N    dir_idx++;
N    memcpy(de, &dir_entry_tmpl, sizeof(dir_entry_tmpl));
N    memcpy(de->filename, filename, 11);
N    de->filesize = len;
N    de->first_cluster_high_16 = (first_cluster >> 16) & 0xFFFF;
N    de->first_cluster_low_16 = (first_cluster >> 0) & 0xFFFF;
N
N    // Update virtual media
N    if (virtual_media_idx >= ARRAY_SIZE(virtual_media)) {
X    if (virtual_media_idx >= (sizeof(virtual_media) / sizeof(virtual_media[0]))) {
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 441);
N        return VFS_FILE_INVALID;
X        return 0;
N    }
N
N    virtual_media[virtual_media_idx].read_cb = read_zero;
N    virtual_media[virtual_media_idx].write_cb = write_none;
N
N    if (0 != read_cb) {
N        virtual_media[virtual_media_idx].read_cb = read_cb;
N    }
N
N    if (0 != write_cb) {
N        virtual_media[virtual_media_idx].write_cb = write_cb;
N    }
N
N    virtual_media[virtual_media_idx].length = clusters * mbr.bytes_per_sector * mbr.sectors_per_cluster;
N    virtual_media_idx++;
N    file_count += 1;
N    return de;
N}
N
Nvoid vfs_file_set_attr(vfs_file_t file, vfs_file_attr_bit_t attr)
N{
N    FatDirectoryEntry_t *de = file;
N    de->attributes = attr;
N}
N
Nvfs_sector_t vfs_file_get_start_sector(vfs_file_t file)
N{
N    FatDirectoryEntry_t *de = file;
N
N    if (vfs_file_get_size(file) == 0) {
N        return VFS_INVALID_SECTOR;
X        return 0xFFFFFFFF;
N    }
N
N    return cluster_to_sector(de->first_cluster_low_16);
N}
N
Nuint32_t vfs_file_get_size(vfs_file_t file)
N{
N    FatDirectoryEntry_t *de = file;
N    return de->filesize;
N}
N
Nvfs_file_attr_bit_t vfs_file_get_attr(vfs_file_t file)
N{
N    FatDirectoryEntry_t *de = file;
N    return (vfs_file_attr_bit_t)de->attributes;
N}
N
Nvoid vfs_set_file_change_callback(vfs_file_change_cb_t cb)
N{
N    file_change_cb = cb;
N}
N
Nvoid vfs_read(uint32_t requested_sector, uint8_t *buf, uint32_t num_sectors)
N{
N    uint8_t i = 0;
N    uint32_t current_sector;
N    // Zero out the buffer
N    memset(buf, 0, num_sectors * VFS_SECTOR_SIZE);
X    memset(buf, 0, num_sectors * 512);
N    current_sector = 0;
N
N    for (i = 0; i < ARRAY_SIZE(virtual_media); i++) {
X    for (i = 0; i < (sizeof(virtual_media) / sizeof(virtual_media[0])); i++) {
N        uint32_t vm_sectors = virtual_media[i].length / VFS_SECTOR_SIZE;
X        uint32_t vm_sectors = virtual_media[i].length / 512;
N        uint32_t vm_start = current_sector;
N        uint32_t vm_end = current_sector + vm_sectors;
N
N        // Data can be used in this sector
N        if ((requested_sector >= vm_start) && (requested_sector < vm_end)) {
N            uint32_t sector_offset;
N            uint32_t sectors_to_write = vm_end - requested_sector;
N            sectors_to_write = MIN(sectors_to_write, num_sectors);
X            sectors_to_write = ((sectors_to_write) < (num_sectors) ? (sectors_to_write) : (num_sectors));
N            sector_offset = requested_sector - current_sector;
N            virtual_media[i].read_cb(sector_offset, buf, sectors_to_write);
N            // Update requested sector
N            requested_sector += sectors_to_write;
N            num_sectors -= sectors_to_write;
N        }
N
N        // If there is no more data to be read then break
N        if (num_sectors == 0) {
N            break;
N        }
N
N        // Move to the next virtual media entry
N        current_sector += vm_sectors;
N    }
N}
N
Nvoid vfs_write(uint32_t requested_sector, const uint8_t *buf, uint32_t num_sectors)
N{
N    uint8_t i = 0;
N    uint32_t current_sector;
N    current_sector = 0;
N
N    for (i = 0; i < virtual_media_idx; i++) {
N        uint32_t vm_sectors = virtual_media[i].length / VFS_SECTOR_SIZE;
X        uint32_t vm_sectors = virtual_media[i].length / 512;
N        uint32_t vm_start = current_sector;
N        uint32_t vm_end = current_sector + vm_sectors;
N
N        // Data can be used in this sector
N        if ((requested_sector >= vm_start) && (requested_sector < vm_end)) {
N            uint32_t sector_offset;
N            uint32_t sectors_to_read = vm_end - requested_sector;
N            sectors_to_read = MIN(sectors_to_read, num_sectors);
X            sectors_to_read = ((sectors_to_read) < (num_sectors) ? (sectors_to_read) : (num_sectors));
N            sector_offset = requested_sector - current_sector;
N            virtual_media[i].write_cb(sector_offset, buf, sectors_to_read);
N            // Update requested sector
N            requested_sector += sectors_to_read;
N            num_sectors -= sectors_to_read;
N        }
N
N        // If there is no more data to be read then break
N        if (num_sectors == 0) {
N            break;
N        }
N
N        // Move to the next virtual media entry
N        current_sector += vm_sectors;
N    }
N}
N
Nstatic uint32_t read_zero(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors)
N{
N    uint32_t read_size = VFS_SECTOR_SIZE * num_sectors;
X    uint32_t read_size = 512 * num_sectors;
N    memset(data, 0, read_size);
N    return read_size;
N}
N
Nstatic void write_none(uint32_t sector_offset, const uint8_t *data, uint32_t num_sectors)
N{
N    // Do nothing
N}
N
Nstatic uint32_t read_mbr(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors)
N{
N    uint32_t read_size = sizeof(mbr_t);
N    COMPILER_ASSERT(sizeof(mbr_t) <= VFS_SECTOR_SIZE);
X    enum { compiler_assert_5 = 1/((sizeof(mbr_t) <= 512) ? 1 : 0) };
N
N    if (sector_offset != 0) {
N        // Don't worry about reading other sectors
N        return 0;
N    }
N
N    memcpy(data, &mbr, read_size);
N    return read_size;
N}
N
N/* No need to handle writes to the mbr */
N
Nstatic uint32_t read_fat(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors)
N{
N    uint32_t read_size = sizeof(file_allocation_table_t);
N    COMPILER_ASSERT(sizeof(file_allocation_table_t) <= VFS_SECTOR_SIZE);
X    enum { compiler_assert_6 = 1/((sizeof(file_allocation_table_t) <= 512) ? 1 : 0) };
N
N    if (sector_offset != 0) {
N        // Don't worry about reading other sectors
N        return 0;
N    }
N
N    memcpy(data, &fat, read_size);
N    return read_size;
N}
N
N/* No need to handle writes to the fat */
N
Nstatic uint32_t read_dir(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors)
N{
N    if ((sector_offset + num_sectors) * VFS_SECTOR_SIZE > sizeof(dir_current)) {
X    if ((sector_offset + num_sectors) * 512 > sizeof(dir_current)) {
N        // Trying to read too much of the root directory
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 612);
N        return 0;
N    }
N
N    // Zero buffer data is VFS_SECTOR_SIZE max
N    memset(data, 0, VFS_SECTOR_SIZE);
X    memset(data, 0, 512);
N
N    if (sector_offset == 0) { //Handle the first 512 bytes
N        // Copy data that is actually created in the directory
N        memcpy(data, &dir_current.f[0], dir_idx*sizeof(FatDirectoryEntry_t));
N    }
N
N    return num_sectors * VFS_SECTOR_SIZE;
X    return num_sectors * 512;
N}
N
Nstatic void write_dir(uint32_t sector_offset, const uint8_t *data, uint32_t num_sectors)
N{
N    FatDirectoryEntry_t *old_entry;
N    FatDirectoryEntry_t *new_entry;
N    uint32_t start_index;
N    uint32_t num_entries;
N    uint32_t i;
N
N    if ((sector_offset + num_sectors) * VFS_SECTOR_SIZE > sizeof(dir_current)) {
X    if ((sector_offset + num_sectors) * 512 > sizeof(dir_current)) {
N        // Trying to write too much of the root directory
N        util_assert(0);
X        _util_assert((0), "..\\..\\..\\source\\daplink\\drag-n-drop\\virtual_fs.c", 637);
N        return;
N    }
N
N    start_index = sector_offset * VFS_SECTOR_SIZE / sizeof(FatDirectoryEntry_t);
X    start_index = sector_offset * 512 / sizeof(FatDirectoryEntry_t);
N    num_entries = num_sectors * VFS_SECTOR_SIZE / sizeof(FatDirectoryEntry_t);
X    num_entries = num_sectors * 512 / sizeof(FatDirectoryEntry_t);
N    old_entry = &dir_current.f[start_index];
N    new_entry = (FatDirectoryEntry_t *)data;
N    // If this is the first sector start at index 1 to get past drive name
N    i = 0 == sector_offset ? 1 : 0;
N
N    for (; i < num_entries; i++) {
N        bool same_name;
X        _Bool same_name;
N
N        if (0 == memcmp(&old_entry[i], &new_entry[i], sizeof(FatDirectoryEntry_t))) {
N            continue;
N        }
N
N        // If were at this point then something has changed in the file
N        same_name = (0 == memcmp(old_entry[i].filename, new_entry[i].filename, sizeof(new_entry[i].filename))) ? 1 : 0;
N        // Changed
N        file_change_cb(new_entry[i].filename, VFS_FILE_CHANGED, (vfs_file_t)&old_entry[i], (vfs_file_t)&new_entry[i]);
N
N        // Deleted
N        if (0xe5 == (uint8_t)new_entry[i].filename[0]) {
N            file_change_cb(old_entry[i].filename, VFS_FILE_DELETED, (vfs_file_t)&old_entry[i], (vfs_file_t)&new_entry[i]);
N            continue;
N        }
N
N        // Created
N        if (!same_name && filename_valid(new_entry[i].filename)) {
N            file_change_cb(new_entry[i].filename, VFS_FILE_CREATED, (vfs_file_t)&old_entry[i], (vfs_file_t)&new_entry[i]);
N            continue;
N        }
N    }
N
N    memcpy(&dir_current.f[start_index], data, num_sectors * VFS_SECTOR_SIZE);
X    memcpy(&dir_current.f[start_index], data, num_sectors * 512);
N}
N
Nstatic void file_change_cb_stub(const vfs_filename_t filename, vfs_file_change_t change, vfs_file_t file, vfs_file_t new_file_data)
N{
N    // Do nothing
N}
N
Nstatic uint32_t cluster_to_sector(uint32_t cluster_idx)
N{
N    uint32_t sectors_before_data = data_start / mbr.bytes_per_sector;
N    return sectors_before_data + (cluster_idx - 2) * mbr.sectors_per_cluster;
N}
N
Nstatic bool filename_valid(const vfs_filename_t  filename)
Xstatic _Bool filename_valid(const vfs_filename_t  filename)
N{
N    // Information on valid 8.3 filenames can be found in
N    // the microsoft hardware whitepaper:
N    //
N    // Microsoft Extensible Firmware Initiative
N    // FAT32 File System Specification
N    // FAT: General Overview of On-Disk Format
N    const char invalid_starting_chars[] = {
N        0xE5, // Deleted
N        0x00, // Deleted (and all following entries are free)
N        0x20, // Space not allowed as first character
N    };
N    uint32_t i;
N
N    // Check for invalid starting characters
N    for (i = 0; i < sizeof(invalid_starting_chars); i++) {
N        if (invalid_starting_chars[i] == filename[0]) {
N            return false;
X            return 0;
N        }
N    }
N
N    // Make sure all the characters are valid
N    for (i = 0; i < sizeof(vfs_filename_t); i++) {
N        if (!filename_character_valid(filename[i])) {
N            return false;
X            return 0;
N        }
N    }
N
N    // All checks have passed so filename is valid
N    return true;
X    return 1;
N}
N
Nstatic bool filename_character_valid(char character)
Xstatic _Bool filename_character_valid(char character)
N{
N    const char invalid_chars[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
N    uint32_t i;
N
N    // Lower case characters are not allowed
N    if ((character >= 'a') && (character <= 'z')) {
N        return false;
X        return 0;
N    }
N
N    // Values less than 0x20 are not allowed except 0x5
N    if ((character < 0x20) && (character != 0x5)) {
N        return false;
X        return 0;
N    }
N
N    // Check for special characters that are not allowed
N    for (i = 0; i < sizeof(invalid_chars); i++) {
N        if (invalid_chars[i] == character) {
N            return false;
X            return 0;
N        }
N    }
N
N    // All of the checks have passed so this is a valid file name character
N    return true;
X    return 1;
N}
