; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\usbd_core.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usbd_core.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\usbd_core.crf ..\..\..\source\usb\usbd_core.c]
                          THUMB

                          AREA ||i.USBD_DataInStage||, CODE, READONLY, ALIGN=2

                  USBD_DataInStage PROC
;;;134    
;;;135    void USBD_DataInStage(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        U32 cnt;
;;;138    
;;;139        if (USBD_EP0Data.Count > usbd_max_packet0) {
000002  4c0b              LDR      r4,|L1.48|
000004  480b              LDR      r0,|L1.52|
000006  88a2              LDRH     r2,[r4,#4]  ; USBD_EP0Data
000008  7800              LDRB     r0,[r0,#0]  ; usbd_max_packet0
00000a  4282              CMP      r2,r0
00000c  d900              BLS      |L1.16|
;;;140            cnt = usbd_max_packet0;
00000e  4602              MOV      r2,r0
                  |L1.16|
;;;141        } else {
;;;142            cnt = USBD_EP0Data.Count;
;;;143        }
;;;144    
;;;145        if (!cnt) {
000010  b91a              CBNZ     r2,|L1.26|
;;;146            USBD_ZLP = 0;
000012  4907              LDR      r1,|L1.48|
000014  2000              MOVS     r0,#0
000016  3914              SUBS     r1,r1,#0x14
000018  7108              STRB     r0,[r1,#4]
                  |L1.26|
;;;147        }
;;;148    
;;;149        cnt = USBD_WriteEP(0x80, USBD_EP0Data.pData, cnt);
00001a  2080              MOVS     r0,#0x80
00001c  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
00001e  f7fffffe          BL       USBD_WriteEP
;;;150        USBD_EP0Data.pData += cnt;
000022  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
000024  4401              ADD      r1,r1,r0
;;;151        USBD_EP0Data.Count -= cnt;
000026  6021              STR      r1,[r4,#0]  ; USBD_EP0Data
000028  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
00002a  1a08              SUBS     r0,r1,r0
00002c  80a0              STRH     r0,[r4,#4]
;;;152    }
00002e  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L1.48|
                          DCD      ||.data||+0x14
                  |L1.52|
                          DCD      usbd_max_packet0

                          AREA ||i.USBD_DataOutStage||, CODE, READONLY, ALIGN=2

                  USBD_DataOutStage PROC
;;;160    
;;;161    void USBD_DataOutStage(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163        U32 cnt;
;;;164        cnt = USBD_ReadEP(0x00, USBD_EP0Data.pData, USBD_EP0Data.Count);
000002  4c06              LDR      r4,|L2.28|
000004  2000              MOVS     r0,#0
000006  88a2              LDRH     r2,[r4,#4]  ; USBD_EP0Data
000008  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
00000a  f7fffffe          BL       USBD_ReadEP
;;;165        USBD_EP0Data.pData += cnt;
00000e  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
000010  4401              ADD      r1,r1,r0
;;;166        USBD_EP0Data.Count -= cnt;
000012  6021              STR      r1,[r4,#0]  ; USBD_EP0Data
000014  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
000016  1a08              SUBS     r0,r1,r0
000018  80a0              STRH     r0,[r4,#4]
;;;167    }
00001a  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L2.28|
                          DCD      ||.data||+0x14

                          AREA ||i.USBD_EndPoint0||, CODE, READONLY, ALIGN=2

                  USBD_EndPoint0 PROC
;;;738    
;;;739    void USBD_EndPoint0(U32 event)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;740    {
;;;741        if (event & USBD_EVT_SETUP) {
;;;742            USBD_SetupStage();
;;;743            USBD_DirCtrlEP(USBD_SetupPacket.bmRequestType.Dir);
000004  4f6e              LDR      r7,|L3.448|
000006  4604              MOV      r4,r0                 ;740
;;;744            USBD_EP0Data.Count = USBD_SetupPacket.wLength;       /* Number of bytes to transfer */
000008  f1a70508          SUB      r5,r7,#8
00000c  0780              LSLS     r0,r0,#30             ;741
00000e  f04f0900          MOV      r9,#0                 ;741
000012  f1a50614          SUB      r6,r5,#0x14           ;741
000016  d522              BPL      |L3.94|
000018  f7fffffe          BL       USBD_SetupStage
00001c  7838              LDRB     r0,[r7,#0]            ;743  ; USBD_SetupPacket
00001e  09c0              LSRS     r0,r0,#7              ;743
000020  f7fffffe          BL       USBD_DirCtrlEP
000024  88f8              LDRH     r0,[r7,#6]  ; USBD_SetupPacket
000026  80a8              STRH     r0,[r5,#4]
;;;745    
;;;746            switch (USBD_SetupPacket.bmRequestType.Type) {
000028  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
00002a  f3c01141          UBFX     r1,r0,#5,#2
00002e  b121              CBZ      r1,|L3.58|
000030  2901              CMP      r1,#1
000032  d05a              BEQ      |L3.234|
000034  2902              CMP      r1,#2
000036  d16f              BNE      |L3.280|
000038  e065              B        |L3.262|
                  |L3.58|
;;;747                case REQUEST_STANDARD:
;;;748                    switch (USBD_SetupPacket.bRequest) {
00003a  7879              LDRB     r1,[r7,#1]  ; USBD_SetupPacket
;;;749                        case USB_REQUEST_GET_STATUS:
;;;750                            if (!USBD_ReqGetStatus()) {
;;;751                                goto stall;
;;;752                            }
;;;753    
;;;754                            USBD_DataInStage();
;;;755                            break;
;;;756    
;;;757                        case USB_REQUEST_CLEAR_FEATURE:
;;;758                            if (!USBD_ReqSetClrFeature(0)) {
;;;759                                goto stall;
;;;760                            }
;;;761    
;;;762                            USBD_StatusInStage();
;;;763    #ifdef __RTX
;;;764    
;;;765                            if (__rtx) {
;;;766                                if (USBD_RTX_CoreTask) {
;;;767                                    usbd_os_evt_set(USBD_EVT_CLR_FEATURE, USBD_RTX_CoreTask);
;;;768                                }
;;;769                            } else {
;;;770    #endif
;;;771    
;;;772                                if (USBD_P_Feature_Event) {
00003c  f8df8184          LDR      r8,|L3.452|
000040  290c              CMP      r1,#0xc               ;748
000042  d269              BCS      |L3.280|
000044  e8dff001          TBB      [pc,r1]               ;748
000048  060c6813          DCB      0x06,0x0c,0x68,0x13
00004c  68182768          DCB      0x68,0x18,0x27,0x68
000050  2b313846          DCB      0x2b,0x31,0x38,0x46
000054  f7fffffe          BL       USBD_ReqGetStatus
000058  e01f              B        |L3.154|
                  |L3.90|
00005a  f7fffffe          BL       USBD_DataInStage
                  |L3.94|
00005e  e067              B        |L3.304|
000060  2000              MOVS     r0,#0                 ;758
000062  e005              B        |L3.112|
                  |L3.100|
000064  f7fffffe          BL       USBD_StatusInStage
000068  f8d80000          LDR      r0,[r8,#0]  ; USBD_P_Feature_Event
00006c  e039              B        |L3.226|
;;;773                                    USBD_P_Feature_Event();
;;;774                                }
;;;775    
;;;776    #ifdef __RTX
;;;777                            }
;;;778    
;;;779    #endif
;;;780                            break;
;;;781    
;;;782                        case USB_REQUEST_SET_FEATURE:
;;;783                            if (!USBD_ReqSetClrFeature(1)) {
00006e  2001              MOVS     r0,#1
                  |L3.112|
000070  f7fffffe          BL       USBD_ReqSetClrFeature
000074  b3c0              CBZ      r0,|L3.232|
000076  e7f5              B        |L3.100|
000078  f0100f1f          TST      r0,#0x1f
00007c  d14c              BNE      |L3.280|
00007e  78b8              LDRB     r0,[r7,#2]  ; USBD_SetupPacket
;;;784                                goto stall;
;;;785                            }
;;;786    
;;;787                            USBD_StatusInStage();
;;;788    #ifdef __RTX
;;;789    
;;;790                            if (__rtx) {
;;;791                                if (USBD_RTX_CoreTask) {
;;;792                                    usbd_os_evt_set(USBD_EVT_SET_FEATURE, USBD_RTX_CoreTask);
;;;793                                }
;;;794                            } else {
;;;795    #endif
;;;796    
;;;797                                if (USBD_P_Feature_Event) {
;;;798                                    USBD_P_Feature_Event();
;;;799                                }
;;;800    
;;;801    #ifdef __RTX
;;;802                            }
;;;803    
;;;804    #endif
;;;805                            break;
;;;806    
;;;807                        case USB_REQUEST_SET_ADDRESS:
;;;808                            if (!USBD_ReqSetAddress()) {
;;;809                                goto stall;
;;;810                            }
;;;811    
;;;812                            USBD_SetAddress(USBD_DeviceAddress & 0x7F, 1);
000080  2101              MOVS     r1,#1
000082  f0400080          ORR      r0,r0,#0x80
000086  7030              STRB     r0,[r6,#0]
000088  f000007f          AND      r0,r0,#0x7f
00008c  f7fffffe          BL       USBD_SetAddress
;;;813                            USBD_StatusInStage();
000090  f7fffffe          BL       USBD_StatusInStage
000094  e04c              B        |L3.304|
;;;814                            break;
;;;815    
;;;816                        case USB_REQUEST_GET_DESCRIPTOR:
;;;817                            if (!USBD_ReqGetDescriptor()) {
000096  f7fffffe          BL       USBD_ReqGetDescriptor
                  |L3.154|
00009a  b328              CBZ      r0,|L3.232|
00009c  e7dd              B        |L3.90|
00009e  f0100f1f          TST      r0,#0x1f
0000a2  d139              BNE      |L3.280|
0000a4  4846              LDR      r0,|L3.448|
0000a6  381b              SUBS     r0,r0,#0x1b
0000a8  e012              B        |L3.208|
;;;818                                goto stall;
;;;819                            }
;;;820    
;;;821                            USBD_DataInStage();
;;;822                            break;
;;;823    
;;;824                        case USB_REQUEST_SET_DESCRIPTOR:
;;;825                            goto stall;
;;;826    
;;;827                        case USB_REQUEST_GET_CONFIGURATION:
;;;828                            if (!USBD_ReqGetConfiguration()) {
;;;829                                goto stall;
;;;830                            }
;;;831    
;;;832                            USBD_DataInStage();
;;;833                            break;
;;;834    
;;;835                        case USB_REQUEST_SET_CONFIGURATION:
;;;836                            if (!USBD_ReqSetConfiguration()) {
0000aa  f7fffffe          BL       USBD_ReqSetConfiguration
0000ae  b1d8              CBZ      r0,|L3.232|
;;;837                                goto stall;
;;;838                            }
;;;839    
;;;840                            USBD_StatusInStage();
0000b0  f7fffffe          BL       USBD_StatusInStage
;;;841    #ifdef __RTX
;;;842    
;;;843                            if (__rtx) {
;;;844                                if (USBD_RTX_CoreTask) {
;;;845                                    usbd_os_evt_set(USBD_EVT_SET_CFG, USBD_RTX_CoreTask);
;;;846                                }
;;;847                            } else {
;;;848    #endif
;;;849    
;;;850                                if (USBD_P_Configure_Event) {
0000b4  4844              LDR      r0,|L3.456|
0000b6  e013              B        |L3.224|
0000b8  f000001f          AND      r0,r0,#0x1f
0000bc  2801              CMP      r0,#1
0000be  d12b              BNE      |L3.280|
0000c0  7870              LDRB     r0,[r6,#1]  ; USBD_Configuration
0000c2  b188              CBZ      r0,|L3.232|
0000c4  7938              LDRB     r0,[r7,#4]  ; USBD_SetupPacket
0000c6  78b1              LDRB     r1,[r6,#2]  ; USBD_NumInterfaces
0000c8  4288              CMP      r0,r1
0000ca  d225              BCS      |L3.280|
0000cc  493f              LDR      r1,|L3.460|
0000ce  4408              ADD      r0,r0,r1
                  |L3.208|
0000d0  6028              STR      r0,[r5,#0]  ; USBD_EP0Data
0000d2  e7c2              B        |L3.90|
;;;851                                    USBD_P_Configure_Event();
;;;852                                }
;;;853    
;;;854    #ifdef __RTX
;;;855                            }
;;;856    
;;;857    #endif
;;;858                            break;
;;;859    
;;;860                        case USB_REQUEST_GET_INTERFACE:
;;;861                            if (!USBD_ReqGetInterface()) {
;;;862                                goto stall;
;;;863                            }
;;;864    
;;;865                            USBD_DataInStage();
;;;866                            break;
;;;867    
;;;868                        case USB_REQUEST_SET_INTERFACE:
;;;869                            if (!USBD_ReqSetInterface()) {
0000d4  f7fffffe          BL       USBD_ReqSetInterface
0000d8  b130              CBZ      r0,|L3.232|
;;;870                                goto stall;
;;;871                            }
;;;872    
;;;873                            USBD_StatusInStage();
0000da  f7fffffe          BL       USBD_StatusInStage
;;;874    #ifdef __RTX
;;;875    
;;;876                            if (__rtx) {
;;;877                                if (USBD_RTX_CoreTask) {
;;;878                                    usbd_os_evt_set(USBD_EVT_SET_IF, USBD_RTX_CoreTask);
;;;879                                }
;;;880                            } else {
;;;881    #endif
;;;882    
;;;883                                if (USBD_P_Interface_Event) {
0000de  483c              LDR      r0,|L3.464|
                  |L3.224|
0000e0  6800              LDR      r0,[r0,#0]  ; USBD_P_Interface_Event
                  |L3.226|
0000e2  b328              CBZ      r0,|L3.304|
;;;884                                    USBD_P_Interface_Event();
0000e4  4780              BLX      r0
0000e6  e023              B        |L3.304|
                  |L3.232|
0000e8  e016              B        |L3.280|
                  |L3.234|
;;;885                                }
;;;886    
;;;887    #ifdef __RTX
;;;888                            }
;;;889    
;;;890    #endif
;;;891                            break;
;;;892    
;;;893                        default:
;;;894                            goto stall;
;;;895                    }
;;;896    
;;;897                    break;  /* end case REQUEST_STANDARD */
;;;898    
;;;899                case REQUEST_CLASS:
;;;900                    switch (USBD_SetupPacket.bmRequestType.Recipient) {
0000ea  f010001f          ANDS     r0,r0,#0x1f
0000ee  d013              BEQ      |L3.280|
0000f0  2801              CMP      r0,#1
0000f2  d111              BNE      |L3.280|
;;;901                        case REQUEST_TO_DEVICE:
;;;902                            goto stall;                                                  /* not supported */
;;;903    
;;;904                        case REQUEST_TO_INTERFACE:
;;;905                            if (USBD_EndPoint0_Setup_HID_ReqToIF()) {
0000f4  f7fffffe          BL       USBD_EndPoint0_Setup_HID_ReqToIF
0000f8  b9d0              CBNZ     r0,|L3.304|
;;;906                                goto setup_class_ok;
;;;907                            }
;;;908    
;;;909                            if (USBD_EndPoint0_Setup_MSC_ReqToIF()) {
0000fa  f7fffffe          BL       USBD_EndPoint0_Setup_MSC_ReqToIF
0000fe  b9b8              CBNZ     r0,|L3.304|
;;;910                                goto setup_class_ok;
;;;911                            }
;;;912    
;;;913                            if (USBD_EndPoint0_Setup_CDC_ReqToIF()) {
000100  f7fffffe          BL       USBD_EndPoint0_Setup_CDC_ReqToIF
000104  e007              B        |L3.278|
                  |L3.262|
;;;914                                goto setup_class_ok;
;;;915                            }
;;;916    
;;;917                            goto stall;                                                  /* not supported */
;;;918    
;;;919                        /* end case REQUEST_TO_INTERFACE */
;;;920    
;;;921                        case REQUEST_TO_ENDPOINT:
;;;922                            goto stall;
;;;923    
;;;924                        /* end case REQUEST_TO_ENDPOINT */
;;;925    
;;;926                        default:
;;;927                            goto stall;
;;;928                    }
;;;929    
;;;930    setup_class_ok:                                                          /* request finished successfully */
;;;931                    break;  /* end case REQUEST_CLASS */
;;;932    
;;;933                case REQUEST_VENDOR:
;;;934                    switch (USBD_SetupPacket.bmRequestType.Recipient) {
000106  f0100f1f          TST      r0,#0x1f
00010a  d105              BNE      |L3.280|
;;;935                        case REQUEST_TO_DEVICE:
;;;936                            if (USBD_EndPoint0_Setup_WebUSB_ReqToDevice()) {
00010c  f7fffffe          BL       USBD_EndPoint0_Setup_WebUSB_ReqToDevice
000110  b970              CBNZ     r0,|L3.304|
;;;937                                goto setup_vendor_ok;
;;;938                            }
;;;939    
;;;940                            if (USBD_EndPoint0_Setup_WinUSB_ReqToDevice()) {
000112  f7fffffe          BL       USBD_EndPoint0_Setup_WinUSB_ReqToDevice
                  |L3.278|
000116  b958              CBNZ     r0,|L3.304|
                  |L3.280|
;;;941                                goto setup_vendor_ok;
;;;942                            }
;;;943    
;;;944                            goto stall;
;;;945    
;;;946                        default:
;;;947                            goto stall;
;;;948                    }
;;;949    setup_vendor_ok:
;;;950                    break; /* end case REQUEST_VENDOR */
;;;951    
;;;952                default:
;;;953    stall:
;;;954                    if ((USBD_SetupPacket.bmRequestType.Dir == REQUEST_HOST_TO_DEVICE) &&
000118  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
00011a  0600              LSLS     r0,r0,#24
00011c  d403              BMI      |L3.294|
;;;955                            (USBD_SetupPacket.wLength != 0)) {
00011e  88f8              LDRH     r0,[r7,#6]  ; USBD_SetupPacket
000120  b108              CBZ      r0,|L3.294|
;;;956                        USBD_SetStallEP(0x00);
000122  2000              MOVS     r0,#0
000124  e000              B        |L3.296|
                  |L3.294|
;;;957                    } else {
;;;958                        USBD_SetStallEP(0x80);
000126  2080              MOVS     r0,#0x80
                  |L3.296|
000128  f7fffffe          BL       USBD_SetStallEP
;;;959                    }
;;;960    
;;;961                    USBD_EP0Data.Count = 0;
00012c  f8a59004          STRH     r9,[r5,#4]
                  |L3.304|
;;;962                    break;
;;;963            }
;;;964        }
;;;965    
;;;966        if (event & USBD_EVT_OUT) {
000130  0760              LSLS     r0,r4,#29
000132  d521              BPL      |L3.376|
;;;967            if (USBD_SetupPacket.bmRequestType.Dir == REQUEST_HOST_TO_DEVICE) {
000134  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
000136  0600              LSLS     r0,r0,#24
000138  d41c              BMI      |L3.372|
;;;968                if (USBD_EP0Data.Count) {                                          /* still data to receive ? */
00013a  88a8              LDRH     r0,[r5,#4]  ; USBD_EP0Data
00013c  b1e0              CBZ      r0,|L3.376|
;;;969                    USBD_DataOutStage();                                             /* receive data */
00013e  f7fffffe          BL       USBD_DataOutStage
;;;970    
;;;971                    if (USBD_EP0Data.Count == 0) {                                   /* data complete ? */
000142  88a8              LDRH     r0,[r5,#4]  ; USBD_EP0Data
000144  b9c0              CBNZ     r0,|L3.376|
;;;972                        switch (USBD_SetupPacket.bmRequestType.Type) {
000146  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
000148  f3c01141          UBFX     r1,r0,#5,#2
00014c  b161              CBZ      r1,|L3.360|
00014e  2901              CMP      r1,#1
000150  d10a              BNE      |L3.360|
;;;973                            case REQUEST_STANDARD:
;;;974                                goto stall_i;                                              /* not supported */
;;;975    
;;;976                            case REQUEST_CLASS:
;;;977                                switch (USBD_SetupPacket.bmRequestType.Recipient) {
000152  f010001f          ANDS     r0,r0,#0x1f
000156  d007              BEQ      |L3.360|
000158  2801              CMP      r0,#1
00015a  d105              BNE      |L3.360|
;;;978                                    case REQUEST_TO_DEVICE:
;;;979                                        goto stall_i;                                          /* not supported */
;;;980    
;;;981                                    case REQUEST_TO_INTERFACE:
;;;982                                        if (USBD_EndPoint0_Out_HID_ReqToIF()) {
00015c  f7fffffe          BL       USBD_EndPoint0_Out_HID_ReqToIF
000160  b950              CBNZ     r0,|L3.376|
;;;983                                            goto out_class_ok;
;;;984                                        }
;;;985    
;;;986                                        if (USBD_EndPoint0_Out_CDC_ReqToIF()) {
000162  f7fffffe          BL       USBD_EndPoint0_Out_CDC_ReqToIF
000166  b938              CBNZ     r0,|L3.376|
                  |L3.360|
;;;987                                            goto out_class_ok;
;;;988                                        }
;;;989    
;;;990                                        goto stall_i;
;;;991    
;;;992                                    /* end case REQUEST_TO_INTERFACE */
;;;993    
;;;994                                    case REQUEST_TO_ENDPOINT:
;;;995                                        goto stall_i;
;;;996    
;;;997                                    /* end case REQUEST_TO_ENDPOINT */
;;;998    
;;;999                                    default:
;;;1000                                       goto stall_i;
;;;1001                               }
;;;1002   
;;;1003   out_class_ok:                                                            /* request finished successfully */
;;;1004                               break; /* end case REQUEST_CLASS */
;;;1005   
;;;1006                           default:
;;;1007   stall_i:
;;;1008                               USBD_SetStallEP(0x80);
000168  2080              MOVS     r0,#0x80
00016a  f7fffffe          BL       USBD_SetStallEP
;;;1009                               USBD_EP0Data.Count = 0;
00016e  f8a59004          STRH     r9,[r5,#4]
;;;1010                               break;
000172  e001              B        |L3.376|
                  |L3.372|
;;;1011                       }
;;;1012                   }
;;;1013               }
;;;1014           } else {
;;;1015               USBD_StatusOutStage();                                             /* receive Acknowledge */
000174  f7fffffe          BL       USBD_StatusOutStage
                  |L3.376|
;;;1016           }
;;;1017       }  /* end USBD_EVT_OUT */
;;;1018   
;;;1019       if (event & USBD_EVT_IN) {
000178  0720              LSLS     r0,r4,#28
00017a  d512              BPL      |L3.418|
;;;1020           if (USBD_SetupPacket.bmRequestType.Dir == REQUEST_DEVICE_TO_HOST) {
00017c  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
00017e  0600              LSLS     r0,r0,#24
000180  d506              BPL      |L3.400|
;;;1021               if (USBD_EP0Data.Count || USBD_ZLP) {
000182  88a8              LDRH     r0,[r5,#4]  ; USBD_EP0Data
000184  7931              LDRB     r1,[r6,#4]  ; USBD_ZLP
000186  4308              ORRS     r0,r0,r1
000188  d00b              BEQ      |L3.418|
;;;1022                   USBD_DataInStage();    /* send data */
00018a  f7fffffe          BL       USBD_DataInStage
00018e  e008              B        |L3.418|
                  |L3.400|
;;;1023               }
;;;1024           } else {
;;;1025               if (USBD_DeviceAddress & 0x80) {
000190  7830              LDRB     r0,[r6,#0]  ; USBD_DeviceAddress
000192  0601              LSLS     r1,r0,#24
000194  d505              BPL      |L3.418|
;;;1026                   USBD_DeviceAddress &= 0x7F;
000196  f000007f          AND      r0,r0,#0x7f
00019a  7030              STRB     r0,[r6,#0]
;;;1027                   USBD_SetAddress(USBD_DeviceAddress, 0);
00019c  2100              MOVS     r1,#0
00019e  f7fffffe          BL       USBD_SetAddress
                  |L3.418|
;;;1028               }
;;;1029           }
;;;1030       }  /* end USBD_EVT_IN */
;;;1031   
;;;1032       if (event & USBD_EVT_OUT_STALL) {
0001a2  0660              LSLS     r0,r4,#25
0001a4  d502              BPL      |L3.428|
;;;1033           USBD_ClrStallEP(0x00);
0001a6  2000              MOVS     r0,#0
0001a8  f7fffffe          BL       USBD_ClrStallEP
                  |L3.428|
;;;1034       }
;;;1035   
;;;1036       if (event & USBD_EVT_IN_STALL) {
0001ac  0620              LSLS     r0,r4,#24
0001ae  d504              BPL      |L3.442|
;;;1037           USBD_ClrStallEP(0x80);
0001b0  e8bd47f0          POP      {r4-r10,lr}
0001b4  2080              MOVS     r0,#0x80
0001b6  f7ffbffe          B.W      USBD_ClrStallEP
                  |L3.442|
;;;1038       }
;;;1039   }
0001ba  e8bd87f0          POP      {r4-r10,pc}
;;;1040   
                          ENDP

0001be  0000              DCW      0x0000
                  |L3.448|
                          DCD      ||.data||+0x1c
                  |L3.452|
                          DCD      USBD_P_Feature_Event
                  |L3.456|
                          DCD      USBD_P_Configure_Event
                  |L3.460|
                          DCD      USBD_AltSetting
                  |L3.464|
                          DCD      USBD_P_Interface_Event

                          AREA ||i.USBD_ReqGetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_ReqGetDescriptor PROC
;;;330    
;;;331    static inline BOOL USBD_ReqGetDescriptor(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;332    {
;;;333        U8  *pD;
;;;334        U32  len, n;
;;;335    
;;;336        switch (USBD_SetupPacket.bmRequestType.Recipient) {
000004  4b57              LDR      r3,|L4.356|
;;;337            case REQUEST_TO_DEVICE:
;;;338                switch (USBD_SetupPacket.wValueH) {
;;;339                    case USB_DEVICE_DESCRIPTOR_TYPE:
;;;340                        USBD_EP0Data.pData = (U8 *)USBD_DeviceDescriptor;
;;;341                        len = USB_DEVICE_DESC_SIZE;
;;;342                        break;
;;;343    
;;;344                    case USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE:
;;;345                        if (!usbd_hs_enable) {
;;;346                            return (__FALSE);  /* High speed not enabled */
;;;347                        }
;;;348    
;;;349                        if (USBD_HighSpeed == __FALSE) {
000006  f1a3051c          SUB      r5,r3,#0x1c
00000a  7818              LDRB     r0,[r3,#0]            ;336  ; USBD_SetupPacket
00000c  f1a30408          SUB      r4,r3,#8              ;340
000010  f010001f          ANDS     r0,r0,#0x1f           ;336
000014  d002              BEQ      |L4.28|
000016  2801              CMP      r0,#1                 ;336
000018  d17b              BNE      |L4.274|
00001a  e08a              B        |L4.306|
                  |L4.28|
00001c  4952              LDR      r1,|L4.360|
00001e  78d8              LDRB     r0,[r3,#3]            ;338  ; USBD_SetupPacket
;;;350                            USBD_EP0Data.pData = (U8 *)USBD_DeviceQualifier;
;;;351                        } else {
;;;352                            USBD_EP0Data.pData = (U8 *)USBD_DeviceQualifier_HS;
;;;353                        }
;;;354    
;;;355                        len = USB_DEVICE_QUALI_SIZE;
;;;356                        break;
;;;357    
;;;358                    case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;359                        if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
;;;360                            return (__FALSE);  /* High speed request but high-speed not enabled */
;;;361                        }
;;;362    
;;;363                        if (USBD_HighSpeed == __FALSE) {
;;;364                            pD = (U8 *)USBD_ConfigDescriptor;
000020  4e52              LDR      r6,|L4.364|
000022  780a              LDRB     r2,[r1,#0]            ;345
000024  494f              LDR      r1,|L4.356|
;;;365                            ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bDescriptorType = USB_CONFIGURATION_DESCRIPTOR_TYPE; //same descriptor is used in other configuration
;;;366                        } else {
;;;367                            pD = (U8 *)USBD_ConfigDescriptor_HS;
000026  4f52              LDR      r7,|L4.368|
000028  391c              SUBS     r1,r1,#0x1c           ;349
00002a  2806              CMP      r0,#6                 ;338
00002c  78c9              LDRB     r1,[r1,#3]            ;349
00002e  d010              BEQ      |L4.82|
000030  dc06              BGT      |L4.64|
000032  2801              CMP      r0,#1                 ;338
000034  d009              BEQ      |L4.74|
000036  2802              CMP      r0,#2                 ;338
000038  d014              BEQ      |L4.100|
00003a  2803              CMP      r0,#3                 ;338
00003c  d169              BNE      |L4.274|
00003e  e04f              B        |L4.224|
                  |L4.64|
000040  2807              CMP      r0,#7                 ;338
000042  d02d              BEQ      |L4.160|
000044  280f              CMP      r0,#0xf               ;338
000046  d164              BNE      |L4.274|
000048  e064              B        |L4.276|
                  |L4.74|
00004a  484a              LDR      r0,|L4.372|
00004c  6020              STR      r0,[r4,#0]            ;341  ; USBD_EP0Data
00004e  2012              MOVS     r0,#0x12              ;341
000050  e06d              B        |L4.302|
                  |L4.82|
000052  2a00              CMP      r2,#0                 ;345
000054  d05d              BEQ      |L4.274|
000056  b119              CBZ      r1,|L4.96|
000058  4847              LDR      r0,|L4.376|
                  |L4.90|
00005a  6020              STR      r0,[r4,#0]            ;355  ; USBD_EP0Data
00005c  200a              MOVS     r0,#0xa               ;355
00005e  e066              B        |L4.302|
                  |L4.96|
000060  4846              LDR      r0,|L4.380|
000062  e7fa              B        |L4.90|
                  |L4.100|
000064  b90a              CBNZ     r2,|L4.106|
000066  2901              CMP      r1,#1                 ;359
000068  d079              BEQ      |L4.350|
                  |L4.106|
00006a  2002              MOVS     r0,#2                 ;365
00006c  b121              CBZ      r1,|L4.120|
;;;368                            ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bDescriptorType = USB_CONFIGURATION_DESCRIPTOR_TYPE; //same descriptor is used in other configuration
00006e  9700              STR      r7,[sp,#0]
000070  7078              STRB     r0,[r7,#1]
                  |L4.114|
;;;369                        }
;;;370    
;;;371                        for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
000072  2000              MOVS     r0,#0
000074  789b              LDRB     r3,[r3,#2]
000076  e00c              B        |L4.146|
                  |L4.120|
000078  9600              STR      r6,[sp,#0]            ;365
00007a  7070              STRB     r0,[r6,#1]            ;365
00007c  e7f9              B        |L4.114|
                  |L4.126|
;;;372                            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
00007e  9900              LDR      r1,[sp,#0]
000080  780a              LDRB     r2,[r1,#0]
000082  b12a              CBZ      r2,|L4.144|
;;;373                                pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
000084  78ca              LDRB     r2,[r1,#3]
000086  788e              LDRB     r6,[r1,#2]
000088  ea462202          ORR      r2,r6,r2,LSL #8
00008c  4411              ADD      r1,r1,r2
00008e  9100              STR      r1,[sp,#0]
                  |L4.144|
000090  1c40              ADDS     r0,r0,#1
                  |L4.146|
000092  4283              CMP      r3,r0                 ;371
000094  d1f3              BNE      |L4.126|
;;;374                            }
;;;375                        }
;;;376    
;;;377                        if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
000096  9800              LDR      r0,[sp,#0]
000098  7801              LDRB     r1,[r0,#0]
00009a  b3d1              CBZ      r1,|L4.274|
;;;378                            return (__FALSE);
;;;379                        }
;;;380    
;;;381                        USBD_EP0Data.pData = pD;
;;;382                        len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;383                        break;
00009c  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
00009e  e042              B        |L4.294|
                  |L4.160|
;;;384    
;;;385                    case USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE:
;;;386                        if (!usbd_hs_enable) {
0000a0  b3ba              CBZ      r2,|L4.274|
;;;387                            return (__FALSE);  /* High speed not enabled */
;;;388                        }
;;;389    
;;;390                        if (USBD_HighSpeed == __FALSE) {
;;;391                            pD = (U8 *)USBD_ConfigDescriptor_HS;
;;;392                            ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bDescriptorType = USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE; //same descriptor is used in main configuration
0000a2  2007              MOVS     r0,#7
0000a4  b121              CBZ      r1,|L4.176|
;;;393                        } else {
;;;394                            pD = (U8 *)USBD_ConfigDescriptor;
;;;395                            ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bDescriptorType = USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE; //same descriptor is used in main configuration
0000a6  9600              STR      r6,[sp,#0]
0000a8  7070              STRB     r0,[r6,#1]
                  |L4.170|
;;;396                        }
;;;397    
;;;398                        for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
0000aa  2000              MOVS     r0,#0
0000ac  789b              LDRB     r3,[r3,#2]            ;371
0000ae  e00c              B        |L4.202|
                  |L4.176|
0000b0  9700              STR      r7,[sp,#0]            ;392
0000b2  7078              STRB     r0,[r7,#1]            ;392
0000b4  e7f9              B        |L4.170|
                  |L4.182|
;;;399                            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
0000b6  9900              LDR      r1,[sp,#0]
0000b8  780a              LDRB     r2,[r1,#0]
0000ba  b12a              CBZ      r2,|L4.200|
;;;400                                pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000bc  78ca              LDRB     r2,[r1,#3]
0000be  788e              LDRB     r6,[r1,#2]
0000c0  ea462202          ORR      r2,r6,r2,LSL #8
0000c4  4411              ADD      r1,r1,r2
0000c6  9100              STR      r1,[sp,#0]
                  |L4.200|
0000c8  1c40              ADDS     r0,r0,#1
                  |L4.202|
0000ca  4283              CMP      r3,r0                 ;398
0000cc  d1f3              BNE      |L4.182|
;;;401                            }
;;;402                        }
;;;403    
;;;404                        if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
0000ce  9800              LDR      r0,[sp,#0]
0000d0  7801              LDRB     r1,[r0,#0]
0000d2  b1f1              CBZ      r1,|L4.274|
;;;405                            return (__FALSE);
;;;406                        }
;;;407    
;;;408                        USBD_EP0Data.pData = pD;
;;;409                        len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000d4  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
0000d6  78c2              LDRB     r2,[r0,#3]
0000d8  7881              LDRB     r1,[r0,#2]
0000da  ea412002          ORR      r0,r1,r2,LSL #8
;;;410                        break;
0000de  e026              B        |L4.302|
                  |L4.224|
;;;411    
;;;412                    case USB_STRING_DESCRIPTOR_TYPE:
;;;413                        pD = (U8 *)USBD_StringDescriptor;
0000e0  4827              LDR      r0,|L4.384|
;;;414    
;;;415                        // added by sam to send unique id string descriptor
;;;416                        if (USBD_SetupPacket.wValueL == 3) {
0000e2  9000              STR      r0,[sp,#0]
0000e4  7898              LDRB     r0,[r3,#2]  ; USBD_SetupPacket
0000e6  2803              CMP      r0,#3
0000e8  d001              BEQ      |L4.238|
;;;417                            USBD_EP0Data.pData = (uint8_t *)info_get_unique_id_string_descriptor();
;;;418                            len = ((USB_STRING_DESCRIPTOR *)USBD_EP0Data.pData)->bLength;
;;;419                            break;
;;;420                        }
;;;421    
;;;422                        for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
0000ea  2000              MOVS     r0,#0
0000ec  e008              B        |L4.256|
                  |L4.238|
0000ee  f7fffffe          BL       info_get_unique_id_string_descriptor
0000f2  e00b              B        |L4.268|
                  |L4.244|
;;;423                            if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
0000f4  9900              LDR      r1,[sp,#0]
0000f6  780a              LDRB     r2,[r1,#0]
0000f8  b10a              CBZ      r2,|L4.254|
;;;424                                pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
0000fa  4411              ADD      r1,r1,r2
0000fc  9100              STR      r1,[sp,#0]
                  |L4.254|
0000fe  1c40              ADDS     r0,r0,#1
                  |L4.256|
000100  7899              LDRB     r1,[r3,#2]            ;422  ; USBD_SetupPacket
000102  4281              CMP      r1,r0                 ;422
000104  d1f6              BNE      |L4.244|
;;;425                            }
;;;426                        }
;;;427    
;;;428                        if (((USB_STRING_DESCRIPTOR *)pD)->bLength == 0) {
000106  9800              LDR      r0,[sp,#0]
000108  7801              LDRB     r1,[r0,#0]
00010a  b111              CBZ      r1,|L4.274|
                  |L4.268|
;;;429                            return (__FALSE);
;;;430                        }
;;;431    
;;;432                        USBD_EP0Data.pData = pD;
;;;433                        len = ((USB_STRING_DESCRIPTOR *)pD)->bLength;
00010c  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
00010e  7800              LDRB     r0,[r0,#0]
;;;434                        break;
000110  e00d              B        |L4.302|
                  |L4.274|
000112  e024              B        |L4.350|
                  |L4.276|
;;;435    
;;;436                    case USB_BINARY_OBJECT_STORE_DESCRIPTOR_TYPE:
;;;437                        if (!usbd_bos_enable) {
000114  481b              LDR      r0,|L4.388|
000116  7800              LDRB     r0,[r0,#0]  ; usbd_bos_enable
000118  2800              CMP      r0,#0
00011a  d01e              BEQ      |L4.346|
;;;438                            return (__FALSE);  /* High speed not enabled */
;;;439                        }
;;;440    
;;;441                        pD = (U8 *)USBD_BinaryObjectStoreDescriptor;
00011c  481a              LDR      r0,|L4.392|
;;;442                        USBD_EP0Data.pData = pD;
00011e  9000              STR      r0,[sp,#0]
;;;443    
;;;444                        if (((USB_BINARY_OBJECT_STORE_DESCRIPTOR *)pD)->bLength == 0) {
000120  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
000122  7801              LDRB     r1,[r0,#0]
000124  b1d9              CBZ      r1,|L4.350|
                  |L4.294|
;;;445                            return (__FALSE);
;;;446                        }
;;;447    
;;;448                        len = ((USB_BINARY_OBJECT_STORE_DESCRIPTOR *)pD)->wTotalLength;
000126  78c1              LDRB     r1,[r0,#3]
000128  7882              LDRB     r2,[r0,#2]
00012a  ea422001          ORR      r0,r2,r1,LSL #8
                  |L4.302|
00012e  9001              STR      r0,[sp,#4]
000130  e005              B        |L4.318|
                  |L4.306|
;;;449                        break;
;;;450    
;;;451                    default:
;;;452                        return (__FALSE);
;;;453                }
;;;454    
;;;455                break;
;;;456    
;;;457            case REQUEST_TO_INTERFACE:
;;;458                if (!USBD_ReqGetDescriptor_HID(&pD, &len)) {
000132  a901              ADD      r1,sp,#4
000134  4668              MOV      r0,sp
000136  f7fffffe          BL       USBD_ReqGetDescriptor_HID
00013a  2800              CMP      r0,#0
00013c  d00d              BEQ      |L4.346|
                  |L4.318|
;;;459                    return (__FALSE);
;;;460                }
;;;461    
;;;462                break;
;;;463    
;;;464            default:
;;;465                return (__FALSE);
;;;466        }
;;;467    
;;;468        if (USBD_EP0Data.Count > len) {
00013e  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
000140  9801              LDR      r0,[sp,#4]
000142  4281              CMP      r1,r0
000144  d908              BLS      |L4.344|
;;;469            USBD_EP0Data.Count = len;
;;;470    
;;;471            if (!(USBD_EP0Data.Count & (usbd_max_packet0 - 1))) {
000146  4911              LDR      r1,|L4.396|
000148  b280              UXTH     r0,r0                 ;469
00014a  80a0              STRH     r0,[r4,#4]            ;469
00014c  7809              LDRB     r1,[r1,#0]  ; usbd_max_packet0
00014e  1e49              SUBS     r1,r1,#1
000150  4208              TST      r0,r1
000152  d101              BNE      |L4.344|
;;;472                USBD_ZLP = 1;
000154  2001              MOVS     r0,#1
000156  7128              STRB     r0,[r5,#4]
                  |L4.344|
;;;473            }
;;;474        }
;;;475    
;;;476        return (__TRUE);
000158  2001              MOVS     r0,#1
                  |L4.346|
;;;477    }
00015a  e8bd81fc          POP      {r2-r8,pc}
                  |L4.350|
00015e  2000              MOVS     r0,#0                 ;465
000160  e7fb              B        |L4.346|
;;;478    
                          ENDP

000162  0000              DCW      0x0000
                  |L4.356|
                          DCD      ||.data||+0x1c
                  |L4.360|
                          DCD      usbd_hs_enable
                  |L4.364|
                          DCD      USBD_ConfigDescriptor
                  |L4.368|
                          DCD      USBD_ConfigDescriptor_HS
                  |L4.372|
                          DCD      USBD_DeviceDescriptor
                  |L4.376|
                          DCD      USBD_DeviceQualifier_HS
                  |L4.380|
                          DCD      USBD_DeviceQualifier
                  |L4.384|
                          DCD      USBD_StringDescriptor
                  |L4.388|
                          DCD      usbd_bos_enable
                  |L4.392|
                          DCD      USBD_BinaryObjectStoreDescriptor
                  |L4.396|
                          DCD      usbd_max_packet0

                          AREA ||i.USBD_ReqGetStatus||, CODE, READONLY, ALIGN=2

                  USBD_ReqGetStatus PROC
;;;199    
;;;200    static inline BOOL USBD_ReqGetStatus(void)
000000  b570              PUSH     {r4-r6,lr}
;;;201    {
;;;202        U32 n, m;
;;;203    
;;;204        switch (USBD_SetupPacket.bmRequestType.Recipient) {
000002  481d              LDR      r0,|L5.120|
;;;205            case REQUEST_TO_DEVICE:
;;;206                USBD_EP0Data.pData = (U8 *)&USBD_DeviceStatus;
000004  4c1c              LDR      r4,|L5.120|
000006  7800              LDRB     r0,[r0,#0]            ;204  ; USBD_SetupPacket
000008  f1a40408          SUB      r4,r4,#8
00000c  f010001f          ANDS     r0,r0,#0x1f           ;204
000010  d00a              BEQ      |L5.40|
000012  4a19              LDR      r2,|L5.120|
;;;207                break;
;;;208    
;;;209            case REQUEST_TO_INTERFACE:
;;;210                if ((USBD_Configuration != 0) && (USBD_SetupPacket.wIndexL < USBD_NumInterfaces)) {
000014  f1a40514          SUB      r5,r4,#0x14
;;;211                    *((__packed U16 *)USBD_EP0Buf) = 0;
000018  4b18              LDR      r3,|L5.124|
00001a  7869              LDRB     r1,[r5,#1]            ;210
00001c  7912              LDRB     r2,[r2,#4]            ;210
00001e  2801              CMP      r0,#1                 ;204
000020  d006              BEQ      |L5.48|
000022  2802              CMP      r0,#2                 ;204
000024  d126              BNE      |L5.116|
000026  e009              B        |L5.60|
                  |L5.40|
000028  4813              LDR      r0,|L5.120|
00002a  3816              SUBS     r0,r0,#0x16           ;206
00002c  6020              STR      r0,[r4,#0]            ;207  ; USBD_EP0Data
00002e  e01f              B        |L5.112|
                  |L5.48|
000030  b301              CBZ      r1,|L5.116|
000032  78a8              LDRB     r0,[r5,#2]            ;210  ; USBD_NumInterfaces
000034  4282              CMP      r2,r0                 ;210
000036  d21d              BCS      |L5.116|
000038  2000              MOVS     r0,#0
;;;212                    USBD_EP0Data.pData = USBD_EP0Buf;
00003a  e015              B        |L5.104|
                  |L5.60|
;;;213                } else {
;;;214                    return (__FALSE);
;;;215                }
;;;216    
;;;217                break;
;;;218    
;;;219            case REQUEST_TO_ENDPOINT:
;;;220                n = USBD_SetupPacket.wIndexL & 0x8F;
00003c  f002008f          AND      r0,r2,#0x8f
;;;221                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
000040  0602              LSLS     r2,r0,#24
000042  d505              BPL      |L5.80|
000044  f000060f          AND      r6,r0,#0xf
000048  f44f3280          MOV      r2,#0x10000
00004c  40b2              LSLS     r2,r2,r6
00004e  e001              B        |L5.84|
                  |L5.80|
000050  2201              MOVS     r2,#1
000052  4082              LSLS     r2,r2,r0
                  |L5.84|
;;;222    
;;;223                if (((USBD_Configuration != 0) || ((n & 0x0F) == 0)) && (USBD_EndPointMask & m)) {
000054  b909              CBNZ     r1,|L5.90|
000056  0700              LSLS     r0,r0,#28
000058  d10c              BNE      |L5.116|
                  |L5.90|
00005a  68a8              LDR      r0,[r5,#8]  ; USBD_EndPointMask
00005c  4210              TST      r0,r2
00005e  d009              BEQ      |L5.116|
;;;224                    *((__packed U16 *)USBD_EP0Buf) = (USBD_EndPointHalt & m) ? 1 : 0;
000060  68e8              LDR      r0,[r5,#0xc]  ; USBD_EndPointHalt
000062  4010              ANDS     r0,r0,r2
000064  d000              BEQ      |L5.104|
000066  2001              MOVS     r0,#1
                  |L5.104|
000068  7018              STRB     r0,[r3,#0]
00006a  0a00              LSRS     r0,r0,#8
00006c  7058              STRB     r0,[r3,#1]
;;;225                    USBD_EP0Data.pData = USBD_EP0Buf;
00006e  6023              STR      r3,[r4,#0]  ; USBD_EP0Data
                  |L5.112|
;;;226                } else {
;;;227                    return (__FALSE);
;;;228                }
;;;229    
;;;230                break;
;;;231    
;;;232            default:
;;;233                return (__FALSE);
;;;234        }
;;;235    
;;;236        return (__TRUE);
000070  2001              MOVS     r0,#1
;;;237    }
000072  bd70              POP      {r4-r6,pc}
                  |L5.116|
000074  2000              MOVS     r0,#0                 ;233
000076  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

                  |L5.120|
                          DCD      ||.data||+0x1c
                  |L5.124|
                          DCD      USBD_EP0Buf

                          AREA ||i.USBD_ReqSetClrFeature||, CODE, READONLY, ALIGN=2

                  USBD_ReqSetClrFeature PROC
;;;245    
;;;246    static inline BOOL USBD_ReqSetClrFeature(U32 sc)
000000  b570              PUSH     {r4-r6,lr}
;;;247    {
;;;248        U32 n, m;
;;;249    
;;;250        switch (USBD_SetupPacket.bmRequestType.Recipient) {
000002  4b26              LDR      r3,|L6.156|
000004  4602              MOV      r2,r0                 ;247
000006  4619              MOV      r1,r3
000008  7818              LDRB     r0,[r3,#0]  ; USBD_SetupPacket
;;;251            case REQUEST_TO_DEVICE:
;;;252                if (USBD_SetupPacket.wValue == USB_FEATURE_REMOTE_WAKEUP) {
00000a  8849              LDRH     r1,[r1,#2]
00000c  f010001f          ANDS     r0,r0,#0x1f           ;250
;;;253                    if (sc) {
;;;254                        USBD_WakeUpCfg(__TRUE);
;;;255                        USBD_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
000010  f1a3061c          SUB      r6,r3,#0x1c
000014  d004              BEQ      |L6.32|
000016  2801              CMP      r0,#1                 ;250
000018  d029              BEQ      |L6.110|
00001a  2802              CMP      r0,#2                 ;250
00001c  d127              BNE      |L6.110|
00001e  e011              B        |L6.68|
                  |L6.32|
000020  2901              CMP      r1,#1                 ;252
000022  d124              BNE      |L6.110|
000024  b132              CBZ      r2,|L6.52|
000026  2001              MOVS     r0,#1                 ;254
000028  f7fffffe          BL       USBD_WakeUpCfg
00002c  88f0              LDRH     r0,[r6,#6]  ; USBD_DeviceStatus
00002e  f0400002          ORR      r0,r0,#2
000032  e005              B        |L6.64|
                  |L6.52|
;;;256                    } else {
;;;257                        USBD_WakeUpCfg(__FALSE);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       USBD_WakeUpCfg
;;;258                        USBD_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
00003a  88f0              LDRH     r0,[r6,#6]  ; USBD_DeviceStatus
00003c  f0200002          BIC      r0,r0,#2
                  |L6.64|
000040  80f0              STRH     r0,[r6,#6]
000042  e029              B        |L6.152|
                  |L6.68|
;;;259                    }
;;;260                } else {
;;;261                    return (__FALSE);
;;;262                }
;;;263    
;;;264                break;
;;;265    
;;;266            case REQUEST_TO_INTERFACE:
;;;267                return (__FALSE);
;;;268    
;;;269            case REQUEST_TO_ENDPOINT:
;;;270                n = USBD_SetupPacket.wIndexL & 0x8F;
000044  7918              LDRB     r0,[r3,#4]  ; USBD_SetupPacket
000046  f000048f          AND      r4,r0,#0x8f
;;;271                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
00004a  0620              LSLS     r0,r4,#24
00004c  d505              BPL      |L6.90|
00004e  f004000f          AND      r0,r4,#0xf
000052  f44f3580          MOV      r5,#0x10000
000056  4085              LSLS     r5,r5,r0
000058  e001              B        |L6.94|
                  |L6.90|
00005a  2501              MOVS     r5,#1
00005c  40a5              LSLS     r5,r5,r4
                  |L6.94|
;;;272    
;;;273                if ((USBD_Configuration != 0) && ((n & 0x0F) != 0) && (USBD_EndPointMask & m)) {
00005e  7870              LDRB     r0,[r6,#1]  ; USBD_Configuration
000060  b128              CBZ      r0,|L6.110|
000062  0720              LSLS     r0,r4,#28
000064  d003              BEQ      |L6.110|
000066  68b0              LDR      r0,[r6,#8]  ; USBD_EndPointMask
000068  4228              TST      r0,r5
00006a  d000              BEQ      |L6.110|
;;;274                    if (USBD_SetupPacket.wValue == USB_FEATURE_ENDPOINT_STALL) {
00006c  b109              CBZ      r1,|L6.114|
                  |L6.110|
;;;275                        if (sc) {
;;;276                            USBD_SetStallEP(n);
;;;277                            USBD_EndPointHalt |=  m;
;;;278                        } else {
;;;279                            if ((USBD_EndPointStall & m) != 0) {
;;;280                                return (__TRUE);
;;;281                            }
;;;282    
;;;283                            USBD_ClrStallEP(n);
;;;284                            USBD_ReqClrFeature_MSC(n);
;;;285                            USBD_EndPointHalt &= ~m;
;;;286                        }
;;;287                    } else {
;;;288                        return (__FALSE);
;;;289                    }
;;;290                } else {
;;;291                    return (__FALSE);
;;;292                }
;;;293    
;;;294                break;
;;;295    
;;;296            default:
;;;297                return (__FALSE);
00006e  2000              MOVS     r0,#0
;;;298        }
;;;299    
;;;300        return (__TRUE);
;;;301    }
000070  bd70              POP      {r4-r6,pc}
                  |L6.114|
000072  b12a              CBZ      r2,|L6.128|
000074  4620              MOV      r0,r4                 ;276
000076  f7fffffe          BL       USBD_SetStallEP
00007a  68f0              LDR      r0,[r6,#0xc]          ;277  ; USBD_EndPointHalt
00007c  4328              ORRS     r0,r0,r5              ;277
00007e  e00a              B        |L6.150|
                  |L6.128|
000080  6930              LDR      r0,[r6,#0x10]         ;279  ; USBD_EndPointStall
000082  4228              TST      r0,r5                 ;279
000084  d108              BNE      |L6.152|
000086  4620              MOV      r0,r4                 ;283
000088  f7fffffe          BL       USBD_ClrStallEP
00008c  4620              MOV      r0,r4                 ;284
00008e  f7fffffe          BL       USBD_ReqClrFeature_MSC
000092  68f0              LDR      r0,[r6,#0xc]          ;285  ; USBD_EndPointHalt
000094  43a8              BICS     r0,r0,r5              ;285
                  |L6.150|
000096  60f0              STR      r0,[r6,#0xc]          ;277  ; USBD_EndPointHalt
                  |L6.152|
000098  2001              MOVS     r0,#1                 ;300
00009a  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP

                  |L6.156|
                          DCD      ||.data||+0x1c

                          AREA ||i.USBD_ReqSetConfiguration||, CODE, READONLY, ALIGN=2

                  USBD_ReqSetConfiguration PROC
;;;506    
;;;507    static inline BOOL USBD_ReqSetConfiguration(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;508    {
;;;509        USB_CONFIGURATION_DESCRIPTOR *pD;
;;;510        U32                           alt = 0;
;;;511        U32                           n, m;
;;;512    
;;;513        switch (USBD_SetupPacket.bmRequestType.Recipient) {
000004  485b              LDR      r0,|L7.372|
000006  2600              MOVS     r6,#0                 ;510
000008  7801              LDRB     r1,[r0,#0]  ; USBD_SetupPacket
00000a  f0110f1f          TST      r1,#0x1f
00000e  d170              BNE      |L7.242|
;;;514            case REQUEST_TO_DEVICE:
;;;515                if (USBD_SetupPacket.wValueL) {
;;;516                    if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
000010  4f58              LDR      r7,|L7.372|
000012  7880              LDRB     r0,[r0,#2]            ;515  ; USBD_SetupPacket
000014  3f1c              SUBS     r7,r7,#0x1c
000016  46b1              MOV      r9,r6                 ;515
000018  f04f0a01          MOV      r10,#1
;;;517                        return (__FALSE);  /* High speed request but high-speed not enabled */
;;;518                    }
;;;519    
;;;520                    if (USBD_HighSpeed == __FALSE) {
;;;521                        pD = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;522                    } else {
;;;523                        pD = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
;;;524                    }
;;;525    
;;;526                    while (pD->bLength) {
;;;527                        switch (pD->bDescriptorType) {
;;;528                            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;529                            case USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE:
;;;530                                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == USBD_SetupPacket.wValueL) {
;;;531                                    USBD_Configuration = USBD_SetupPacket.wValueL;
;;;532                                    USBD_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
;;;533    
;;;534                                    for (n = 0; n < usbd_if_num; n++) {
;;;535                                        USBD_AltSetting[n] = 0;
;;;536                                    }
;;;537    
;;;538                                    for (n = 1; n < 16; n++) {
;;;539                                        if (USBD_EndPointMask & (1 << n)) {
;;;540                                            USBD_DisableEP(n);
;;;541                                        }
;;;542    
;;;543                                        if (USBD_EndPointMask & ((1 << 16) << n)) {
00001c  f44f3b80          MOV      r11,#0x10000
000020  2800              CMP      r0,#0                 ;515
000022  d07c              BEQ      |L7.286|
000024  4854              LDR      r0,|L7.376|
000026  7801              LDRB     r1,[r0,#0]            ;516  ; usbd_hs_enable
000028  4638              MOV      r0,r7                 ;516
00002a  78c0              LDRB     r0,[r0,#3]            ;516
00002c  b909              CBNZ     r1,|L7.50|
00002e  2801              CMP      r0,#1                 ;516
000030  d05f              BEQ      |L7.242|
                  |L7.50|
000032  b108              CBZ      r0,|L7.56|
000034  4c51              LDR      r4,|L7.380|
000036  e06e              B        |L7.278|
                  |L7.56|
000038  4c51              LDR      r4,|L7.384|
00003a  e06c              B        |L7.278|
                  |L7.60|
00003c  7860              LDRB     r0,[r4,#1]            ;527
00003e  2802              CMP      r0,#2                 ;527
000040  d005              BEQ      |L7.78|
000042  2804              CMP      r0,#4                 ;527
000044  d048              BEQ      |L7.216|
000046  2805              CMP      r0,#5                 ;527
000048  d048              BEQ      |L7.220|
00004a  2807              CMP      r0,#7                 ;527
00004c  d161              BNE      |L7.274|
                  |L7.78|
00004e  4849              LDR      r0,|L7.372|
000050  7961              LDRB     r1,[r4,#5]            ;530
000052  7880              LDRB     r0,[r0,#2]            ;530  ; USBD_SetupPacket
000054  4281              CMP      r1,r0                 ;530
000056  d13a              BNE      |L7.206|
000058  7078              STRB     r0,[r7,#1]            ;531
00005a  7920              LDRB     r0,[r4,#4]            ;532
00005c  494a              LDR      r1,|L7.392|
00005e  70b8              STRB     r0,[r7,#2]            ;532
000060  2000              MOVS     r0,#0                 ;534
000062  4a48              LDR      r2,|L7.388|
000064  8809              LDRH     r1,[r1,#0]            ;534
000066  e002              B        |L7.110|
                  |L7.104|
000068  f8029000          STRB     r9,[r2,r0]            ;535
00006c  1c40              ADDS     r0,r0,#1              ;535
                  |L7.110|
00006e  4288              CMP      r0,r1                 ;534
000070  d3fa              BCC      |L7.104|
000072  2501              MOVS     r5,#1                 ;538
000074  46b8              MOV      r8,r7                 ;516
                  |L7.118|
000076  fa0af005          LSL      r0,r10,r5             ;539
00007a  f8d81008          LDR      r1,[r8,#8]            ;539  ; USBD_EndPointMask
00007e  4208              TST      r0,r1                 ;539
000080  d002              BEQ      |L7.136|
000082  4628              MOV      r0,r5                 ;540
000084  f7fffffe          BL       USBD_DisableEP
                  |L7.136|
000088  f8d81008          LDR      r1,[r8,#8]  ; USBD_EndPointMask
00008c  fa0bf005          LSL      r0,r11,r5
000090  4208              TST      r0,r1
000092  d003              BEQ      |L7.156|
;;;544                                            USBD_DisableEP(n | 0x80);
000094  f0450080          ORR      r0,r5,#0x80
000098  f7fffffe          BL       USBD_DisableEP
                  |L7.156|
00009c  1c6d              ADDS     r5,r5,#1
00009e  2d10              CMP      r5,#0x10              ;538
0000a0  d3e9              BCC      |L7.118|
;;;545                                        }
;;;546                                    }
;;;547    
;;;548                                    USBD_EndPointMask = 0x00010001;
0000a2  f04f1001          MOV      r0,#0x10001
;;;549                                    USBD_EndPointHalt = 0x00000000;
;;;550                                    USBD_EndPointStall = 0x00000000;
0000a6  e9c80902          STRD     r0,r9,[r8,#8]
;;;551                                    USBD_Configure(__TRUE);
0000aa  2001              MOVS     r0,#1
0000ac  f8c89010          STR      r9,[r8,#0x10]  ; USBD_EndPointStall
0000b0  f7fffffe          BL       USBD_Configure
;;;552    
;;;553                                    if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
0000b4  79e0              LDRB     r0,[r4,#7]
0000b6  0640              LSLS     r0,r0,#25
;;;554                                        USBD_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
;;;555                                    } else {
;;;556                                        USBD_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
0000b8  f8b80006          LDRH     r0,[r8,#6]  ; USBD_DeviceStatus
0000bc  d502              BPL      |L7.196|
0000be  f0400001          ORR      r0,r0,#1              ;554
0000c2  e001              B        |L7.200|
                  |L7.196|
0000c4  f0200001          BIC      r0,r0,#1
                  |L7.200|
0000c8  f8a80006          STRH     r0,[r8,#6]
0000cc  e021              B        |L7.274|
                  |L7.206|
;;;557                                    }
;;;558                                } else {
;;;559                                    pD = (USB_CONFIGURATION_DESCRIPTOR *)((U8 *)pD + ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength);
0000ce  78e0              LDRB     r0,[r4,#3]
0000d0  78a1              LDRB     r1,[r4,#2]
0000d2  ea412000          ORR      r0,r1,r0,LSL #8
;;;560                                    continue;
0000d6  e01d              B        |L7.276|
                  |L7.216|
;;;561                                }
;;;562    
;;;563                                break;
;;;564    
;;;565                            case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;566                                alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
0000d8  78e6              LDRB     r6,[r4,#3]
;;;567                                break;
0000da  e01a              B        |L7.274|
                  |L7.220|
;;;568    
;;;569                            case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;570                                if (alt == 0) {
0000dc  b9ce              CBNZ     r6,|L7.274|
;;;571                                    n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
0000de  78a0              LDRB     r0,[r4,#2]
0000e0  f000058f          AND      r5,r0,#0x8f
;;;572                                    m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
0000e4  0628              LSLS     r0,r5,#24
0000e6  d506              BPL      |L7.246|
0000e8  f005010f          AND      r1,r5,#0xf
0000ec  fa0bf001          LSL      r0,r11,r1
0000f0  e003              B        |L7.250|
                  |L7.242|
0000f2  e03a              B        |L7.362|
0000f4  e013              B        |L7.286|
                  |L7.246|
0000f6  fa0af005          LSL      r0,r10,r5
                  |L7.250|
;;;573                                    USBD_EndPointMask |= m;
0000fa  68b9              LDR      r1,[r7,#8]  ; USBD_EndPointMask
0000fc  4301              ORRS     r1,r1,r0
;;;574                                    USBD_ConfigEP((void *)pD);
0000fe  4620              MOV      r0,r4
000100  60b9              STR      r1,[r7,#8]  ; USBD_EndPointMask
000102  f7fffffe          BL       USBD_ConfigEP
;;;575                                    USBD_EnableEP(n);
000106  4628              MOV      r0,r5
000108  f7fffffe          BL       USBD_EnableEP
;;;576                                    USBD_ResetEP(n);
00010c  4628              MOV      r0,r5
00010e  f7fffffe          BL       USBD_ResetEP
                  |L7.274|
;;;577                                }
;;;578    
;;;579                                break;
;;;580                        }
;;;581    
;;;582                        pD = (USB_CONFIGURATION_DESCRIPTOR *)((U8 *)pD + pD->bLength);
000112  7820              LDRB     r0,[r4,#0]
                  |L7.276|
000114  4404              ADD      r4,r4,r0
                  |L7.278|
000116  7820              LDRB     r0,[r4,#0]            ;526
000118  2800              CMP      r0,#0                 ;526
00011a  d18f              BNE      |L7.60|
00011c  e020              B        |L7.352|
                  |L7.286|
;;;583                    }
;;;584                } else {
;;;585                    USBD_Configuration = 0;
00011e  464d              MOV      r5,r9
000120  f8879001          STRB     r9,[r7,#1]
;;;586    
;;;587                    for (n = 1; n < 16; n++) {
000124  2401              MOVS     r4,#1
000126  465e              MOV      r6,r11                ;543
                  |L7.296|
;;;588                        if (USBD_EndPointMask & (1 << n)) {
000128  68b9              LDR      r1,[r7,#8]  ; USBD_EndPointMask
00012a  fa0af004          LSL      r0,r10,r4
00012e  4208              TST      r0,r1
000130  d002              BEQ      |L7.312|
;;;589                            USBD_DisableEP(n);
000132  4620              MOV      r0,r4
000134  f7fffffe          BL       USBD_DisableEP
                  |L7.312|
;;;590                        }
;;;591    
;;;592                        if (USBD_EndPointMask & ((1 << 16) << n)) {
000138  68b9              LDR      r1,[r7,#8]  ; USBD_EndPointMask
00013a  fa06f004          LSL      r0,r6,r4
00013e  4208              TST      r0,r1
000140  d003              BEQ      |L7.330|
;;;593                            USBD_DisableEP(n | 0x80);
000142  f0440080          ORR      r0,r4,#0x80
000146  f7fffffe          BL       USBD_DisableEP
                  |L7.330|
00014a  1c64              ADDS     r4,r4,#1
00014c  2c10              CMP      r4,#0x10              ;587
00014e  d3eb              BCC      |L7.296|
;;;594                        }
;;;595                    }
;;;596    
;;;597                    USBD_EndPointMask  = 0x00010001;
000150  f04f1001          MOV      r0,#0x10001
000154  e9c70502          STRD     r0,r5,[r7,#8]
;;;598                    USBD_EndPointHalt  = 0x00000000;
;;;599                    USBD_EndPointStall = 0x00000000;
;;;600                    USBD_Configure(__FALSE);
000158  2000              MOVS     r0,#0
00015a  613d              STR      r5,[r7,#0x10]  ; USBD_EndPointStall
00015c  f7fffffe          BL       USBD_Configure
                  |L7.352|
;;;601                }
;;;602    
;;;603                if (USBD_Configuration != USBD_SetupPacket.wValueL) {
000160  4804              LDR      r0,|L7.372|
000162  7879              LDRB     r1,[r7,#1]  ; USBD_Configuration
000164  7880              LDRB     r0,[r0,#2]  ; USBD_SetupPacket
000166  4288              CMP      r0,r1
000168  d002              BEQ      |L7.368|
                  |L7.362|
;;;604                    return (__FALSE);
;;;605                }
;;;606    
;;;607                break;
;;;608    
;;;609            default:
;;;610                return (__FALSE);
00016a  2000              MOVS     r0,#0
                  |L7.364|
;;;611        }
;;;612    
;;;613        return (__TRUE);
;;;614    }
00016c  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.368|
000170  2001              MOVS     r0,#1                 ;613
000172  e7fb              B        |L7.364|
;;;615    
                          ENDP

                  |L7.372|
                          DCD      ||.data||+0x1c
                  |L7.376|
                          DCD      usbd_hs_enable
                  |L7.380|
                          DCD      USBD_ConfigDescriptor_HS
                  |L7.384|
                          DCD      USBD_ConfigDescriptor
                  |L7.388|
                          DCD      USBD_AltSetting
                  |L7.392|
                          DCD      usbd_if_num

                          AREA ||i.USBD_ReqSetInterface||, CODE, READONLY, ALIGN=2

                  USBD_ReqSetInterface PROC
;;;648    
;;;649    static inline BOOL USBD_ReqSetInterface(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;650    {
;;;651        USB_COMMON_DESCRIPTOR *pD;
;;;652        U32                    ifn = 0, alt = 0, old = 0, msk = 0;
;;;653        U32                    n, m;
;;;654        BOOL                   set;
;;;655    
;;;656        switch (USBD_SetupPacket.bmRequestType.Recipient) {
000004  4846              LDR      r0,|L8.288|
000006  2700              MOVS     r7,#0                 ;652
000008  463e              MOV      r6,r7                 ;652
00000a  7800              LDRB     r0,[r0,#0]  ; USBD_SetupPacket
00000c  46ba              MOV      r10,r7                ;652
00000e  f000001f          AND      r0,r0,#0x1f
000012  46b9              MOV      r9,r7                 ;652
000014  2801              CMP      r0,#1
000016  d17d              BNE      |L8.276|
;;;657            case REQUEST_TO_INTERFACE:
;;;658                if (USBD_Configuration == 0) {
000018  4941              LDR      r1,|L8.288|
00001a  391c              SUBS     r1,r1,#0x1c
00001c  7848              LDRB     r0,[r1,#1]  ; USBD_Configuration
00001e  2800              CMP      r0,#0
000020  d077              BEQ      |L8.274|
;;;659                    return (__FALSE);
;;;660                }
;;;661    
;;;662                set = __FALSE;
000022  2000              MOVS     r0,#0
;;;663    
;;;664                if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
000024  9000              STR      r0,[sp,#0]
000026  483f              LDR      r0,|L8.292|
000028  7802              LDRB     r2,[r0,#0]  ; usbd_hs_enable
00002a  4608              MOV      r0,r1                 ;658
00002c  78c0              LDRB     r0,[r0,#3]
00002e  b90a              CBNZ     r2,|L8.52|
000030  2801              CMP      r0,#1
000032  d072              BEQ      |L8.282|
                  |L8.52|
;;;665                    return (__FALSE);  /* High speed request but high-speed not enabled */
;;;666                }
;;;667    
;;;668                if (USBD_HighSpeed == __FALSE) {
000034  468b              MOV      r11,r1
000036  b108              CBZ      r0,|L8.60|
;;;669                    pD = (USB_COMMON_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;670                } else {
;;;671                    pD = (USB_COMMON_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
000038  4c3b              LDR      r4,|L8.296|
00003a  e066              B        |L8.266|
                  |L8.60|
00003c  4c3b              LDR      r4,|L8.300|
00003e  e064              B        |L8.266|
                  |L8.64|
;;;672                }
;;;673    
;;;674                while (pD->bLength) {
;;;675                    switch (pD->bDescriptorType) {
000040  7860              LDRB     r0,[r4,#1]
000042  2802              CMP      r0,#2
000044  d005              BEQ      |L8.82|
000046  2804              CMP      r0,#4
000048  d00d              BEQ      |L8.102|
00004a  2805              CMP      r0,#5
00004c  d01d              BEQ      |L8.138|
00004e  2807              CMP      r0,#7
000050  d159              BNE      |L8.262|
                  |L8.82|
;;;676                        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;677                        case USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE:
;;;678                            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USBD_Configuration) {
000052  7961              LDRB     r1,[r4,#5]
000054  f89b0001          LDRB     r0,[r11,#1]  ; USBD_Configuration
000058  4281              CMP      r1,r0
00005a  d054              BEQ      |L8.262|
;;;679                                pD = (USB_COMMON_DESCRIPTOR *)((U8 *)pD + ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength);
00005c  78e0              LDRB     r0,[r4,#3]
00005e  78a1              LDRB     r1,[r4,#2]
000060  ea412000          ORR      r0,r1,r0,LSL #8
;;;680                                continue;
000064  e050              B        |L8.264|
                  |L8.102|
;;;681                            }
;;;682    
;;;683                            break;
;;;684    
;;;685                        case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;686                            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
;;;687                            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
;;;688                            msk = 0;
;;;689    
;;;690                            if ((ifn == USBD_SetupPacket.wIndexL) && (alt == USBD_SetupPacket.wValueL)) {
000066  482e              LDR      r0,|L8.288|
000068  78a7              LDRB     r7,[r4,#2]            ;686
00006a  78e6              LDRB     r6,[r4,#3]            ;687
00006c  7901              LDRB     r1,[r0,#4]  ; USBD_SetupPacket
00006e  f04f0900          MOV      r9,#0                 ;688
000072  42b9              CMP      r1,r7
000074  d147              BNE      |L8.262|
000076  7880              LDRB     r0,[r0,#2]  ; USBD_SetupPacket
000078  42b0              CMP      r0,r6
00007a  d144              BNE      |L8.262|
;;;691                                set = __TRUE;
00007c  2001              MOVS     r0,#1
;;;692                                old = USBD_AltSetting[ifn];
00007e  9000              STR      r0,[sp,#0]
000080  482b              LDR      r0,|L8.304|
000082  f810a007          LDRB     r10,[r0,r7]
;;;693                                USBD_AltSetting[ifn] = (U8)alt;
000086  55c6              STRB     r6,[r0,r7]
000088  e03d              B        |L8.262|
                  |L8.138|
;;;694                            }
;;;695    
;;;696                            break;
;;;697    
;;;698                        case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;699                            if (ifn == USBD_SetupPacket.wIndexL) {
00008a  4925              LDR      r1,|L8.288|
00008c  7908              LDRB     r0,[r1,#4]  ; USBD_SetupPacket
00008e  42b8              CMP      r0,r7
000090  d139              BNE      |L8.262|
;;;700                                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
000092  78a0              LDRB     r0,[r4,#2]
000094  f000088f          AND      r8,r0,#0x8f
;;;701                                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
000098  ea5f6008          LSLS     r0,r8,#24
00009c  d505              BPL      |L8.170|
00009e  f008000f          AND      r0,r8,#0xf
0000a2  f44f3580          MOV      r5,#0x10000
0000a6  4085              LSLS     r5,r5,r0
0000a8  e002              B        |L8.176|
                  |L8.170|
0000aa  2501              MOVS     r5,#1
0000ac  fa05f508          LSL      r5,r5,r8
                  |L8.176|
;;;702    
;;;703                                if (alt == USBD_SetupPacket.wValueL) {
0000b0  7888              LDRB     r0,[r1,#2]  ; USBD_SetupPacket
0000b2  42b0              CMP      r0,r6
0000b4  d115              BNE      |L8.226|
;;;704                                    USBD_EndPointMask |=  m;
0000b6  f8db1008          LDR      r1,[r11,#8]  ; USBD_EndPointMask
;;;705                                    USBD_EndPointHalt &= ~m;
;;;706                                    USBD_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
0000ba  4620              MOV      r0,r4
0000bc  4329              ORRS     r1,r1,r5              ;704
0000be  f8cb1008          STR      r1,[r11,#8]           ;705  ; USBD_EndPointMask
0000c2  f8db100c          LDR      r1,[r11,#0xc]         ;705  ; USBD_EndPointHalt
0000c6  43a9              BICS     r1,r1,r5              ;705
0000c8  f8cb100c          STR      r1,[r11,#0xc]  ; USBD_EndPointHalt
0000cc  f7fffffe          BL       USBD_ConfigEP
;;;707                                    USBD_EnableEP(n);
0000d0  4640              MOV      r0,r8
0000d2  f7fffffe          BL       USBD_EnableEP
;;;708                                    USBD_ResetEP(n);
0000d6  4640              MOV      r0,r8
0000d8  f7fffffe          BL       USBD_ResetEP
;;;709                                    msk |= m;
0000dc  ea490905          ORR      r9,r9,r5
0000e0  e011              B        |L8.262|
                  |L8.226|
;;;710                                } else if ((alt == old) && ((msk & m) == 0)) {
0000e2  4556              CMP      r6,r10
0000e4  d10f              BNE      |L8.262|
0000e6  ea190f05          TST      r9,r5
0000ea  d10c              BNE      |L8.262|
;;;711                                    USBD_EndPointMask &= ~m;
0000ec  f8db1008          LDR      r1,[r11,#8]  ; USBD_EndPointMask
;;;712                                    USBD_EndPointHalt &= ~m;
;;;713                                    USBD_DisableEP(n);
0000f0  4640              MOV      r0,r8
0000f2  43a9              BICS     r1,r1,r5              ;711
0000f4  f8cb1008          STR      r1,[r11,#8]           ;712  ; USBD_EndPointMask
0000f8  f8db100c          LDR      r1,[r11,#0xc]         ;712  ; USBD_EndPointHalt
0000fc  43a9              BICS     r1,r1,r5              ;712
0000fe  f8cb100c          STR      r1,[r11,#0xc]  ; USBD_EndPointHalt
000102  f7fffffe          BL       USBD_DisableEP
                  |L8.262|
;;;714                                }
;;;715                            }
;;;716    
;;;717                            break;
;;;718                    }
;;;719    
;;;720                    pD = (USB_COMMON_DESCRIPTOR *)((U8 *)pD + pD->bLength);
000106  7820              LDRB     r0,[r4,#0]
                  |L8.264|
000108  4404              ADD      r4,r4,r0
                  |L8.266|
00010a  7820              LDRB     r0,[r4,#0]            ;674
00010c  2800              CMP      r0,#0                 ;674
00010e  d197              BNE      |L8.64|
;;;721                }
;;;722    
;;;723                break;
;;;724    
;;;725            default:
;;;726                return (__FALSE);
;;;727        }
;;;728    
;;;729        return (set);
000110  9800              LDR      r0,[sp,#0]
                  |L8.274|
;;;730    }
000112  e000              B        |L8.278|
                  |L8.276|
000114  e001              B        |L8.282|
                  |L8.278|
000116  e8bd8ff8          POP      {r3-r11,pc}
                  |L8.282|
00011a  2000              MOVS     r0,#0                 ;726
00011c  e7f9              B        |L8.274|
;;;731    
                          ENDP

00011e  0000              DCW      0x0000
                  |L8.288|
                          DCD      ||.data||+0x1c
                  |L8.292|
                          DCD      usbd_hs_enable
                  |L8.296|
                          DCD      USBD_ConfigDescriptor_HS
                  |L8.300|
                          DCD      USBD_ConfigDescriptor
                  |L8.304|
                          DCD      USBD_AltSetting

                          AREA ||i.USBD_SetupStage||, CODE, READONLY, ALIGN=2

                  USBD_SetupStage PROC
;;;122    
;;;123    void USBD_SetupStage(void)
000000  2208              MOVS     r2,#8
;;;124    {
;;;125        USBD_ReadEP(0x00, (U8 *)&USBD_SetupPacket, sizeof(USBD_SetupPacket));
000002  4902              LDR      r1,|L9.12|
000004  2000              MOVS     r0,#0
000006  f7ffbffe          B.W      USBD_ReadEP
;;;126    }
;;;127    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      ||.data||+0x1c

                          AREA ||i.USBD_StatusInStage||, CODE, READONLY, ALIGN=1

                  USBD_StatusInStage PROC
;;;175    
;;;176    void USBD_StatusInStage(void)
000000  2200              MOVS     r2,#0
;;;177    {
;;;178        USBD_WriteEP(0x80, NULL, 0);
000002  4611              MOV      r1,r2
000004  2080              MOVS     r0,#0x80
000006  f7ffbffe          B.W      USBD_WriteEP
;;;179    }
;;;180    
                          ENDP


                          AREA ||i.USBD_StatusOutStage||, CODE, READONLY, ALIGN=2

                  USBD_StatusOutStage PROC
;;;187    
;;;188    void USBD_StatusOutStage(void)
000000  4802              LDR      r0,|L11.12|
;;;189    {
;;;190        USBD_ReadEP(0x00, USBD_EP0Buf, usbd_max_packet0);
000002  4903              LDR      r1,|L11.16|
000004  7802              LDRB     r2,[r0,#0]  ; usbd_max_packet0
000006  2000              MOVS     r0,#0
000008  f7ffbffe          B.W      USBD_ReadEP
;;;191    }
;;;192    
                          ENDP

                  |L11.12|
                          DCD      usbd_max_packet0
                  |L11.16|
                          DCD      USBD_EP0Buf

                          AREA ||i.usbd_configured||, CODE, READONLY, ALIGN=2

                  usbd_configured PROC
;;;106    
;;;107    BOOL usbd_configured(void)
000000  4802              LDR      r0,|L12.12|
;;;108    {
;;;109        if (USBD_Configuration) {
000002  7840              LDRB     r0,[r0,#1]  ; USBD_Configuration
000004  2800              CMP      r0,#0                 ;108
000006  d000              BEQ      |L12.10|
;;;110            return (__TRUE);
000008  2001              MOVS     r0,#1
                  |L12.10|
;;;111        }
;;;112    
;;;113        return (__FALSE);
;;;114    }
00000a  4770              BX       lr
;;;115    
                          ENDP

                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.usbd_connect||, CODE, READONLY, ALIGN=1

                  usbd_connect PROC
;;;76     
;;;77     void usbd_connect(BOOL con)
000000  f7ffbffe          B.W      USBD_Connect
;;;78     {
;;;79         USBD_Connect(con);
;;;80     }
;;;81     
                          ENDP


                          AREA ||i.usbd_init||, CODE, READONLY, ALIGN=2

                  usbd_init PROC
;;;60     
;;;61     void usbd_init(void)
000000  4905              LDR      r1,|L14.24|
;;;62     {
000002  b510              PUSH     {r4,lr}
;;;63         USBD_HighSpeed = __FALSE;
000004  2000              MOVS     r0,#0
000006  70c8              STRB     r0,[r1,#3]
;;;64         usbd_class_init();
000008  f7fffffe          BL       usbd_class_init
;;;65         USBD_RTX_TaskInit();
00000c  f7fffffe          BL       USBD_RTX_TaskInit
;;;66         USBD_Init();
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      USBD_Init
;;;67     }
;;;68     
                          ENDP

                  |L14.24|
                          DCD      ||.data||

                          AREA ||i.usbd_reset_core||, CODE, READONLY, ALIGN=2

                  usbd_reset_core PROC
;;;88     
;;;89     void usbd_reset_core(void)
000000  4806              LDR      r0,|L15.28|
;;;90     {
;;;91         USBD_DeviceStatus  = usbd_power;
;;;92         USBD_DeviceAddress = 0;
;;;93         USBD_Configuration = 0;
;;;94         USBD_EndPointMask  = 0x00010001;
000002  f04f1201          MOV      r2,#0x10001
000006  7801              LDRB     r1,[r0,#0]            ;91  ; usbd_power
000008  4805              LDR      r0,|L15.32|
00000a  80c1              STRH     r1,[r0,#6]            ;91
00000c  2100              MOVS     r1,#0                 ;92
00000e  7001              STRB     r1,[r0,#0]            ;92
000010  7041              STRB     r1,[r0,#1]            ;93
000012  e9c02102          STRD     r2,r1,[r0,#8]
;;;95         USBD_EndPointHalt  = 0x00000000;
;;;96         USBD_EndPointStall = 0x00000000;
000016  6101              STR      r1,[r0,#0x10]  ; USBD_EndPointStall
;;;97     }
000018  4770              BX       lr
;;;98     
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      usbd_power
                  |L15.32|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  USBD_DeviceAddress
000000  00                DCB      0x00
                  USBD_Configuration
000001  00                DCB      0x00
                  USBD_NumInterfaces
000002  00                DCB      0x00
                  USBD_HighSpeed
000003  00                DCB      0x00
                  USBD_ZLP
000004  0000              DCB      0x00,0x00
                  USBD_DeviceStatus
000006  0000              DCB      0x00,0x00
                  USBD_EndPointMask
                          DCD      0x00000000
                  USBD_EndPointHalt
                          DCD      0x00000000
                  USBD_EndPointStall
                          DCD      0x00000000
                  USBD_EP0Data
                          %        8
                  USBD_SetupPacket
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\usb\\usbd_core.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT ||$$USBD$$version||
#line 47
||$$USBD$$version|| PROC
#line 48

 
 EXPORT __RL_USBD_VER
__RL_USBD_VER EQU 0x470
	ENDP

;*** End   embedded assembler ***
