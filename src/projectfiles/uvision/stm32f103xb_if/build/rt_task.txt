; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_task.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_task.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_task.crf ..\..\..\source\rtos\rt_Task.c]
                          THUMB

                          AREA ||i.rt_block||, CODE, READONLY, ALIGN=2

                  rt_block PROC
;;;122    
;;;123    void rt_block (U16 timeout, U8 block_state) {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  2800              CMP      r0,#0
000006  d012              BEQ      |L1.46|
;;;124      /* Block running task and choose next ready task.                         */
;;;125      /* "timeout" sets a time-out value or is 0xffff (=no time-out).           */
;;;126      /* "block_state" defines the appropriate task state */
;;;127      P_TCB next_TCB;
;;;128    
;;;129      if (timeout) {
;;;130        if (timeout < 0xffff) {
000008  f64f71ff          MOV      r1,#0xffff
;;;131          rt_put_dly (os_tsk.run, timeout);
00000c  4c08              LDR      r4,|L1.48|
00000e  4288              CMP      r0,r1                 ;130
000010  d204              BCS      |L1.28|
000012  6822              LDR      r2,[r4,#0]  ; os_tsk
000014  4601              MOV      r1,r0
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       rt_put_dly
                  |L1.28|
;;;132        }
;;;133        os_tsk.run->state = block_state;
00001c  6820              LDR      r0,[r4,#0]  ; os_tsk
00001e  7045              STRB     r5,[r0,#1]
;;;134        next_TCB = rt_get_first (&os_rdy);
000020  4804              LDR      r0,|L1.52|
000022  f7fffffe          BL       rt_get_first
;;;135        rt_switch_req (next_TCB);
000026  e8bd4070          POP      {r4-r6,lr}
00002a  f7ffbffe          B.W      rt_switch_req
                  |L1.46|
;;;136      }
;;;137    }
00002e  bd70              POP      {r4-r6,pc}
;;;138    
                          ENDP

                  |L1.48|
                          DCD      ||.data||
                  |L1.52|
                          DCD      os_rdy

                          AREA ||i.rt_dispatch||, CODE, READONLY, ALIGN=2

                  rt_dispatch PROC
;;;95     
;;;96     void rt_dispatch (P_TCB next_TCB) {
000000  b570              PUSH     {r4-r6,lr}
000002  0004              MOVS     r4,r0
000004  d00f              BEQ      |L2.38|
;;;97       /* Dispatch next task if any identified or dispatch highest ready task    */
;;;98       /* "next_TCB" identifies a task to run or has value NULL (=no next task)  */
;;;99       if (next_TCB == NULL) {
;;;100        /* Running task was blocked: continue with highest ready task */
;;;101        next_TCB = rt_get_first (&os_rdy);
;;;102        rt_switch_req (next_TCB);
;;;103      }
;;;104      else {
;;;105        /* Check which task continues */
;;;106        if (next_TCB->prio > os_tsk.run->prio) {
000006  4d0d              LDR      r5,|L2.60|
000008  78a1              LDRB     r1,[r4,#2]
;;;107          /* preempt running task */
;;;108          rt_put_rdy_first (os_tsk.run);
;;;109          os_tsk.run->state = READY;
00000a  2601              MOVS     r6,#1
00000c  6828              LDR      r0,[r5,#0]            ;106  ; os_tsk
00000e  7882              LDRB     r2,[r0,#2]            ;106
000010  4291              CMP      r1,r2                 ;106
000012  d90c              BLS      |L2.46|
000014  f7fffffe          BL       rt_put_rdy_first
000018  6828              LDR      r0,[r5,#0]  ; os_tsk
00001a  7046              STRB     r6,[r0,#1]
;;;110          rt_switch_req (next_TCB);
00001c  4620              MOV      r0,r4
                  |L2.30|
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      rt_switch_req
                  |L2.38|
000026  4806              LDR      r0,|L2.64|
000028  f7fffffe          BL       rt_get_first
00002c  e7f7              B        |L2.30|
                  |L2.46|
;;;111        }
;;;112        else {
;;;113          /* put next task into ready list, no task switch takes place */
;;;114          next_TCB->state = READY;
00002e  7066              STRB     r6,[r4,#1]
;;;115          rt_put_prio (&os_rdy, next_TCB);
000030  4621              MOV      r1,r4
000032  e8bd4070          POP      {r4-r6,lr}
000036  4802              LDR      r0,|L2.64|
000038  f7ffbffe          B.W      rt_put_prio
;;;116        }
;;;117      }
;;;118    }
;;;119    
                          ENDP

                  |L2.60|
                          DCD      ||.data||
                  |L2.64|
                          DCD      os_rdy

                          AREA ||i.rt_init_context||, CODE, READONLY, ALIGN=2

                  rt_init_context PROC
;;;59     
;;;60     static void rt_init_context (P_TCB p_TCB, U8 priority, FUNCP task_body) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;61       /* Initialize general part of the Task Control Block. */
;;;62       p_TCB->cb_type = TCB;
000004  2000              MOVS     r0,#0
000006  4615              MOV      r5,r2                 ;60
000008  7020              STRB     r0,[r4,#0]
;;;63       p_TCB->state   = READY;
00000a  2201              MOVS     r2,#1
00000c  7062              STRB     r2,[r4,#1]
;;;64       p_TCB->prio    = priority;
00000e  70a1              STRB     r1,[r4,#2]
;;;65       p_TCB->p_lnk   = NULL;
;;;66       p_TCB->p_rlnk  = NULL;
000010  6060              STR      r0,[r4,#4]
;;;67       p_TCB->p_dlnk  = NULL;
000012  60a0              STR      r0,[r4,#8]
;;;68       p_TCB->p_blnk  = NULL;
000014  60e0              STR      r0,[r4,#0xc]
;;;69       p_TCB->delta_time    = 0;
000016  6120              STR      r0,[r4,#0x10]
000018  82a0              STRH     r0,[r4,#0x14]
;;;70       p_TCB->interval_time = 0;
00001a  82e0              STRH     r0,[r4,#0x16]
;;;71       p_TCB->events  = 0;
00001c  8320              STRH     r0,[r4,#0x18]
;;;72       p_TCB->waits   = 0;
00001e  8360              STRH     r0,[r4,#0x1a]
;;;73       p_TCB->ret_val = OS_R_OK;
000020  f8840020          STRB     r0,[r4,#0x20]
;;;74       p_TCB->ret_upd = 0;
000024  f8840021          STRB     r0,[r4,#0x21]
;;;75     
;;;76       if (p_TCB->priv_stack == 0) {
000028  8c60              LDRH     r0,[r4,#0x22]
00002a  b918              CBNZ     r0,|L3.52|
;;;77         /* Allocate the memory space for the stack. */
;;;78         p_TCB->stack = rt_alloc_box (mp_stk);
00002c  4804              LDR      r0,|L3.64|
00002e  f7fffffe          BL       rt_alloc_box
000032  62a0              STR      r0,[r4,#0x28]
                  |L3.52|
;;;79       }
;;;80       rt_init_stack (p_TCB, task_body);
000034  4629              MOV      r1,r5
000036  4620              MOV      r0,r4
000038  e8bd4070          POP      {r4-r6,lr}
00003c  f7ffbffe          B.W      rt_init_stack
;;;81     }
;;;82     
                          ENDP

                  |L3.64|
                          DCD      mp_stk

                          AREA ||i.rt_switch_req||, CODE, READONLY, ALIGN=2

                  rt_switch_req PROC
;;;85     
;;;86     void rt_switch_req (P_TCB p_new) {
000000  4902              LDR      r1,|L4.12|
;;;87       /* Switch to next task (identified by "p_new"). */
;;;88       os_tsk.new   = p_new;
;;;89       p_new->state = RUNNING;
000002  6048              STR      r0,[r1,#4]  ; os_tsk
000004  2102              MOVS     r1,#2
000006  7041              STRB     r1,[r0,#1]
;;;90       DBG_TASK_SWITCH(p_new->task_id);
;;;91     }
000008  4770              BX       lr
;;;92     
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      ||.data||

                          AREA ||i.rt_sys_init||, CODE, READONLY, ALIGN=2

                  rt_sys_init PROC
;;;279    
;;;280    void rt_sys_init (FUNCP first_task, U32 prio_stksz, void *stk) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4616              MOV      r6,r2
;;;281      /* Initialize system and start up task declared with "first_task". */
;;;282      U32 i;
;;;283    
;;;284      DBG_INIT();
;;;285    
;;;286      /* Initialize dynamic memory and task TCB pointers to NULL. */
;;;287      for (i = 0; i < os_maxtaskrun; i++) {
000006  4a41              LDR      r2,|L5.268|
000008  4681              MOV      r9,r0                 ;280
00000a  4688              MOV      r8,r1                 ;280
00000c  2000              MOVS     r0,#0
00000e  4605              MOV      r5,r0
;;;288        os_active_TCB[i] = NULL;
000010  493d              LDR      r1,|L5.264|
000012  8812              LDRH     r2,[r2,#0]            ;287
000014  e002              B        |L5.28|
                  |L5.22|
000016  f8415020          STR      r5,[r1,r0,LSL #2]
00001a  1c40              ADDS     r0,r0,#1
                  |L5.28|
00001c  4290              CMP      r0,r2                 ;287
00001e  d3fa              BCC      |L5.22|
;;;289      }
;;;290      rt_init_box (&mp_tcb, mp_tcb_size, sizeof(struct OS_TCB));
000020  483b              LDR      r0,|L5.272|
000022  2230              MOVS     r2,#0x30
000024  8801              LDRH     r1,[r0,#0]  ; mp_tcb_size
000026  483b              LDR      r0,|L5.276|
000028  f7fffffe          BL       _init_box
;;;291      rt_init_box (&mp_stk, mp_stk_size, BOX_ALIGN_8 | (U16)(os_stackinfo));
00002c  483a              LDR      r0,|L5.280|
00002e  8800              LDRH     r0,[r0,#0]  ; os_stackinfo
000030  b280              UXTH     r0,r0
000032  f0404200          ORR      r2,r0,#0x80000000
000036  4839              LDR      r0,|L5.284|
000038  6801              LDR      r1,[r0,#0]  ; mp_stk_size
00003a  4839              LDR      r0,|L5.288|
00003c  f7fffffe          BL       _init_box
;;;292      rt_init_box ((U32 *)m_tmr, mp_tmr_size, sizeof(struct OS_TMR));
000040  4838              LDR      r0,|L5.292|
000042  2208              MOVS     r2,#8
000044  8801              LDRH     r1,[r0,#0]  ; mp_tmr_size
000046  4838              LDR      r0,|L5.296|
000048  6800              LDR      r0,[r0,#0]  ; m_tmr
00004a  f7fffffe          BL       _init_box
;;;293    
;;;294      /* Set up TCB of idle demon */
;;;295      os_idle_TCB.task_id    = 255;
00004e  4c37              LDR      r4,|L5.300|
000050  27ff              MOVS     r7,#0xff
;;;296      os_idle_TCB.priv_stack = 0;
;;;297      rt_init_context (&os_idle_TCB, 0, os_idle_demon);
000052  4a37              LDR      r2,|L5.304|
000054  70e7              STRB     r7,[r4,#3]            ;295
000056  8465              STRH     r5,[r4,#0x22]         ;296
000058  2100              MOVS     r1,#0
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       rt_init_context
;;;298    
;;;299      /* Set up ready list: initially empty */
;;;300      os_rdy.cb_type = HCB;
000060  4834              LDR      r0,|L5.308|
000062  2104              MOVS     r1,#4
000064  7001              STRB     r1,[r0,#0]
;;;301      os_rdy.p_lnk   = NULL;
;;;302      /* Set up delay list: initially empty */
;;;303      os_dly.cb_type = HCB;
000066  6045              STR      r5,[r0,#4]  ; os_rdy
000068  4833              LDR      r0,|L5.312|
00006a  7001              STRB     r1,[r0,#0]
;;;304      os_dly.p_dlnk  = NULL;
;;;305      os_dly.p_blnk  = NULL;
00006c  60c5              STR      r5,[r0,#0xc]  ; os_dly
;;;306      os_dly.delta_time = 0;
00006e  6105              STR      r5,[r0,#0x10]  ; os_dly
000070  8285              STRH     r5,[r0,#0x14]
;;;307    
;;;308      /* Fix SP and systemvariables to assume idle task is running  */
;;;309      /* Transform main program into idle task by assuming idle TCB */
;;;310      rt_set_PSP (os_idle_TCB.tsk_stack+32);
000072  6a60              LDR      r0,[r4,#0x24]  ; os_idle_TCB
000074  3020              ADDS     r0,r0,#0x20
000076  f7fffffe          BL       rt_set_PSP
;;;311      os_tsk.run = &os_idle_TCB;
00007a  4830              LDR      r0,|L5.316|
;;;312      os_tsk.run->state = RUNNING;
;;;313    
;;;314      /* Initialize ps queue */
;;;315      os_psq->first = 0;
;;;316      os_psq->last  = 0;
;;;317      os_psq->size  = os_fifo_size;
00007c  4931              LDR      r1,|L5.324|
00007e  6004              STR      r4,[r0,#0]            ;312  ; os_tsk
000080  2002              MOVS     r0,#2                 ;312
000082  7060              STRB     r0,[r4,#1]            ;312
000084  482e              LDR      r0,|L5.320|
000086  7005              STRB     r5,[r0,#0]            ;315
000088  7045              STRB     r5,[r0,#1]            ;316
00008a  7809              LDRB     r1,[r1,#0]  ; os_fifo_size
00008c  70c1              STRB     r1,[r0,#3]
;;;318    
;;;319      rt_init_robin ();
00008e  f7fffffe          BL       rt_init_robin
000092  482d              LDR      r0,|L5.328|
000094  6801              LDR      r1,[r0,#0]
000096  f441017f          ORR      r1,r1,#0xff0000
00009a  6001              STR      r1,[r0,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  0639              LSLS     r1,r7,#24
0000a0  ea012000          AND      r0,r1,r0,LSL #8
0000a4  4928              LDR      r1,|L5.328|
0000a6  43c0              MVNS     r0,r0
0000a8  3914              SUBS     r1,r1,#0x14
0000aa  fab0f080          CLZ      r0,r0
0000ae  6809              LDR      r1,[r1,#0]
0000b0  f1c00008          RSB      r0,r0,#8
0000b4  f3c12102          UBFX     r1,r1,#8,#3
0000b8  4281              CMP      r1,r0
0000ba  db00              BLT      |L5.190|
0000bc  1c48              ADDS     r0,r1,#1
                  |L5.190|
0000be  4922              LDR      r1,|L5.328|
0000c0  1f09              SUBS     r1,r1,#4
0000c2  680b              LDR      r3,[r1,#0]
0000c4  f06f7280          MVN      r2,#0x1000000
0000c8  4082              LSLS     r2,r2,r0
0000ca  f3630217          BFI      r2,r3,#0,#24
0000ce  600a              STR      r2,[r1,#0]
;;;320    
;;;321      /* Intitialize SVC and PendSV */
;;;322      rt_svc_init ();
;;;323    
;;;324      /* Intitialize system clock timer */
;;;325      os_tick_irqn = os_tick_init ();
0000d0  f7fffffe          BL       os_tick_init
0000d4  491d              LDR      r1,|L5.332|
;;;326      if (os_tick_irqn >= 0) {
0000d6  2800              CMP      r0,#0
0000d8  6008              STR      r0,[r1,#0]  ; os_tick_irqn
0000da  db0d              BLT      |L5.248|
;;;327        OS_X_INIT(os_tick_irqn);
0000dc  f10021e0          ADD      r1,r0,#0xe000e000
0000e0  f8817400          STRB     r7,[r1,#0x400]
0000e4  f000021f          AND      r2,r0,#0x1f
0000e8  2101              MOVS     r1,#1
0000ea  4091              LSLS     r1,r1,r2
0000ec  1140              ASRS     r0,r0,#5
0000ee  0080              LSLS     r0,r0,#2
0000f0  f10020e0          ADD      r0,r0,#0xe000e000
0000f4  f8c01100          STR      r1,[r0,#0x100]
                  |L5.248|
;;;328      }
;;;329    
;;;330      /* Start up first user task before entering the endless loop */
;;;331      rt_tsk_create (first_task, prio_stksz, stk, NULL);
0000f8  4632              MOV      r2,r6
0000fa  4641              MOV      r1,r8
0000fc  4648              MOV      r0,r9
0000fe  e8bd47f0          POP      {r4-r10,lr}
000102  2300              MOVS     r3,#0
000104  f7ffbffe          B.W      rt_tsk_create
;;;332    }
;;;333    
                          ENDP

                  |L5.264|
                          DCD      os_active_TCB
                  |L5.268|
                          DCD      os_maxtaskrun
                  |L5.272|
                          DCD      mp_tcb_size
                  |L5.276|
                          DCD      mp_tcb
                  |L5.280|
                          DCD      os_stackinfo
                  |L5.284|
                          DCD      mp_stk_size
                  |L5.288|
                          DCD      mp_stk
                  |L5.292|
                          DCD      mp_tmr_size
                  |L5.296|
                          DCD      m_tmr
                  |L5.300|
                          DCD      ||.bss||
                  |L5.304|
                          DCD      os_idle_demon
                  |L5.308|
                          DCD      os_rdy
                  |L5.312|
                          DCD      os_dly
                  |L5.316|
                          DCD      ||.data||
                  |L5.320|
                          DCD      os_fifo
                  |L5.324|
                          DCD      os_fifo_size
                  |L5.328|
                          DCD      0xe000ed20
                  |L5.332|
                          DCD      os_tick_irqn

                          AREA ||i.rt_tsk_create||, CODE, READONLY, ALIGN=2

                  rt_tsk_create PROC
;;;206    
;;;207    OS_TID rt_tsk_create (FUNCP task, U32 prio_stksz, void *stk, void *argv) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  461e              MOV      r6,r3
000006  4617              MOV      r7,r2
000008  4680              MOV      r8,r0
00000a  460c              MOV      r4,r1
;;;208      /* Start a new task declared with "task". */
;;;209      P_TCB task_context;
;;;210      U32 i;
;;;211    
;;;212      /* Priority 0 is reserved for idle task! */
;;;213      if ((prio_stksz & 0xFF) == 0) {
00000c  f0110fff          TST      r1,#0xff
000010  d100              BNE      |L6.20|
;;;214        prio_stksz += 1;
000012  1c4c              ADDS     r4,r1,#1
                  |L6.20|
;;;215      }
;;;216      task_context = rt_alloc_box (mp_tcb);
000014  4815              LDR      r0,|L6.108|
000016  f7fffffe          BL       rt_alloc_box
00001a  1e05              SUBS     r5,r0,#0
;;;217      if (task_context == NULL) {
00001c  d023              BEQ      |L6.102|
;;;218        return (0);
;;;219      }
;;;220      /* If "size != 0" use a private user provided stack. */
;;;221      task_context->stack      = stk;
;;;222      task_context->priv_stack = prio_stksz >> 8;
00001e  0a20              LSRS     r0,r4,#8
000020  62af              STR      r7,[r5,#0x28]
000022  8468              STRH     r0,[r5,#0x22]
;;;223      /* Pass parameter 'argv' to 'rt_init_context' */
;;;224      task_context->msg = argv;
;;;225      /* For 'size == 0' system allocates the user stack from the memory pool. */
;;;226      rt_init_context (task_context, prio_stksz & 0xFF, task);
000024  b2e1              UXTB     r1,r4
000026  4642              MOV      r2,r8
000028  4628              MOV      r0,r5
00002a  61ee              STR      r6,[r5,#0x1c]
00002c  f7fffffe          BL       rt_init_context
000030  4910              LDR      r1,|L6.116|
000032  2401              MOVS     r4,#1
000034  480e              LDR      r0,|L6.112|
000036  8809              LDRH     r1,[r1,#0]
;;;227    
;;;228      /* Find a free entry in 'os_active_TCB' table. */
;;;229      i = rt_get_TID ();
000038  e005              B        |L6.70|
                  |L6.58|
00003a  eb000284          ADD      r2,r0,r4,LSL #2
00003e  f8522c04          LDR      r2,[r2,#-4]
000042  b11a              CBZ      r2,|L6.76|
000044  1c64              ADDS     r4,r4,#1
                  |L6.70|
000046  428c              CMP      r4,r1
000048  d9f7              BLS      |L6.58|
00004a  2400              MOVS     r4,#0
                  |L6.76|
;;;230      os_active_TCB[i-1] = task_context;
00004c  eb000084          ADD      r0,r0,r4,LSL #2
000050  f8405c04          STR      r5,[r0,#-4]
;;;231      task_context->task_id = i;
000054  70ec              STRB     r4,[r5,#3]
;;;232      DBG_TASK_NOTIFY(task_context, __TRUE);
;;;233      rt_dispatch (task_context);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       rt_dispatch
;;;234      os_tsk.run->ret_val = i;
00005c  4806              LDR      r0,|L6.120|
00005e  6800              LDR      r0,[r0,#0]  ; os_tsk
000060  f8804020          STRB     r4,[r0,#0x20]
;;;235      return ((OS_TID)i);
000064  4620              MOV      r0,r4
                  |L6.102|
;;;236    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;237    
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      mp_tcb
                  |L6.112|
                          DCD      os_active_TCB
                  |L6.116|
                          DCD      os_maxtaskrun
                  |L6.120|
                          DCD      ||.data||

                          AREA ||i.rt_tsk_delete||, CODE, READONLY, ALIGN=2

                  rt_tsk_delete PROC
;;;240    
;;;241    OS_RESULT rt_tsk_delete (OS_TID task_id) {
000000  b570              PUSH     {r4-r6,lr}
;;;242      /* Terminate the task identified with "task_id". */
;;;243      P_TCB task_context;
;;;244    
;;;245      if (task_id == 0 || task_id == os_tsk.run->task_id) {
000002  4c20              LDR      r4,|L7.132|
;;;246        /* Terminate itself. */
;;;247        os_tsk.run->state     = INACTIVE;
;;;248        os_tsk.run->tsk_stack = rt_get_PSP ();
;;;249        rt_stk_check ();
;;;250        os_active_TCB[os_tsk.run->task_id-1] = NULL;
000004  4e20              LDR      r6,|L7.136|
000006  2500              MOVS     r5,#0                 ;241
000008  6821              LDR      r1,[r4,#0]            ;241
00000a  b110              CBZ      r0,|L7.18|
00000c  78ca              LDRB     r2,[r1,#3]            ;245
00000e  4282              CMP      r2,r0                 ;245
000010  d11a              BNE      |L7.72|
                  |L7.18|
000012  704d              STRB     r5,[r1,#1]            ;247
000014  f7fffffe          BL       rt_get_PSP
000018  6821              LDR      r1,[r4,#0]            ;248  ; os_tsk
00001a  6248              STR      r0,[r1,#0x24]         ;249
00001c  f7fffffe          BL       rt_stk_check
000020  6820              LDR      r0,[r4,#0]  ; os_tsk
000022  78c1              LDRB     r1,[r0,#3]
000024  eb060181          ADD      r1,r6,r1,LSL #2
000028  f8415c04          STR      r5,[r1,#-4]
;;;251        rt_free_box (mp_stk, os_tsk.run->stack);
00002c  6a81              LDR      r1,[r0,#0x28]
00002e  4817              LDR      r0,|L7.140|
000030  f7fffffe          BL       rt_free_box
;;;252        os_tsk.run->stack = NULL;
000034  6821              LDR      r1,[r4,#0]  ; os_tsk
;;;253        DBG_TASK_NOTIFY(os_tsk.run, __FALSE);
;;;254        rt_free_box (mp_tcb, os_tsk.run);
000036  4816              LDR      r0,|L7.144|
000038  628d              STR      r5,[r1,#0x28]
00003a  f7fffffe          BL       rt_free_box
;;;255        os_tsk.run = NULL;
;;;256        rt_dispatch (NULL);
00003e  2000              MOVS     r0,#0
000040  6025              STR      r5,[r4,#0]  ; os_tsk
000042  f7fffffe          BL       rt_dispatch
000046  e019              B        |L7.124|
                  |L7.72|
;;;257        /* The program should never come to this point. */
;;;258      }
;;;259      else {
;;;260        /* Find the task in the "os_active_TCB" array. */
;;;261        if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
000048  4912              LDR      r1,|L7.148|
00004a  8809              LDRH     r1,[r1,#0]  ; os_maxtaskrun
00004c  4288              CMP      r0,r1
00004e  d817              BHI      |L7.128|
000050  eb060680          ADD      r6,r6,r0,LSL #2
000054  f8564c04          LDR      r4,[r6,#-4]
000058  b194              CBZ      r4,|L7.128|
;;;262          /* Task with "task_id" not found or not started. */
;;;263          return (OS_R_NOK);
;;;264        }
;;;265        task_context = os_active_TCB[task_id-1];
;;;266        rt_rmv_list (task_context);
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       rt_rmv_list
;;;267        rt_rmv_dly (task_context);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       rt_rmv_dly
;;;268        os_active_TCB[task_id-1] = NULL;
000066  f8465c04          STR      r5,[r6,#-4]
;;;269        rt_free_box (mp_stk, task_context->stack);
00006a  4808              LDR      r0,|L7.140|
00006c  6aa1              LDR      r1,[r4,#0x28]
00006e  f7fffffe          BL       rt_free_box
;;;270        task_context->stack = NULL;
;;;271        DBG_TASK_NOTIFY(task_context, __FALSE);
;;;272        rt_free_box (mp_tcb, task_context);
000072  4621              MOV      r1,r4
000074  4806              LDR      r0,|L7.144|
000076  62a5              STR      r5,[r4,#0x28]
000078  f7fffffe          BL       rt_free_box
                  |L7.124|
;;;273      }
;;;274      return (OS_R_OK);
00007c  2000              MOVS     r0,#0
;;;275    }
00007e  bd70              POP      {r4-r6,pc}
                  |L7.128|
000080  20ff              MOVS     r0,#0xff              ;263
000082  bd70              POP      {r4-r6,pc}
;;;276    
                          ENDP

                  |L7.132|
                          DCD      ||.data||
                  |L7.136|
                          DCD      os_active_TCB
                  |L7.140|
                          DCD      mp_stk
                  |L7.144|
                          DCD      mp_tcb
                  |L7.148|
                          DCD      os_maxtaskrun

                          AREA ||i.rt_tsk_pass||, CODE, READONLY, ALIGN=2

                  rt_tsk_pass PROC
;;;141    
;;;142    void rt_tsk_pass (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;143      /* Allow tasks of same priority level to run cooperatively.*/
;;;144      P_TCB p_new;
;;;145    
;;;146      p_new = rt_get_same_rdy_prio();
000002  f7fffffe          BL       rt_get_same_rdy_prio
000006  0004              MOVS     r4,r0
;;;147      if (p_new != NULL) {
000008  d00c              BEQ      |L8.36|
;;;148        rt_put_prio ((P_XCB)&os_rdy, os_tsk.run);
00000a  4d07              LDR      r5,|L8.40|
00000c  4807              LDR      r0,|L8.44|
00000e  6829              LDR      r1,[r5,#0]  ; os_tsk
000010  f7fffffe          BL       rt_put_prio
;;;149        os_tsk.run->state = READY;
000014  6829              LDR      r1,[r5,#0]  ; os_tsk
000016  2001              MOVS     r0,#1
000018  7048              STRB     r0,[r1,#1]
;;;150        rt_switch_req (p_new);
00001a  4620              MOV      r0,r4
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      rt_switch_req
                  |L8.36|
;;;151      }
;;;152    }
000024  bd70              POP      {r4-r6,pc}
;;;153    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      ||.data||
                  |L8.44|
                          DCD      os_rdy

                          AREA ||i.rt_tsk_prio||, CODE, READONLY, ALIGN=2

                  rt_tsk_prio PROC
;;;167    
;;;168    OS_RESULT rt_tsk_prio (OS_TID task_id, U8 new_prio) {
000000  b570              PUSH     {r4-r6,lr}
;;;169      /* Change execution priority of a task to "new_prio". */
;;;170      P_TCB p_task;
;;;171    
;;;172      if (task_id == 0) {
;;;173        /* Change execution priority of calling task. */
;;;174        os_tsk.run->prio = new_prio;
000002  4d1b              LDR      r5,|L9.112|
000004  2600              MOVS     r6,#0                 ;168
000006  b170              CBZ      r0,|L9.38|
;;;175    run:if (rt_rdy_prio() > new_prio) {
;;;176          rt_put_prio (&os_rdy, os_tsk.run);
;;;177          os_tsk.run->state   = READY;
;;;178          os_tsk.run->ret_val = OS_R_OK;
;;;179          rt_dispatch (NULL);
;;;180        }
;;;181        return (OS_R_OK);
;;;182      }
;;;183    
;;;184      /* Find the task in the "os_active_TCB" array. */
;;;185      if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
000008  4a1a              LDR      r2,|L9.116|
00000a  8812              LDRH     r2,[r2,#0]  ; os_maxtaskrun
00000c  4290              CMP      r0,r2
00000e  d81d              BHI      |L9.76|
000010  4a19              LDR      r2,|L9.120|
000012  eb020080          ADD      r0,r2,r0,LSL #2
000016  f8504c04          LDR      r4,[r0,#-4]
00001a  b1bc              CBZ      r4,|L9.76|
;;;186        /* Task with "task_id" not found or not started. */
;;;187        return (OS_R_NOK);
;;;188      }
;;;189      p_task = os_active_TCB[task_id-1];
;;;190      p_task->prio = new_prio;
00001c  70a1              STRB     r1,[r4,#2]
;;;191      if (p_task == os_tsk.run) {
00001e  6828              LDR      r0,[r5,#0]  ; os_tsk
000020  42a0              CMP      r0,r4
000022  d002              BEQ      |L9.42|
000024  e014              B        |L9.80|
                  |L9.38|
000026  6828              LDR      r0,[r5,#0]            ;174  ; os_tsk
000028  7081              STRB     r1,[r0,#2]            ;174
                  |L9.42|
00002a  4814              LDR      r0,|L9.124|
00002c  6840              LDR      r0,[r0,#4]            ;175  ; os_rdy
00002e  7880              LDRB     r0,[r0,#2]            ;175
000030  4288              CMP      r0,r1                 ;175
000032  d91b              BLS      |L9.108|
000034  4811              LDR      r0,|L9.124|
000036  6829              LDR      r1,[r5,#0]            ;176  ; os_tsk
000038  f7fffffe          BL       rt_put_prio
00003c  6829              LDR      r1,[r5,#0]            ;177  ; os_tsk
00003e  2001              MOVS     r0,#1                 ;177
000040  7048              STRB     r0,[r1,#1]            ;177
000042  6828              LDR      r0,[r5,#0]            ;178  ; os_tsk
000044  f8806020          STRB     r6,[r0,#0x20]         ;178
000048  2000              MOVS     r0,#0                 ;179
00004a  e00d              B        |L9.104|
                  |L9.76|
00004c  20ff              MOVS     r0,#0xff              ;187
;;;192        goto run;
;;;193      }
;;;194      rt_resort_prio (p_task);
;;;195      if (p_task->state == READY) {
;;;196        /* Task enqueued in a ready list. */
;;;197        p_task = rt_get_first (&os_rdy);
;;;198        os_tsk.run->ret_val = OS_R_OK;
;;;199        rt_dispatch (p_task);
;;;200      }
;;;201      return (OS_R_OK);
;;;202    }
00004e  bd70              POP      {r4-r6,pc}
                  |L9.80|
000050  4620              MOV      r0,r4                 ;194
000052  f7fffffe          BL       rt_resort_prio
000056  7860              LDRB     r0,[r4,#1]            ;195
000058  2801              CMP      r0,#1                 ;195
00005a  d107              BNE      |L9.108|
00005c  4807              LDR      r0,|L9.124|
00005e  f7fffffe          BL       rt_get_first
000062  6829              LDR      r1,[r5,#0]            ;198  ; os_tsk
000064  f8816020          STRB     r6,[r1,#0x20]         ;198
                  |L9.104|
000068  f7fffffe          BL       rt_dispatch
                  |L9.108|
00006c  2000              MOVS     r0,#0                 ;201
00006e  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  |L9.112|
                          DCD      ||.data||
                  |L9.116|
                          DCD      os_maxtaskrun
                  |L9.120|
                          DCD      os_active_TCB
                  |L9.124|
                          DCD      os_rdy

                          AREA ||i.rt_tsk_self||, CODE, READONLY, ALIGN=2

                  rt_tsk_self PROC
;;;156    
;;;157    OS_TID rt_tsk_self (void) {
000000  4802              LDR      r0,|L10.12|
;;;158      /* Return own task identifier value. */
;;;159      if (os_tsk.run == NULL) {
000002  6800              LDR      r0,[r0,#0]  ; os_tsk
000004  2800              CMP      r0,#0                 ;157
000006  d000              BEQ      |L10.10|
;;;160        return (0);
;;;161      }
;;;162      return (os_tsk.run->task_id);
000008  78c0              LDRB     r0,[r0,#3]
                  |L10.10|
;;;163    }
00000a  4770              BX       lr
;;;164    
                          ENDP

                  |L10.12|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  os_idle_TCB
                          %        48

                          AREA ||.data||, DATA, ALIGN=2

                  os_tsk
                          %        8
