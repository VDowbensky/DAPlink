; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\usb_config.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usb_config.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\usb_config.crf ..\..\..\source\hic_hal\stm32\stm32f103xb\usb_config.c]
                          THUMB

                          AREA ||i.USBD_Configure_Event||, CODE, READONLY, ALIGN=1

                  USBD_Configure_Event PROC
;;;161    #ifndef __RTX
;;;162    void USBD_Configure_Event(void)
000000  f7ffbffe          B.W      USBD_HID_Configure_Event
;;;163    {
;;;164        USBD_HID_Configure_Event();
;;;165    }
;;;166    #endif
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToEP PROC
;;;640    }
;;;641    BOOL USBD_EndPoint0_Out_ADC_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;642    {
;;;643        return (__FALSE);
;;;644    }
000002  4770              BX       lr
;;;645    #endif  /* (USBD_ADC_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToIF PROC
;;;636    }
;;;637    BOOL USBD_EndPoint0_Out_ADC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;638    {
;;;639        return (__FALSE);
;;;640    }
000002  4770              BX       lr
;;;641    BOOL USBD_EndPoint0_Out_ADC_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToDEV PROC
;;;1039   }
;;;1040   BOOL USBD_EndPoint0_Out_CLS_ReqToDEV(void)
000000  2000              MOVS     r0,#0
;;;1041   {
;;;1042       return (__FALSE);
;;;1043   }
000002  4770              BX       lr
;;;1044   BOOL USBD_EndPoint0_Out_CLS_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToEP PROC
;;;1047   }
;;;1048   BOOL USBD_EndPoint0_Out_CLS_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;1049   {
;;;1050       return (__FALSE);
;;;1051   }
000002  4770              BX       lr
;;;1052   #endif  /* (USBD_CLS_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToIF PROC
;;;1043   }
;;;1044   BOOL USBD_EndPoint0_Out_CLS_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;1045   {
;;;1046       return (__FALSE);
;;;1047   }
000002  4770              BX       lr
;;;1048   BOOL USBD_EndPoint0_Out_CLS_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToEP PROC
;;;632    }
;;;633    BOOL USBD_EndPoint0_Setup_ADC_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;634    {
;;;635        return (__FALSE);
;;;636    }
000002  4770              BX       lr
;;;637    BOOL USBD_EndPoint0_Out_ADC_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToIF PROC
;;;628    #if    (USBD_ADC_ENABLE == 0)
;;;629    BOOL USBD_EndPoint0_Setup_ADC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;630    {
;;;631        return (__FALSE);
;;;632    }
000002  4770              BX       lr
;;;633    BOOL USBD_EndPoint0_Setup_ADC_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToDEV PROC
;;;1027   #else
;;;1028   BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV(void)
000000  2000              MOVS     r0,#0
;;;1029   {
;;;1030       return (__FALSE);
;;;1031   }
000002  4770              BX       lr
;;;1032   BOOL USBD_EndPoint0_Setup_CLS_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToEP PROC
;;;1035   }
;;;1036   BOOL USBD_EndPoint0_Setup_CLS_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;1037   {
;;;1038       return (__FALSE);
;;;1039   }
000002  4770              BX       lr
;;;1040   BOOL USBD_EndPoint0_Out_CLS_ReqToDEV(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToIF PROC
;;;1031   }
;;;1032   BOOL USBD_EndPoint0_Setup_CLS_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;1033   {
;;;1034       return (__FALSE);
;;;1035   }
000002  4770              BX       lr
;;;1036   BOOL USBD_EndPoint0_Setup_CLS_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_RTX_TaskInit||, CODE, READONLY, ALIGN=1

                  USBD_RTX_TaskInit PROC
;;;1528   
;;;1529   void USBD_RTX_TaskInit(void)
000000  4770              BX       lr
;;;1530   {
;;;1531   #ifdef __RTX
;;;1532       /* Initialize memory pools for endpoints */
;;;1533       U32 i;
;;;1534       USBD_RTX_DevTask = 0;
;;;1535   
;;;1536       if (USBD_RTX_P_Device) {
;;;1537           USBD_RTX_DevTask = os_tsk_create_user(USBD_RTX_Device, 3, usbd_device_stack,
;;;1538                                                 sizeof(usbd_device_stack));
;;;1539       }
;;;1540   
;;;1541       for (i = 0; i <= 15; i++) {
;;;1542           USBD_RTX_EPTask[i] = 0;
;;;1543   
;;;1544           if (USBD_RTX_P_EP[i]) {
;;;1545               // Set the control endpoint (endpoint 0) thread to a high priority.
;;;1546               // According to the USB 2.0 specification, the time to complete standard
;;;1547               // request with no data must be under 50ms.  If a long caluclation
;;;1548               // such as a CRC is running on a higher priority thread, USB enumeration
;;;1549               // can fail because of this timeout.
;;;1550               uint8_t priority = 0 == i ? 200 : 20;
;;;1551               USBD_RTX_EPTask[i] = os_tsk_create_user(USBD_RTX_P_EP[i], priority, user_stack_list[i].stack,
;;;1552                                                       user_stack_list[i].size);
;;;1553           }
;;;1554       }
;;;1555   
;;;1556       USBD_RTX_CoreTask = 0;
;;;1557   
;;;1558       if (USBD_RTX_P_Core) {
;;;1559           USBD_RTX_CoreTask = os_tsk_create_user(USBD_RTX_Core, 2, usbd_core_stack,
;;;1560                                                  sizeof(usbd_core_stack));
;;;1561       }
;;;1562   
;;;1563   #endif
;;;1564   }
;;;1565   
                          ENDP


                          AREA ||i.USBD_Reset_Event||, CODE, READONLY, ALIGN=1

                  USBD_Reset_Event PROC
;;;1055   #ifndef __RTX
;;;1056   void USBD_Reset_Event(void)
000000  b510              PUSH     {r4,lr}
;;;1057   {
;;;1058   #if    (USBD_CDC_ACM_ENABLE)
;;;1059       USBD_CDC_ACM_Reset_Event();
000002  f7fffffe          BL       USBD_CDC_ACM_Reset_Event
;;;1060   #endif
;;;1061   #if    (USBD_MSC_ENABLE)
;;;1062       USBD_MSC_Reset_Event();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      USBD_MSC_Reset_Event
;;;1063   #endif    
;;;1064   }
;;;1065   #endif
                          ENDP


                          AREA ||i.USBD_SOF_Event||, CODE, READONLY, ALIGN=1

                  USBD_SOF_Event PROC
;;;1069   #ifndef __RTX
;;;1070   void USBD_SOF_Event(void)
000000  b510              PUSH     {r4,lr}
;;;1071   {
;;;1072   #if    (USBD_HID_ENABLE)
;;;1073       USBD_HID_SOF_Event();
000002  f7fffffe          BL       USBD_HID_SOF_Event
;;;1074   #endif
;;;1075   #if    (USBD_ADC_ENABLE)
;;;1076       USBD_ADC_SOF_Event();
;;;1077   #endif
;;;1078   #if    (USBD_CDC_ACM_ENABLE)
;;;1079       USBD_CDC_ACM_SOF_Event();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      USBD_CDC_ACM_SOF_Event
;;;1080   #endif
;;;1081   #if    (USBD_CLS_ENABLE)
;;;1082       USBD_CLS_SOF_Event();
;;;1083   #endif
;;;1084   }
;;;1085   #endif
                          ENDP


                          AREA ||i.usbd_class_init||, CODE, READONLY, ALIGN=2

                  usbd_class_init PROC
;;;2668   
;;;2669   void usbd_class_init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2670   {   
000004  a34e              ADR      r3,|L15.320|
000006  b092              SUB      sp,sp,#0x48
000008  cb0e              LDM      r3,{r1-r3}
00000a  e88d000e          STM      sp,{r1-r3}
;;;2671       U8  if_num = 0;
;;;2672       U16 desc_ptr = 0;
;;;2673       
;;;2674       desc_ptr += start_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], if_num);    
00000e  4f4b              LDR      r7,|L15.316|
000010  2400              MOVS     r4,#0                 ;2671
000012  4638              MOV      r0,r7
000014  2209              MOVS     r2,#9
000016  4669              MOV      r1,sp
000018  f7fffffe          BL       __aeabi_memcpy
00001c  2509              MOVS     r5,#9
;;;2675       
;;;2676   #if (USBD_ADC_ENABLE)
;;;2677       usbd_adc_init();
;;;2678   #endif
;;;2679   
;;;2680   
;;;2681   #if (USBD_MSC_ENABLE)        
;;;2682       
;;;2683   #if !(defined(DAPLINK_BL)) &&  defined(DRAG_N_DROP_SUPPORT)
;;;2684       //change descriptors here
;;;2685       if (config_ram_get_disable_msd() == 1 || flash_algo_valid()==0 ){
00001e  f7fffffe          BL       config_ram_get_disable_msd
;;;2686           usbd_if_num -= USBD_MSC_ENABLE;
000022  4e4a              LDR      r6,|L15.332|
000024  2801              CMP      r0,#1                 ;2685
000026  d078              BEQ      |L15.282|
000028  f7fffffe          BL       flash_algo_valid
00002c  2800              CMP      r0,#0                 ;2685
00002e  d074              BEQ      |L15.282|
;;;2687           USB_CONFIGURATION_DESCRIPTOR * usb_conf_desc = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;2688           usb_conf_desc->bNumInterfaces = usbd_if_num;
;;;2689           U16 usb_wtotal_len = USBD_WTOTALLENGTH_MAX - (USBD_MSC_DESC_LEN     * USBD_MSC_ENABLE);
;;;2690           usb_conf_desc->wTotalLength = usb_wtotal_len;
;;;2691           USBD_ConfigDescriptor[usb_wtotal_len] = 0;
;;;2692           USBD_HID_DescriptorOffset -= USBD_MSC_ENABLE * USBD_MSC_DESC_LEN;
;;;2693   #if (USBD_HS_ENABLE == 1)
;;;2694           usb_conf_desc = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
;;;2695           usb_conf_desc->bNumInterfaces = usbd_if_num;
;;;2696           usb_conf_desc->wTotalLength = usb_wtotal_len;
;;;2697           USBD_ConfigDescriptor_HS[usb_wtotal_len] = 0;
;;;2698   #endif         
;;;2699       } else
;;;2700   #endif
;;;2701       {
;;;2702       usbd_msc_if_num = if_num++;
000030  7174              STRB     r4,[r6,#5]
000032  46a0              MOV      r8,r4
000034  2401              MOVS     r4,#1
;;;2703       desc_ptr += msc_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_msc_if_num);
000036  f1070509          ADD      r5,r7,#9
00003a  2218              MOVS     r2,#0x18
00003c  a144              ADR      r1,|L15.336|
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       __aeabi_memcpy4
000044  2217              MOVS     r2,#0x17
000046  4669              MOV      r1,sp
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       __aeabi_memcpy
00004e  f8858002          STRB     r8,[r5,#2]
000052  2520              MOVS     r5,#0x20
;;;2704       usbd_msc_init();
000054  f7fffffe          BL       usbd_msc_init
                  |L15.88|
;;;2705   
;;;2706       }
;;;2707   #endif //#if (USBD_MSC_ENABLE)  
;;;2708   
;;;2709   #if (USBD_CDC_ACM_ENABLE)
;;;2710       usbd_cdc_acm_cif_num = if_num++;
000058  7034              STRB     r4,[r6,#0]
00005a  f1040801          ADD      r8,r4,#1
;;;2711       usbd_cdc_acm_dif_num = if_num++;
00005e  f8868001          STRB     r8,[r6,#1]
;;;2712       desc_ptr += acm_cdc_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_cdc_acm_cif_num);
000062  46ba              MOV      r10,r7
000064  442f              ADD      r7,r7,r5
000066  2244              MOVS     r2,#0x44
000068  493f              LDR      r1,|L15.360|
00006a  4668              MOV      r0,sp
00006c  f1040802          ADD      r8,r4,#2
000070  f7fffffe          BL       __aeabi_memcpy4
000074  4638              MOV      r0,r7
000076  2242              MOVS     r2,#0x42
000078  4669              MOV      r1,sp
00007a  f7fffffe          BL       __aeabi_memcpy
00007e  70bc              STRB     r4,[r7,#2]
000080  f1070008          ADD      r0,r7,#8
000084  72bc              STRB     r4,[r7,#0xa]
000086  7684              STRB     r4,[r0,#0x1a]
000088  1c64              ADDS     r4,r4,#1
00008a  76c4              STRB     r4,[r0,#0x1b]
00008c  f887402d          STRB     r4,[r7,#0x2d]
000090  3542              ADDS     r5,r5,#0x42
;;;2713       USBD_CDC_ACM_Initialize();
000092  f7fffffe          BL       USBD_CDC_ACM_Initialize
;;;2714   #endif
;;;2715   
;;;2716   #if (USBD_HID_ENABLE) 
;;;2717       usbd_hid_if_num = if_num++;
000096  f8868004          STRB     r8,[r6,#4]
00009a  f1080701          ADD      r7,r8,#1
;;;2718       desc_ptr += hid_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_hid_if_num);
00009e  eb0a0405          ADD      r4,r10,r5
0000a2  2214              MOVS     r2,#0x14
0000a4  a131              ADR      r1,|L15.364|
0000a6  4668              MOV      r0,sp
0000a8  f7fffffe          BL       __aeabi_memcpy4
0000ac  4620              MOV      r0,r4
0000ae  2212              MOVS     r2,#0x12
0000b0  4669              MOV      r1,sp
0000b2  f7fffffe          BL       __aeabi_memcpy
0000b6  f8848002          STRB     r8,[r4,#2]
0000ba  3512              ADDS     r5,r5,#0x12
;;;2719       usbd_hid_init();
0000bc  f7fffffe          BL       usbd_hid_init
;;;2720   #endif
;;;2721   
;;;2722   #if (USBD_WEBUSB_ENABLE)
;;;2723       usbd_webusb_if_num = if_num++;   
0000c0  71b7              STRB     r7,[r6,#6]
0000c2  a32f              ADR      r3,|L15.384|
0000c4  463c              MOV      r4,r7
0000c6  cb0e              LDM      r3,{r1-r3}
0000c8  e88d000e          STM      sp,{r1-r3}
0000cc  f1070901          ADD      r9,r7,#1
;;;2724       desc_ptr += webusb_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_webusb_if_num);
0000d0  eb0a0005          ADD      r0,r10,r5
0000d4  4607              MOV      r7,r0
0000d6  2209              MOVS     r2,#9
0000d8  4669              MOV      r1,sp
0000da  f7fffffe          BL       __aeabi_memcpy
0000de  481b              LDR      r0,|L15.332|
0000e0  70bc              STRB     r4,[r7,#2]
0000e2  300c              ADDS     r0,r0,#0xc
;;;2725   #endif
;;;2726   
;;;2727   #if (USBD_BULK_ENABLE)
;;;2728       usbd_bulk_if_num = if_num++;  
0000e4  3509              ADDS     r5,r5,#9
0000e6  7384              STRB     r4,[r0,#0xe]
0000e8  464f              MOV      r7,r9
0000ea  f8869002          STRB     r9,[r6,#2]
;;;2729       desc_ptr += bulk_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_bulk_if_num);
0000ee  eb0a0405          ADD      r4,r10,r5
0000f2  2218              MOVS     r2,#0x18
0000f4  a125              ADR      r1,|L15.396|
0000f6  4668              MOV      r0,sp
0000f8  f7fffffe          BL       __aeabi_memcpy4
0000fc  2217              MOVS     r2,#0x17
0000fe  4669              MOV      r1,sp
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       __aeabi_memcpy
000106  4811              LDR      r0,|L15.332|
000108  70a7              STRB     r7,[r4,#2]
00010a  300c              ADDS     r0,r0,#0xc
00010c  f88070ae          STRB     r7,[r0,#0xae]
;;;2730       usbd_bulk_init();
000110  b012              ADD      sp,sp,#0x48
000112  e8bd47f0          POP      {r4-r10,lr}
000116  f7ffbffe          B.W      usbd_bulk_init
                  |L15.282|
00011a  8930              LDRH     r0,[r6,#8]            ;2686  ; usbd_if_num
00011c  4907              LDR      r1,|L15.316|
00011e  1e40              SUBS     r0,r0,#1              ;2686
000120  8130              STRH     r0,[r6,#8]            ;2686
000122  7108              STRB     r0,[r1,#4]            ;2688
000124  207d              MOVS     r0,#0x7d              ;2689
000126  7088              STRB     r0,[r1,#2]            ;2690
000128  2000              MOVS     r0,#0                 ;2690
00012a  70c8              STRB     r0,[r1,#3]            ;2690
00012c  491d              LDR      r1,|L15.420|
00012e  f887007d          STRB     r0,[r7,#0x7d]         ;2691
000132  8808              LDRH     r0,[r1,#0]            ;2692  ; USBD_HID_DescriptorOffset
000134  3817              SUBS     r0,r0,#0x17           ;2692
000136  8008              STRH     r0,[r1,#0]            ;2692
000138  e78e              B        |L15.88|
;;;2731   #endif
;;;2732   
;;;2733   #if (USBD_CLS_ENABLE)
;;;2734       usbd_cls_init();
;;;2735   #endif
;;;2736   
;;;2737   }
;;;2738   
                          ENDP

00013a  0000              DCW      0x0000
                  |L15.316|
                          DCD      USBD_ConfigDescriptor
                  |L15.320|
000140  09029400          DCB      "\t",2,148,0
000144  060100            DCB      6,1,0
000147  80fa00            DCB      128,250,0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L15.332|
                          DCD      ||.data||
                  |L15.336|
000150  090400            DCB      "\t",4,0
000153  00                DCB      0
000154  02080650          DCB      2,"\b",6,"P\b\a",5,130,2,"@",0
000158  08070582
00015c  024000  
00015f  00                DCB      0
000160  07050202          DCB      "\a",5,2,2,"@",0
000164  4000    
000166  00                DCB      0
000167  00                DCB      0
                  |L15.360|
                          DCD      ||area_number.81||
                  |L15.364|
00016c  090400            DCB      "\t",4,0
00016f  00                DCB      0
000170  00                DCB      0
000171  0300              DCB      3,0
000173  00                DCB      0
000174  06092100          DCB      6,"\t!",0
000178  0100              DCB      1,0
00017a  01222100          DCB      1,"""!",0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L15.384|
000180  090400            DCB      "\t",4,0
000183  00                DCB      0
000184  00                DCB      0
000185  ff0300            DCB      255,3,0
000188  0700              DCB      "\a",0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L15.396|
00018c  090400            DCB      "\t",4,0
00018f  00                DCB      0
000190  02ff00            DCB      2,255,0
000193  00                DCB      0
000194  09070501          DCB      "\t\a",5,1,2,"@",0
000198  024000  
00019b  00                DCB      0
00019c  07058102          DCB      "\a",5,129,2,"@",0
0001a0  4000    
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L15.420|
                          DCD      USBD_HID_DescriptorOffset

                          AREA ||i.usbd_os_evt_get||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_get PROC
;;;1338   }
;;;1339   U16  usbd_os_evt_get(void)
000000  2000              MOVS     r0,#0
;;;1340   {
;;;1341       return (0);
;;;1342   }
000002  4770              BX       lr
;;;1343   U32  usbd_os_evt_wait_or(U16 wait_flags, U16 timeout)
                          ENDP


                          AREA ||i.usbd_os_evt_set||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_set PROC
;;;1334   
;;;1335   void usbd_os_evt_set(U16 event_flags, U32 task)
000000  4770              BX       lr
;;;1336   {
;;;1337       
;;;1338   }
;;;1339   U16  usbd_os_evt_get(void)
                          ENDP


                          AREA ||i.usbd_os_evt_wait_or||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_wait_or PROC
;;;1342   }
;;;1343   U32  usbd_os_evt_wait_or(U16 wait_flags, U16 timeout)
000000  2000              MOVS     r0,#0
;;;1344   {
;;;1345       return (0);
;;;1346   }
000002  4770              BX       lr
;;;1347   #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USBD_ConfigDescriptor
                          %        200

                          AREA ||area_number.21||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.bss||
                  USBD_EP0Buf
                          %        64

                          AREA ||area_number.22||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.bss||
                  USBD_HID_InReport
                          %        65

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.bss||
                  USBD_HID_OutReport
                          %        65

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.bss||
                  USBD_MSC_BulkBuf
                          %        64

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.bss||
                  USBD_CDC_ACM_SendBuf
                          %        64

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.bss||
                  USBD_CDC_ACM_ReceiveBuf
                          %        64

                          AREA ||area_number.27||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.bss||
                  USBD_CDC_ACM_NotifyBuf
                          %        10

                          AREA ||area_number.28||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.bss||
                  USBD_Bulk_BulkInBuf
                          %        64

                          AREA ||area_number.29||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.bss||
                  USBD_Bulk_BulkOutBuf
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  usbd_power
000000  00                DCB      0x00

                          AREA ||area_number.32||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.constdata||
                  usbd_hs_enable
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.constdata||
                  usbd_bos_enable
000000  01                DCB      0x01

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  usbd_ep_num
000000  04                DCB      0x04

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  usbd_max_packet0
000000  40                DCB      0x40

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.constdata||
                  usbd_hid_ep_intin
000000  00                DCB      0x00

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.constdata||
                  usbd_hid_ep_intout
000000  00                DCB      0x00

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.constdata||
                  usbd_hid_interval
000000  00010040          DCW      0x0001,0x0040

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.39||, ||.constdata||
                  usbd_hid_maxpacketsize
000000  00400040          DCW      0x0040,0x0040

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.constdata||
                  usbd_hid_inreport_num
000000  01                DCB      0x01

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.constdata||
                  usbd_hid_outreport_num
000000  01                DCB      0x01

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.constdata||
                  usbd_hid_inreport_max_sz
000000  0040              DCW      0x0040

                          AREA ||area_number.43||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.constdata||
                  usbd_hid_outreport_max_sz
000000  0040              DCW      0x0040

                          AREA ||area_number.44||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.constdata||
                  usbd_hid_featreport_max_sz
000000  0001              DCW      0x0001

                          AREA ||area_number.45||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.constdata||
                  usbd_msc_ep_bulkin
000000  02                DCB      0x02

                          AREA ||area_number.46||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.constdata||
                  usbd_msc_ep_bulkout
000000  02                DCB      0x02

                          AREA ||area_number.47||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.constdata||
                  usbd_msc_maxpacketsize
000000  00400200          DCW      0x0040,0x0200

                          AREA ||area_number.48||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.48||, ||.constdata||
                  USBD_MSC_BulkBufSize
000000  0040              DCW      0x0040

                          AREA ||area_number.49||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.constdata||
                  usbd_cdc_acm_ep_intin
000000  03                DCB      0x03

                          AREA ||area_number.50||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.constdata||
                  usbd_cdc_acm_ep_bulkin
000000  04                DCB      0x04

                          AREA ||area_number.51||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.constdata||
                  usbd_cdc_acm_ep_bulkout
000000  04                DCB      0x04

                          AREA ||area_number.52||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.constdata||
                  usbd_cdc_acm_sendbuf_sz
000000  0040              DCW      0x0040

                          AREA ||area_number.53||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.constdata||
                  usbd_cdc_acm_receivebuf_sz
000000  0040              DCW      0x0040

                          AREA ||area_number.54||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.constdata||
                  usbd_cdc_acm_maxpacketsize
000000  00100010          DCW      0x0010,0x0010

                          AREA ||area_number.55||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.constdata||
                  usbd_cdc_acm_maxpacketsize1
000000  00100010          DCW      0x0010,0x0010

                          AREA ||area_number.56||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.constdata||
                  usbd_webusb_vendor_code
000000  21                DCB      0x21

                          AREA ||area_number.57||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.constdata||
                  usbd_winusb_vendor_code
000000  20                DCB      0x20

                          AREA ||area_number.58||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.constdata||
                  usbd_bulk_ep_bulkin
000000  01                DCB      0x01

                          AREA ||area_number.59||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.constdata||
                  usbd_bulk_ep_bulkout
000000  01                DCB      0x01

                          AREA ||area_number.60||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.60||, ||.constdata||
                  usbd_bulk_maxpacketsize
000000  00400200          DCW      0x0040,0x0200

                          AREA ||area_number.61||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.61||, ||.constdata||
                  USBD_Bulk_BulkBufSize
000000  0040              DCW      0x0040

                          AREA ||area_number.62||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.constdata||
                  USBD_P_Power_Event
                          DCD      USBD_Power_Event

                          AREA ||area_number.63||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.constdata||
                  USBD_P_Reset_Event
                          DCD      USBD_Reset_Event

                          AREA ||area_number.64||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.constdata||
                  USBD_P_Suspend_Event
                          DCD      USBD_Suspend_Event

                          AREA ||area_number.65||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.constdata||
                  USBD_P_Resume_Event
                          DCD      USBD_Resume_Event

                          AREA ||area_number.66||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.constdata||
                  USBD_P_WakeUp_Event
                          DCD      USBD_WakeUp_Event

                          AREA ||area_number.67||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.constdata||
                  USBD_P_SOF_Event
                          DCD      USBD_SOF_Event

                          AREA ||area_number.68||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.constdata||
                  USBD_P_Error_Event
                          DCD      USBD_Error_Event

                          AREA ||area_number.69||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.69||, ||.constdata||
                  USBD_P_EP
                          DCD      USBD_EndPoint0
                          DCD      USBD_BULK_EP_BULK_Event
                          DCD      USBD_MSC_EP_BULK_Event
                          DCD      USBD_CDC_ACM_EP_INTIN_Event
                          DCD      USBD_CDC_ACM_EP_BULK_Event
                          DCD      USBD_EndPoint5
                          DCD      USBD_EndPoint6
                          DCD      USBD_EndPoint7
                          DCD      USBD_EndPoint8
                          DCD      USBD_EndPoint9
                          DCD      USBD_EndPoint10
                          DCD      USBD_EndPoint11
                          DCD      USBD_EndPoint12
                          DCD      USBD_EndPoint13
                          DCD      USBD_EndPoint14
                          DCD      USBD_EndPoint15

                          AREA ||area_number.70||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.constdata||
                  USBD_P_Configure_Event
                          DCD      USBD_Configure_Event

                          AREA ||area_number.71||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.constdata||
                  USBD_P_Interface_Event
                          DCD      USBD_Interface_Event

                          AREA ||area_number.72||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.constdata||
                  USBD_P_Feature_Event
                          DCD      USBD_Feature_Event

                          AREA ||area_number.73||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.73||, ||.constdata||
                  __rtx
                          DCD      0x00000000

                          AREA ||area_number.74||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.74||, ||.constdata||
                  USBD_HID_ReportDescriptor
000000  0600ff09          DCB      0x06,0x00,0xff,0x09
000004  01a10115          DCB      0x01,0xa1,0x01,0x15
000008  0026ff00          DCB      0x00,0x26,0xff,0x00
00000c  75089540          DCB      0x75,0x08,0x95,0x40
000010  09018102          DCB      0x09,0x01,0x81,0x02
000014  95400901          DCB      0x95,0x40,0x09,0x01
000018  91029501          DCB      0x91,0x02,0x95,0x01
00001c  0901b102          DCB      0x09,0x01,0xb1,0x02
000020  c0                DCB      0xc0

                          AREA ||area_number.75||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.75||, ||.constdata||
                  USBD_HID_ReportDescriptorSize
000000  0021              DCW      0x0021

                          AREA ||area_number.76||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.76||, ||.constdata||
                  USBD_DeviceDescriptor
000000  12011002          DCB      0x12,0x01,0x10,0x02
000004  ef020140          DCB      0xef,0x02,0x01,0x40
000008  280d0402          DCB      0x28,0x0d,0x04,0x02
00000c  00010102          DCB      0x00,0x01,0x01,0x02
000010  0301              DCB      0x03,0x01

                          AREA ||area_number.77||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.77||, ||.constdata||
                  USBD_DeviceQualifier
000000  00                DCB      0x00

                          AREA ||area_number.78||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.78||, ||.constdata||
                  USBD_DeviceQualifier_HS
000000  00                DCB      0x00

                          AREA ||area_number.79||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.constdata||
                  USBD_BinaryObjectStoreDescriptor
000000  050f3900          DCB      0x05,0x0f,0x39,0x00
000004  02181005          DCB      0x02,0x18,0x10,0x05
000008  0038b608          DCB      0x00,0x38,0xb6,0x08
00000c  34a909a0          DCB      0x34,0xa9,0x09,0xa0
000010  478bfda0          DCB      0x47,0x8b,0xfd,0xa0
000014  768815b6          DCB      0x76,0x88,0x15,0xb6
000018  65000121          DCB      0x65,0x00,0x01,0x21
00001c  001c1005          DCB      0x00,0x1c,0x10,0x05
000020  00df60dd          DCB      0x00,0xdf,0x60,0xdd
000024  d88945c7          DCB      0xd8,0x89,0x45,0xc7
000028  4c9cd265          DCB      0x4c,0x9c,0xd2,0x65
00002c  9d9e648a          DCB      0x9d,0x9e,0x64,0x8a
000030  9f000003          DCB      0x9f,0x00,0x00,0x03
000034  064a0120          DCB      0x06,0x4a,0x01,0x20
000038  00                DCB      0x00

                          AREA ||area_number.80||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.80||, ||.constdata||
                  USBD_StringDescriptor
000000  0403              DCB      0x04,0x03
000002  0409              DCW      0x0409
000004  08034100          DCB      0x08,0x03,0x41,0x00
000008  52004d00          DCB      0x52,0x00,0x4d,0x00
00000c  24034400          DCB      0x24,0x03,0x44,0x00
000010  41005000          DCB      0x41,0x00,0x50,0x00
000014  4c006900          DCB      0x4c,0x00,0x69,0x00
000018  6e006b00          DCB      0x6e,0x00,0x6b,0x00
00001c  20004300          DCB      0x20,0x00,0x43,0x00
000020  4d005300          DCB      0x4d,0x00,0x53,0x00
000024  49005300          DCB      0x49,0x00,0x53,0x00
000028  2d004400          DCB      0x2d,0x00,0x44,0x00
00002c  41005000          DCB      0x41,0x00,0x50,0x00
000030  1a033000          DCB      0x1a,0x03,0x30,0x00
000034  30003000          DCB      0x30,0x00,0x30,0x00
000038  31004100          DCB      0x31,0x00,0x41,0x00
00003c  30003000          DCB      0x30,0x00,0x30,0x00
000040  30003000          DCB      0x30,0x00,0x30,0x00
000044  30003000          DCB      0x30,0x00,0x30,0x00
000048  30002203          DCB      0x30,0x00,0x22,0x03
00004c  6d006200          DCB      0x6d,0x00,0x62,0x00
000050  65006400          DCB      0x65,0x00,0x64,0x00
000054  20005300          DCB      0x20,0x00,0x53,0x00
000058  65007200          DCB      0x65,0x00,0x72,0x00
00005c  69006100          DCB      0x69,0x00,0x61,0x00
000060  6c002000          DCB      0x6c,0x00,0x20,0x00
000064  50006f00          DCB      0x50,0x00,0x6f,0x00
000068  72007400          DCB      0x72,0x00,0x74,0x00
00006c  22036d00          DCB      0x22,0x03,0x6d,0x00
000070  62006500          DCB      0x62,0x00,0x65,0x00
000074  64002000          DCB      0x64,0x00,0x20,0x00
000078  53006500          DCB      0x53,0x00,0x65,0x00
00007c  72006900          DCB      0x72,0x00,0x69,0x00
000080  61006c00          DCB      0x61,0x00,0x6c,0x00
000084  20005000          DCB      0x20,0x00,0x50,0x00
000088  6f007200          DCB      0x6f,0x00,0x72,0x00
00008c  74001a03          DCB      0x74,0x00,0x1a,0x03
000090  43004d00          DCB      0x43,0x00,0x4d,0x00
000094  53004900          DCB      0x53,0x00,0x49,0x00
000098  53002d00          DCB      0x53,0x00,0x2d,0x00
00009c  44004100          DCB      0x44,0x00,0x41,0x00
0000a0  50002000          DCB      0x50,0x00,0x20,0x00
0000a4  76003100          DCB      0x76,0x00,0x31,0x00
0000a8  24035700          DCB      0x24,0x03,0x57,0x00
0000ac  65006200          DCB      0x65,0x00,0x62,0x00
0000b0  55005300          DCB      0x55,0x00,0x53,0x00
0000b4  42003a00          DCB      0x42,0x00,0x3a,0x00
0000b8  20004300          DCB      0x20,0x00,0x43,0x00
0000bc  4d005300          DCB      0x4d,0x00,0x53,0x00
0000c0  49005300          DCB      0x49,0x00,0x53,0x00
0000c4  2d004400          DCB      0x2d,0x00,0x44,0x00
0000c8  41005000          DCB      0x41,0x00,0x50,0x00
0000cc  10035500          DCB      0x10,0x03,0x55,0x00
0000d0  53004200          DCB      0x53,0x00,0x42,0x00
0000d4  5f004d00          DCB      0x5f,0x00,0x4d,0x00
0000d8  53004300          DCB      0x53,0x00,0x43,0x00
0000dc  1a034300          DCB      0x1a,0x03,0x43,0x00
0000e0  4d005300          DCB      0x4d,0x00,0x53,0x00
0000e4  49005300          DCB      0x49,0x00,0x53,0x00
0000e8  2d004400          DCB      0x2d,0x00,0x44,0x00
0000ec  41005000          DCB      0x41,0x00,0x50,0x00
0000f0  20007600          DCB      0x20,0x00,0x76,0x00
0000f4  3200              DCB      0x32,0x00

                          AREA ||area_number.81||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.constdata||
000000  080b0002          DCB      0x08,0x0b,0x00,0x02
000004  02020104          DCB      0x02,0x02,0x01,0x04
000008  09040000          DCB      0x09,0x04,0x00,0x00
00000c  01020201          DCB      0x01,0x02,0x02,0x01
000010  04052400          DCB      0x04,0x05,0x24,0x00
000014  10010524          DCB      0x10,0x01,0x05,0x24
000018  01030204          DCB      0x01,0x03,0x02,0x04
00001c  24020605          DCB      0x24,0x02,0x06,0x05
000020  24060000          DCB      0x24,0x06,0x00,0x00
000024  07058303          DCB      0x07,0x05,0x83,0x03
000028  10002009          DCB      0x10,0x00,0x20,0x09
00002c  04000002          DCB      0x04,0x00,0x00,0x02
000030  0a000005          DCB      0x0a,0x00,0x00,0x05
000034  07050402          DCB      0x07,0x05,0x04,0x02
000038  10000007          DCB      0x10,0x00,0x00,0x07
00003c  05840210          DCB      0x05,0x84,0x02,0x10
000040  0000              DCB      0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d424544          DCB      "MBED    VFS             0.1",0
000004  20202020
000008  56465320
00000c  20202020
000010  20202020
000014  20202020
000018  302e3100

                          AREA ||.data||, DATA, ALIGN=1

                  usbd_cdc_acm_cif_num
000000  00                DCB      0x00
                  usbd_cdc_acm_dif_num
000001  00                DCB      0x00
                  usbd_bulk_if_num
000002  00                DCB      0x00
                  USBD_ConfigDescriptor_HS
000003  00                DCB      0x00
                  usbd_hid_if_num
000004  00                DCB      0x00
                  usbd_msc_if_num
000005  00                DCB      0x00
                  usbd_webusb_if_num
000006  0000              DCB      0x00,0x00
                  usbd_if_num
000008  0006              DCW      0x0006
                  USBD_HID_DescriptorOffset
00000a  006b              DCW      0x006b
                  USBD_WinUSBDescriptorSetDescriptor
00000c  0a000000          DCB      0x0a,0x00,0x00,0x00
000010  00000306          DCB      0x00,0x00,0x03,0x06
000014  4a010800          DCB      0x4a,0x01,0x08,0x00
000018  02000000          DCB      0x02,0x00,0x00,0x00
00001c  a0001400          DCB      0xa0,0x00,0x14,0x00
000020  03005749          DCB      0x03,0x00,0x57,0x49
000024  4e555342          DCB      0x4e,0x55,0x53,0x42
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00008400          DCB      0x00,0x00,0x84,0x00
000034  04000700          DCB      0x04,0x00,0x07,0x00
000038  2a004400          DCB      0x2a,0x00,0x44,0x00
00003c  65007600          DCB      0x65,0x00,0x76,0x00
000040  69006300          DCB      0x69,0x00,0x63,0x00
000044  65004900          DCB      0x65,0x00,0x49,0x00
000048  6e007400          DCB      0x6e,0x00,0x74,0x00
00004c  65007200          DCB      0x65,0x00,0x72,0x00
000050  66006100          DCB      0x66,0x00,0x61,0x00
000054  63006500          DCB      0x63,0x00,0x65,0x00
000058  47005500          DCB      0x47,0x00,0x55,0x00
00005c  49004400          DCB      0x49,0x00,0x44,0x00
000060  73000000          DCB      0x73,0x00,0x00,0x00
000064  50007b00          DCB      0x50,0x00,0x7b,0x00
000068  39003200          DCB      0x39,0x00,0x32,0x00
00006c  43004500          DCB      0x43,0x00,0x45,0x00
000070  36003400          DCB      0x36,0x00,0x34,0x00
000074  36003200          DCB      0x36,0x00,0x32,0x00
000078  2d003900          DCB      0x2d,0x00,0x39,0x00
00007c  43003700          DCB      0x43,0x00,0x37,0x00
000080  37002d00          DCB      0x37,0x00,0x2d,0x00
000084  34003600          DCB      0x34,0x00,0x36,0x00
000088  46004500          DCB      0x46,0x00,0x45,0x00
00008c  2d003900          DCB      0x2d,0x00,0x39,0x00
000090  33003300          DCB      0x33,0x00,0x33,0x00
000094  42002d00          DCB      0x42,0x00,0x2d,0x00
000098  33003100          DCB      0x33,0x00,0x31,0x00
00009c  43004200          DCB      0x43,0x00,0x42,0x00
0000a0  39004300          DCB      0x39,0x00,0x43,0x00
0000a4  35004100          DCB      0x35,0x00,0x41,0x00
0000a8  41003300          DCB      0x41,0x00,0x33,0x00
0000ac  42003900          DCB      0x42,0x00,0x39,0x00
0000b0  7d000000          DCB      0x7d,0x00,0x00,0x00
0000b4  00000800          DCB      0x00,0x00,0x08,0x00
0000b8  02000000          DCB      0x02,0x00,0x00,0x00
0000bc  a0001400          DCB      0xa0,0x00,0x14,0x00
0000c0  03005749          DCB      0x03,0x00,0x57,0x49
0000c4  4e555342          DCB      0x4e,0x55,0x53,0x42
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00008400          DCB      0x00,0x00,0x84,0x00
0000d4  04000700          DCB      0x04,0x00,0x07,0x00
0000d8  2a004400          DCB      0x2a,0x00,0x44,0x00
0000dc  65007600          DCB      0x65,0x00,0x76,0x00
0000e0  69006300          DCB      0x69,0x00,0x63,0x00
0000e4  65004900          DCB      0x65,0x00,0x49,0x00
0000e8  6e007400          DCB      0x6e,0x00,0x74,0x00
0000ec  65007200          DCB      0x65,0x00,0x72,0x00
0000f0  66006100          DCB      0x66,0x00,0x61,0x00
0000f4  63006500          DCB      0x63,0x00,0x65,0x00
0000f8  47005500          DCB      0x47,0x00,0x55,0x00
0000fc  49004400          DCB      0x49,0x00,0x44,0x00
000100  73000000          DCB      0x73,0x00,0x00,0x00
000104  50007b00          DCB      0x50,0x00,0x7b,0x00
000108  43004400          DCB      0x43,0x00,0x44,0x00
00010c  42003300          DCB      0x42,0x00,0x33,0x00
000110  42003500          DCB      0x42,0x00,0x35,0x00
000114  41004400          DCB      0x41,0x00,0x44,0x00
000118  2d003200          DCB      0x2d,0x00,0x32,0x00
00011c  39003300          DCB      0x39,0x00,0x33,0x00
000120  42002d00          DCB      0x42,0x00,0x2d,0x00
000124  34003600          DCB      0x34,0x00,0x36,0x00
000128  36003300          DCB      0x36,0x00,0x33,0x00
00012c  2d004100          DCB      0x2d,0x00,0x41,0x00
000130  41003300          DCB      0x41,0x00,0x33,0x00
000134  36002d00          DCB      0x36,0x00,0x2d,0x00
000138  31004100          DCB      0x31,0x00,0x41,0x00
00013c  41004500          DCB      0x41,0x00,0x45,0x00
000140  34003600          DCB      0x34,0x00,0x36,0x00
000144  34003600          DCB      0x34,0x00,0x36,0x00
000148  33003700          DCB      0x33,0x00,0x37,0x00
00014c  37003600          DCB      0x37,0x00,0x36,0x00
000150  7d000000          DCB      0x7d,0x00,0x00,0x00
000154  0000              DCB      0x00,0x00

                          AREA ||area_number.84||, DATA, ALIGN=2

                          EXPORTAS ||area_number.84||, ||.data||
                  usbd_msc_inquiry_data
                          DCD      ||.conststring||

                          AREA ||area_number.85||, DATA, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.data||
                  USBD_WebUSBURLDescriptor
000000  2c03016f          DCB      0x2c,0x03,0x01,0x6f
000004  732e6d62          DCB      0x73,0x2e,0x6d,0x62
000008  65642e63          DCB      0x65,0x64,0x2e,0x63
00000c  6f6d2f77          DCB      0x6f,0x6d,0x2f,0x77
000010  65627573          DCB      0x65,0x62,0x75,0x73
000014  622f6c61          DCB      0x62,0x2f,0x6c,0x61
000018  6e64696e          DCB      0x6e,0x64,0x69,0x6e
00001c  672d7061          DCB      0x67,0x2d,0x70,0x61
000020  67652f3f          DCB      0x67,0x65,0x2f,0x3f
000024  6269643d          DCB      0x62,0x69,0x64,0x3d
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  1303016f          DCB      0x13,0x03,0x01,0x6f
000030  732e6d62          DCB      0x73,0x2e,0x6d,0x62
000034  65642e63          DCB      0x65,0x64,0x2e,0x63
000038  6f6d2f00          DCB      0x6f,0x6d,0x2f,0x00
00003c  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.86||, DATA, ALIGN=0

                          EXPORTAS ||area_number.86||, ||.data||
                  USBD_AltSetting
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.87||, DATA, ALIGN=1

                          EXPORTAS ||area_number.87||, ||.data||
                  USBD_HID_PollingCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.88||, DATA, ALIGN=0

                          EXPORTAS ||area_number.88||, ||.data||
                  USBD_HID_IdleCnt
000000  00                DCB      0x00

                          AREA ||area_number.89||, DATA, ALIGN=0

                          EXPORTAS ||area_number.89||, ||.data||
                  USBD_HID_IdleReload
000000  00                DCB      0x00

                          AREA ||area_number.90||, DATA, ALIGN=0

                          EXPORTAS ||area_number.90||, ||.data||
                  USBD_HID_IdleSet
000000  00                DCB      0x00

                          AREA ||area_number.91||, DATA, ALIGN=0

                          EXPORTAS ||area_number.91||, ||.data||
                  USBD_HID_FeatReport
000000  0000              DCB      0x00,0x00
