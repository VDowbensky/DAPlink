; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\hardfault_handler.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\hardfault_handler.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\hardfault_handler.crf ..\..\..\source\daplink\HardFault_Handler.c]
                          THUMB

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=2

                  HardFault_Handler PROC
;;;30     register unsigned int _control __asm("control");
;;;31     void HardFault_Handler()
000000  f3ef8408          MRS      r4,MSP
;;;32     {
;;;33     //hexdump logic on hardfault
;;;34         uint32_t stk_ptr;
;;;35         uint32_t * stack = (uint32_t *)_msp;
;;;36         
;;;37         if ((_lr & 0xF) == 0xD) { //process stack
000004  f00e000f          AND      r0,lr,#0xf
000008  280d              CMP      r0,#0xd
00000a  d101              BNE      |L1.16|
;;;38             stack = (uint32_t *)_psp;
00000c  f3ef8409          MRS      r4,PSP
                  |L1.16|
;;;39         }
;;;40     
;;;41         //calculate stack ptr before fault
;;;42         stk_ptr = (uint32_t)stack + 0x20;
;;;43         if ((stack[7] & 0x200) != 0) { //xpsr bit 9 align
000010  8ba0              LDRH     r0,[r4,#0x1c]
000012  f1040520          ADD      r5,r4,#0x20           ;42
000016  0580              LSLS     r0,r0,#22
000018  d500              BPL      |L1.28|
00001a  1d2d              ADDS     r5,r5,#4
                  |L1.28|
;;;44             stk_ptr += 0x4;
;;;45         }
;;;46         if ((_lr & 0x10) == 0) { //fp
00001c  ea5f60ce          LSLS     r0,lr,#27
000020  d400              BMI      |L1.36|
000022  3548              ADDS     r5,r5,#0x48
                  |L1.36|
;;;47             stk_ptr += 0x48;
;;;48         }
;;;49         
;;;50         config_ram_add_hexdump(_lr);  //EXC_RETURN
000024  4670              MOV      r0,lr
000026  f7fffffe          BL       config_ram_add_hexdump
;;;51         config_ram_add_hexdump(_psp);
00002a  f3ef8009          MRS      r0,PSP
00002e  f7fffffe          BL       config_ram_add_hexdump
;;;52         config_ram_add_hexdump(_msp);
000032  f3ef8008          MRS      r0,MSP
000036  f7fffffe          BL       config_ram_add_hexdump
;;;53         config_ram_add_hexdump(_control);
00003a  f3ef8014          MRS      r0,CONTROL
00003e  f7fffffe          BL       config_ram_add_hexdump
;;;54         config_ram_add_hexdump(stk_ptr); //SP
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       config_ram_add_hexdump
;;;55         config_ram_add_hexdump(stack[5]);  //LR
000048  6960              LDR      r0,[r4,#0x14]
00004a  f7fffffe          BL       config_ram_add_hexdump
;;;56         config_ram_add_hexdump(stack[6]);  //PC
00004e  69a0              LDR      r0,[r4,#0x18]
000050  f7fffffe          BL       config_ram_add_hexdump
;;;57         config_ram_add_hexdump(stack[7]);  //xPSR 
000054  69e0              LDR      r0,[r4,#0x1c]
000056  f7fffffe          BL       config_ram_add_hexdump
;;;58     
;;;59     #ifndef __CORTEX_M
;;;60     #error __CORTEX_M not defined!!
;;;61     #else
;;;62     
;;;63     #if (__CORTEX_M > 0x00)
;;;64         config_ram_add_hexdump(SCB->HFSR);
00005a  4812              LDR      r0,|L1.164|
00005c  6800              LDR      r0,[r0,#0]
00005e  f7fffffe          BL       config_ram_add_hexdump
;;;65         config_ram_add_hexdump(SCB->CFSR);
000062  4810              LDR      r0,|L1.164|
000064  1f00              SUBS     r0,r0,#4
000066  6800              LDR      r0,[r0,#0]
000068  f7fffffe          BL       config_ram_add_hexdump
;;;66         config_ram_add_hexdump(SCB->DFSR);
00006c  480d              LDR      r0,|L1.164|
00006e  1d00              ADDS     r0,r0,#4
000070  6800              LDR      r0,[r0,#0]
000072  f7fffffe          BL       config_ram_add_hexdump
;;;67         config_ram_add_hexdump(SCB->AFSR);
000076  480b              LDR      r0,|L1.164|
000078  3010              ADDS     r0,r0,#0x10
00007a  6800              LDR      r0,[r0,#0]
00007c  f7fffffe          BL       config_ram_add_hexdump
;;;68         config_ram_add_hexdump(SCB->MMFAR);
000080  4808              LDR      r0,|L1.164|
000082  3008              ADDS     r0,r0,#8
000084  6800              LDR      r0,[r0,#0]
000086  f7fffffe          BL       config_ram_add_hexdump
;;;69         config_ram_add_hexdump(SCB->BFAR);
00008a  4806              LDR      r0,|L1.164|
00008c  300c              ADDS     r0,r0,#0xc
00008e  6800              LDR      r0,[r0,#0]
000090  f7fffffe          BL       config_ram_add_hexdump
;;;70     #endif  
;;;71     
;;;72     #endif //#ifndef __CORTEX_M
;;;73     
;;;74         util_assert(0);
000094  224a              MOVS     r2,#0x4a
000096  a104              ADR      r1,|L1.168|
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       _util_assert
;;;75         SystemReset();
00009e  f7fffffe          BL       SystemReset
                  |L1.162|
;;;76     
;;;77         while (1); // Wait for reset
0000a2  e7fe              B        |L1.162|
;;;78     }
                          ENDP

                  |L1.164|
                          DCD      0xe000ed2c
                  |L1.168|
0000a8  2e2e5c2e          DCB      "..\\..\\..\\source\\daplink\\HardFault_Handler.c",0
0000ac  2e5c2e2e
0000b0  5c736f75
0000b4  7263655c
0000b8  6461706c
0000bc  696e6b5c
0000c0  48617264
0000c4  4661756c
0000c8  745f4861
0000cc  6e646c65
0000d0  722e6300

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\daplink\\HardFault_Handler.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_HardFault_Handler_c_d405580c____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___19_HardFault_Handler_c_d405580c____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_HardFault_Handler_c_d405580c____REVSH|
#line 495
|__asm___19_HardFault_Handler_c_d405580c____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_HardFault_Handler_c_d405580c____RRX|
#line 682
|__asm___19_HardFault_Handler_c_d405580c____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
