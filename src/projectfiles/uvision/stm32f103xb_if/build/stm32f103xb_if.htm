<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\stm32f103xb_if.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\stm32f103xb_if.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Sep 06 11:18:27 2023
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_EndPoint0 &rArr; USBD_EndPoint0_Out_HID_ReqToIF &rArr; USBD_HID_SetReport &rArr; usbd_hid_set_report &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b2]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[53]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from hardfault_handler.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[17]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8c]">USBD_BULK_EP_BULK_Event</a> from usbd_bulk.o(i.USBD_BULK_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8f]">USBD_CDC_ACM_EP_BULK_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8e]">USBD_CDC_ACM_EP_INTIN_Event</a> from usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[90]">USBD_Configure_Event</a> from usb_config.o(i.USBD_Configure_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8b]">USBD_EndPoint0</a> from usbd_core.o(i.USBD_EndPoint0) referenced from usb_config.o(.constdata)
 <LI><a href="#[8d]">USBD_MSC_EP_BULK_Event</a> from usbd_msc.o(i.USBD_MSC_EP_BULK_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[89]">USBD_Reset_Event</a> from usb_config.o(i.USBD_Reset_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[8a]">USBD_SOF_Event</a> from usb_config.o(i.USBD_SOF_Event) referenced from usb_config.o(.constdata)
 <LI><a href="#[3f]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">USB_LP_CAN1_RX0_IRQHandler</a> from usbd_stm32f103.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[91]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[6]">close_bin</a> from file_stream.o(i.close_bin) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[a]">close_hex</a> from file_stream.o(i.close_hex) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[3]">detect_bin</a> from file_stream.o(i.detect_bin) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[7]">detect_hex</a> from file_stream.o(i.detect_hex) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[6b]">erase_chip</a> from iap_flash_intf.o(i.erase_chip) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[6a]">erase_sector</a> from iap_flash_intf.o(i.erase_sector) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[6d]">erase_sector_size</a> from iap_flash_intf.o(i.erase_sector_size) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[58]">file_change_cb_stub</a> from virtual_fs.o(i.file_change_cb_stub) referenced from virtual_fs.o(i.vfs_init)
 <LI><a href="#[46]">file_change_handler</a> from vfs_manager.o(i.file_change_handler) referenced from vfs_manager.o(i.build_filesystem)
 <LI><a href="#[67]">init</a> from iap_flash_intf.o(i.init) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[47]">main_task</a> from main.o(i.main_task) referenced from main.o(i.main)
 <LI><a href="#[4]">open_bin</a> from file_stream.o(i.open_bin) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[8]">open_hex</a> from file_stream.o(i.open_hex) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[53]">os_idle_demon</a> from rtx_config.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[7a]">prerun_target_config</a> from target_reset_mimxrt.o(i.prerun_target_config) referenced from target_reset_mimxrt.o(.constdata)
 <LI><a href="#[69]">program_page</a> from iap_flash_intf.o(i.program_page) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[6c]">program_page_min_size</a> from iap_flash_intf.o(i.program_page_min_size) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[71]">read_dir</a> from virtual_fs.o(i.read_dir) referenced from virtual_fs.o(.constdata)
 <LI><a href="#[70]">read_fat</a> from virtual_fs.o(i.read_fat) referenced 2 times from virtual_fs.o(.constdata)
 <LI><a href="#[5c]">read_file_assert_txt</a> from vfs_user.o(i.read_file_assert_txt) referenced from vfs_user.o(i.vfs_user_build_filesystem)
 <LI><a href="#[5a]">read_file_details_txt</a> from vfs_user.o(i.read_file_details_txt) referenced from vfs_user.o(i.vfs_user_build_filesystem)
 <LI><a href="#[5b]">read_file_fail_txt</a> from vfs_user.o(i.read_file_fail_txt) referenced from vfs_user.o(i.vfs_user_build_filesystem)
 <LI><a href="#[59]">read_file_mbed_htm</a> from vfs_user.o(i.read_file_mbed_htm) referenced from vfs_user.o(i.vfs_user_build_filesystem)
 <LI><a href="#[5d]">read_file_need_bl_txt</a> from vfs_user.o(i.read_file_need_bl_txt) referenced from vfs_user.o(i.vfs_user_build_filesystem)
 <LI><a href="#[6f]">read_mbr</a> from virtual_fs.o(i.read_mbr) referenced from virtual_fs.o(.constdata)
 <LI><a href="#[56]">read_zero</a> from virtual_fs.o(i.read_zero) referenced from virtual_fs.o(i.vfs_create_file)
 <LI><a href="#[40]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[49]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from cmsis_os2_port.o(i.osDelay)
 <LI><a href="#[4e]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from cmsis_os2_port.o(i.osThreadFlagsWait)
 <LI><a href="#[4c]">rt_evt_set</a> from rt_event.o(i.rt_evt_set) referenced from cmsis_os2_port.o(i.osThreadFlagsSet)
 <LI><a href="#[4d]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from cmsis_os2_port.o(i.osThreadFlagsWait)
 <LI><a href="#[41]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[54]">rt_itv_set</a> from rt_time.o(i.rt_itv_set) referenced from cmsis_os2_port.o(i.rt_timer_task)
 <LI><a href="#[55]">rt_itv_wait</a> from rt_time.o(i.rt_itv_wait) referenced from cmsis_os2_port.o(i.rt_timer_task)
 <LI><a href="#[4b]">rt_mut_init</a> from rt_mutex.o(i.rt_mut_init) referenced from cmsis_os2_port.o(i.osMutexNew)
 <LI><a href="#[45]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_config.o(i._mutex_release)
 <LI><a href="#[45]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from cmsis_os2_port.o(i.osMutexRelease)
 <LI><a href="#[44]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_config.o(i._mutex_acquire)
 <LI><a href="#[44]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from cmsis_os2_port.o(i.osMutexAcquire)
 <LI><a href="#[51]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from cmsis_os2_port.o(i.osThreadNew)
 <LI><a href="#[4a]">rt_time_get</a> from rt_time.o(i.rt_time_get) referenced from cmsis_os2_port.o(i.osKernelGetSysTimerCount)
 <LI><a href="#[52]">rt_timer_task</a> from cmsis_os2_port.o(i.rt_timer_task) referenced from cmsis_os2_port.o(i.osTimerStart)
 <LI><a href="#[50]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from cmsis_os2_port.o(i.osThreadNew)
 <LI><a href="#[50]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from cmsis_os2_port.o(i.osTimerStart)
 <LI><a href="#[4f]">rt_tsk_self</a> from rt_task.o(i.rt_tsk_self) referenced from cmsis_os2_port.o(i.osThreadGetId)
 <LI><a href="#[75]">security_bits_set</a> from target_reset_kseries.o(i.security_bits_set) referenced 3 times from target_reset_kseries.o(.constdata)
 <LI><a href="#[7c]">swd_set_target_reset_nrf</a> from target_reset_nrf51.o(i.swd_set_target_reset_nrf) referenced 2 times from target_reset_nrf51.o(.constdata)
 <LI><a href="#[80]">swd_set_target_reset_realtek</a> from target_reset_realtek_rtl8195am.o(i.swd_set_target_reset_realtek) referenced from target_reset_realtek_rtl8195am.o(.constdata)
 <LI><a href="#[73]">target_before_init_debug</a> from target_reset_kseries.o(i.target_before_init_debug) referenced 3 times from target_reset_kseries.o(.constdata)
 <LI><a href="#[87]">target_before_init_debug_tz</a> from target_reset_tz.o(i.target_before_init_debug_tz) referenced from target_reset_tz.o(.constdata)
 <LI><a href="#[65]">target_flash_busy</a> from target_flash.o(i.target_flash_busy) referenced 2 times from target_flash.o(.constdata)
 <LI><a href="#[62]">target_flash_erase_chip</a> from target_flash.o(i.target_flash_erase_chip) referenced from target_flash.o(.constdata)
 <LI><a href="#[61]">target_flash_erase_sector</a> from target_flash.o(i.target_flash_erase_sector) referenced from target_flash.o(.constdata)
 <LI><a href="#[64]">target_flash_erase_sector_size</a> from target_flash.o(i.target_flash_erase_sector_size) referenced from target_flash.o(.constdata)
 <LI><a href="#[5e]">target_flash_init</a> from target_flash.o(i.target_flash_init) referenced from target_flash.o(.constdata)
 <LI><a href="#[60]">target_flash_program_page</a> from target_flash.o(i.target_flash_program_page) referenced from target_flash.o(.constdata)
 <LI><a href="#[63]">target_flash_program_page_min_size</a> from target_flash.o(i.target_flash_program_page_min_size) referenced from target_flash.o(.constdata)
 <LI><a href="#[66]">target_flash_set</a> from target_flash.o(i.target_flash_set) referenced from target_flash.o(.constdata)
 <LI><a href="#[5f]">target_flash_uninit</a> from target_flash.o(i.target_flash_uninit) referenced from target_flash.o(.constdata)
 <LI><a href="#[82]">target_set_state_rza</a> from target_reset_rza.o(i.target_set_state_rza) referenced from target_reset_rza.o(.constdata)
 <LI><a href="#[85]">target_set_state_ti</a> from target_reset_ti.o(i.target_set_state_ti) referenced from target_reset_ti.o(.constdata)
 <LI><a href="#[88]">target_set_state_wiznet</a> from target_reset_wiznet.o(i.target_set_state_wiznet) referenced from target_reset_wiznet.o(.constdata)
 <LI><a href="#[74]">target_unlock_sequence</a> from target_reset_kseries.o(i.target_unlock_sequence) referenced 3 times from target_reset_kseries.o(.constdata)
 <LI><a href="#[48]">timer_task_30mS</a> from main.o(i.timer_task_30mS) referenced from main.o(i.main_task)
 <LI><a href="#[68]">uninit</a> from iap_flash_intf.o(i.uninit) referenced from iap_flash_intf.o(.constdata)
 <LI><a href="#[7b]">validate_bin_nvic</a> from target_reset_mimxrt.o(i.validate_bin_nvic) referenced from target_reset_mimxrt.o(.constdata)
 <LI><a href="#[81]">validate_bin_nvic_realtek</a> from target_reset_realtek_rtl8195am.o(i.validate_bin_nvic_realtek) referenced from target_reset_realtek_rtl8195am.o(.constdata)
 <LI><a href="#[83]">validate_bin_nvic_rza</a> from target_reset_rza.o(i.validate_bin_nvic_rza) referenced from target_reset_rza.o(.constdata)
 <LI><a href="#[86]">validate_bin_nvic_ti</a> from target_reset_ti.o(i.validate_bin_nvic_ti) referenced from target_reset_ti.o(.constdata)
 <LI><a href="#[84]">validate_hexfile_rza</a> from target_reset_rza.o(i.validate_hexfile_rza) referenced from target_reset_rza.o(.constdata)
 <LI><a href="#[5]">write_bin</a> from file_stream.o(i.write_bin) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[72]">write_dir</a> from virtual_fs.o(i.write_dir) referenced from virtual_fs.o(.constdata)
 <LI><a href="#[9]">write_hex</a> from file_stream.o(i.write_hex) referenced 2 times from file_stream.o(.data)
 <LI><a href="#[57]">write_none</a> from virtual_fs.o(i.write_none) referenced 3 times from virtual_fs.o(.constdata)
 <LI><a href="#[57]">write_none</a> from virtual_fs.o(i.write_none) referenced from virtual_fs.o(i.vfs_create_file)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[91]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[273]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[274]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[275]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[276]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[277]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[278]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[279]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[27b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[27d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[27e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[27f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[280]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[281]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[282]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[283]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[284]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[285]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[286]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[287]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[288]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[289]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[28d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[28e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[28f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[290]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[291]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[292]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[293]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[294]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[295]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[97]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[296]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sdk_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[297]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[298]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[224]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[299]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[207]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[29a]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[29b]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SVC_Handler &rArr; rt_stk_check &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[29d]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic_ti
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic_realtek
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dir
</UL>

<P><STRONG><a name="[b9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Info
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_string_descriptor
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_need_bl_txt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_mbed_htm
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_assert
</UL>

<P><STRONG><a name="[22e]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_type_from_name
</UL>

<P><STRONG><a name="[15c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_unique_id
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WebUSB_ReqToDevice
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_execute_buf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Info
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_need_bl_txt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_mbed_htm
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_data
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex_blob
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_assert
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dir
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mbr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fat
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dir
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataRead
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report_trigger
</UL>

<P><STRONG><a name="[a7]"></a>__rt_memcpy</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[29e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[a9]"></a>__rt_memmove</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[29f]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_next_sector
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_current_block
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_uninit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex_blob
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32_zp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_mbed_htm
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_hex_parser
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex_blob
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_assert
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_clear_assert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_zero
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dir
</UL>

<P><STRONG><a name="[ae]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ad]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_open
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_unique_id
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
</UL>

<P><STRONG><a name="[2a3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_uninit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page_min_size
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector_size
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_algo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_family_id
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_algo_valid
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_total_size
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_size
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_is_at_end
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_TestUnitReady
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ServiceActionIn16
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RWSetup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ATAPassThrough
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ClrStallEP
</UL>

<P><STRONG><a name="[2a5]"></a>__rt_uread4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_add_hexdump
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortGetLineCoding
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ServiceActionIn16
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ATAPassThrough
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
</UL>

<P><STRONG><a name="[2a6]"></a>__rt_uwrite4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ab]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[2ac]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ad]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>DAP_ExecuteCommand</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dap.o(i.DAP_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_execute_buf
</UL>

<P><STRONG><a name="[b5]"></a>DAP_ProcessCommand</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, dap.o(i.DAP_ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommandEx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_od_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Clock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_TransferBlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Transfer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Sequence
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ExecuteCommand
</UL>

<P><STRONG><a name="[ba]"></a>DAP_ProcessVendorCommand</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, dap_vendor.o(i.DAP_ProcessVendorCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_close
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_usb_set_test_mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_set_page_erase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_auto_rst
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_unique_id
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[bb]"></a>DAP_ProcessVendorCommandEx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dap.o(i.DAP_ProcessVendorCommandEx))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[d5]"></a>DAP_Setup</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dap.o(i.DAP_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAP_Setup &rArr; DAP_SETUP &rArr; pin_in_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SETUP
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[d6]"></a>DAP_queue_execute_buf</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dap_queue.o(i.DAP_queue_execute_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ExecuteCommand
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKOUT_Event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>

<P><STRONG><a name="[117]"></a>DAP_queue_get_send_buf</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dap_queue.o(i.DAP_queue_get_send_buf))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKIN_Event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_packet
</UL>

<P><STRONG><a name="[256]"></a>DAP_queue_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dap_queue.o(i.DAP_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_bulk_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
</UL>

<P><STRONG><a name="[135]"></a>EP_Reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.EP_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>

<P><STRONG><a name="[136]"></a>EP_Status</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbd_stm32f103.o(i.EP_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
</UL>

<P><STRONG><a name="[d7]"></a>EraseSector</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, flash.o(i.EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>

<P><STRONG><a name="[e0]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[db]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[de]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d9]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[da]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[e1]"></a>HAL_FLASH_Program</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
</UL>

<P><STRONG><a name="[d8]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_msc_led
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_hid_led
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_cdc_led
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[dc]"></a>HAL_GetTick</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sdk.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[e4]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_InitTick</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sdk.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1402 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
</UL>

<P><STRONG><a name="[ff]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
</UL>

<P><STRONG><a name="[fe]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, hardfault_handler.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_add_hexdump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.Init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_init
</UL>

<P><STRONG><a name="[105]"></a>JTAG2SWD</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, swd_host.o(i.JTAG2SWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = JTAG2SWD &rArr; swd_read_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[10b]"></a>ProgramPage</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flash.o(i.ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>

<P><STRONG><a name="[d3]"></a>SWD_Sequence</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, sw_dp.o(i.SWD_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SWD_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Sequence
</UL>

<P><STRONG><a name="[c5]"></a>SWD_Transfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sw_dp.o(i.SWD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferSlow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferFast
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_TransferBlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Transfer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
</UL>

<P><STRONG><a name="[c1]"></a>SWJ_Sequence</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, sw_dp.o(i.SWJ_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SWJ_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset
</UL>

<P><STRONG><a name="[22b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f1xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cortex_m.o(i.SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>

<P><STRONG><a name="[f1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[fc]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[f4]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART2_IRQHandler &rArr; circ_buf_write &rArr; circ_buf_push &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>USBD_BULK_EP_BULKIN_Event</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_bulk.o(i.USBD_BULK_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_BULK_EP_BULKIN_Event &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_get_send_buf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULK_Event
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[119]"></a>USBD_BULK_EP_BULKOUT_Event</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_bulk.o(i.USBD_BULK_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USBD_BULK_EP_BULKOUT_Event &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_execute_buf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKIN_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULK_Event
</UL>

<P><STRONG><a name="[8c]"></a>USBD_BULK_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_bulk.o(i.USBD_BULK_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = USBD_BULK_EP_BULK_Event &rArr; USBD_BULK_EP_BULKOUT_Event &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKOUT_Event
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>USBD_CDC_ACM_ClearCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_ClearCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[19a]"></a>USBD_CDC_ACM_DataFree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataFree))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[11b]"></a>USBD_CDC_ACM_DataRead</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_ACM_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[121]"></a>USBD_CDC_ACM_DataReceived</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[11c]"></a>USBD_CDC_ACM_DataSend</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_DataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_ACM_DataSend
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[11d]"></a>USBD_CDC_ACM_EP_BULKIN_Event</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[11f]"></a>USBD_CDC_ACM_EP_BULKOUT_Event</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_Event &rArr; USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULK_Event
</UL>

<P><STRONG><a name="[8f]"></a>USBD_CDC_ACM_EP_BULK_Event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_ACM_EP_BULK_Event &rArr; USBD_CDC_ACM_EP_BULKIN_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>USBD_CDC_ACM_EP_INTIN_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_INTIN_Event))
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>USBD_CDC_ACM_GetCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[151]"></a>USBD_CDC_ACM_GetEncapsulatedResponse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetEncapsulatedResponse))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[122]"></a>USBD_CDC_ACM_GetLineCoding</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_GetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_ACM_GetLineCoding &rArr; USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[124]"></a>USBD_CDC_ACM_Initialize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_CDC_ACM_Initialize &rArr; USBD_CDC_ACM_PortInitialize &rArr; main_cdc_send_event &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[c6]"></a>USBD_CDC_ACM_PortGetLineCoding</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortGetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_ACM_PortGetLineCoding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
</UL>

<P><STRONG><a name="[126]"></a>USBD_CDC_ACM_PortInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CDC_ACM_PortInitialize &rArr; main_cdc_send_event &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cdc_send_event
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
</UL>

<P><STRONG><a name="[129]"></a>USBD_CDC_ACM_PortReset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_ACM_PortReset &rArr; uart_reset &rArr; clear_buffers
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[132]"></a>USBD_CDC_ACM_PortSetControlLineState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortSetControlLineState))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
</UL>

<P><STRONG><a name="[c7]"></a>USBD_CDC_ACM_PortSetLineCoding</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_PortSetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>

<P><STRONG><a name="[12c]"></a>USBD_CDC_ACM_Reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>

<P><STRONG><a name="[12d]"></a>USBD_CDC_ACM_Reset_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
</UL>

<P><STRONG><a name="[12e]"></a>USBD_CDC_ACM_SOF_Event</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_ACM_SOF_Event &rArr; USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataReceived
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[c8]"></a>USBD_CDC_ACM_SendBreak</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_user_cdc_acm.o(i.USBD_CDC_ACM_SendBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_reset_target
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[14e]"></a>USBD_CDC_ACM_SendEncapsulatedCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SendEncapsulatedCommand))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[14f]"></a>USBD_CDC_ACM_SetCommFeature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetCommFeature))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[131]"></a>USBD_CDC_ACM_SetControlLineState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetControlLineState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_ACM_SetControlLineState
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetControlLineState
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[133]"></a>USBD_CDC_ACM_SetLineCoding</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_SetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_CDC_ACM_SetLineCoding &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[134]"></a>USBD_ClrStallEP</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usbd_stm32f103.o(i.USBD_ClrStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[18d]"></a>USBD_ConfigEP</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, usbd_stm32f103.o(i.USBD_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[18c]"></a>USBD_Configure</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[90]"></a>USBD_Configure_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_config.o(i.USBD_Configure_Event))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Configure_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[25a]"></a>USBD_Connect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[138]"></a>USBD_DataInStage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_DataInStage &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WinUSB_ReqToDevice
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WebUSB_ReqToDevice
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
</UL>

<P><STRONG><a name="[139]"></a>USBD_DataOutStage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_DataOutStage &rArr; USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[13d]"></a>USBD_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[13a]"></a>USBD_DisableEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_DisableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_DisableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[13b]"></a>USBD_EnableEP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_EnableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EnableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[8b]"></a>USBD_EndPoint0</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = USBD_EndPoint0 &rArr; USBD_EndPoint0_Out_HID_ReqToIF &rArr; USBD_HID_SetReport &rArr; usbd_hid_set_report &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DirCtrlEP
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WinUSB_ReqToDevice
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WebUSB_ReqToDevice
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>USBD_EndPoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Out_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_EndPoint0_Out_CDC_ReqToIF &rArr; USBD_CDC_ACM_SetLineCoding &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetLineCoding
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetCommFeature
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendEncapsulatedCommand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[14b]"></a>USBD_EndPoint0_Out_HID_ReqToIF</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Out_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USBD_EndPoint0_Out_HID_ReqToIF &rArr; USBD_HID_SetReport &rArr; usbd_hid_set_report &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[147]"></a>USBD_EndPoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbd_core_cdc.o(i.USBD_EndPoint0_Setup_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_EndPoint0_Setup_CDC_ReqToIF &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SetControlLineState
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetLineCoding
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetEncapsulatedResponse
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_GetCommFeature
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_ClearCommFeature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[145]"></a>USBD_EndPoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_core_hid.o(i.USBD_EndPoint0_Setup_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_EndPoint0_Setup_HID_ReqToIF &rArr; USBD_HID_GetReport &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetIdle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetIdle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[146]"></a>USBD_EndPoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbd_core_msc.o(i.USBD_EndPoint0_Setup_MSC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Setup_MSC_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetMaxLUN
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[148]"></a>USBD_EndPoint0_Setup_WebUSB_ReqToDevice</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbd_core_webusb.o(i.USBD_EndPoint0_Setup_WebUSB_ReqToDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_EndPoint0_Setup_WebUSB_ReqToDevice &rArr; USBD_DataInStage &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_board_id
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[149]"></a>USBD_EndPoint0_Setup_WinUSB_ReqToDevice</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbd_core_winusb.o(i.USBD_EndPoint0_Setup_WinUSB_ReqToDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EndPoint0_Setup_WinUSB_ReqToDevice &rArr; USBD_DataInStage &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[137]"></a>USBD_HID_Configure_Event</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure_Event
</UL>

<P><STRONG><a name="[15d]"></a>USBD_HID_EP_INTIN_Event</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, usbd_hid.o(i.USBD_HID_EP_INTIN_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_HID_EP_INTIN_Event &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report_trigger
</UL>

<P><STRONG><a name="[155]"></a>USBD_HID_GetIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_GetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[157]"></a>USBD_HID_GetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_GetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[154]"></a>USBD_HID_GetReport</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_HID_GetReport &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[160]"></a>USBD_HID_SOF_Event</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, usbd_hid.o(i.USBD_HID_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF_Event
</UL>

<P><STRONG><a name="[156]"></a>USBD_HID_SetIdle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_SetIdle))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[158]"></a>USBD_HID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_hid.o(i.USBD_HID_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_SetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[150]"></a>USBD_HID_SetReport</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_hid.o(i.USBD_HID_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USBD_HID_SetReport &rArr; usbd_hid_set_report &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
</UL>

<P><STRONG><a name="[163]"></a>USBD_Handler</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, usbd_stm32f103.o(i.USBD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_core
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WakeUp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Suspend
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[168]"></a>USBD_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_stm32f103.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[16a]"></a>USBD_MSC_ATAPassThrough</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_ATAPassThrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_ATAPassThrough &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[16c]"></a>USBD_MSC_BulkIn</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_BulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_MSC_BulkIn &rArr; USBD_MSC_MemoryRead &rArr; usbd_msc_read_sect &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EP_BULK_Event
</UL>

<P><STRONG><a name="[170]"></a>USBD_MSC_BulkOut</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_BulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_MSC_BulkOut &rArr; USBD_MSC_MemoryWrite &rArr; usbd_msc_write_sect &rArr; file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[174]"></a>USBD_MSC_CheckMedia</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_CheckMedia))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_MSC_CheckMedia &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_TestUnitReady
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RWSetup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
</UL>

<P><STRONG><a name="[175]"></a>USBD_MSC_ClrStallEP</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_ClrStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_MSC_ClrStallEP &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqClrFeature_MSC
</UL>

<P><STRONG><a name="[16b]"></a>USBD_MSC_DataInFormat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_DataInFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ServiceActionIn16
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ATAPassThrough
</UL>

<P><STRONG><a name="[176]"></a>USBD_MSC_DataInTransfer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_DataInTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_MSC_DataInTransfer &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
</UL>

<P><STRONG><a name="[177]"></a>USBD_MSC_EP_BULKOUT_Event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_EP_BULKOUT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBD_MSC_EP_BULKOUT_Event &rArr; USBD_MSC_BulkOut &rArr; USBD_MSC_MemoryWrite &rArr; usbd_msc_write_sect &rArr; file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EP_BULK_Event
</UL>

<P><STRONG><a name="[8d]"></a>USBD_MSC_EP_BULK_Event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_EP_BULK_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBD_MSC_EP_BULK_Event &rArr; USBD_MSC_EP_BULKOUT_Event &rArr; USBD_MSC_BulkOut &rArr; USBD_MSC_MemoryWrite &rArr; usbd_msc_write_sect &rArr; file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EP_BULKOUT_Event
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>USBD_MSC_GetCBW</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, usbd_msc.o(i.USBD_MSC_GetCBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_MSC_GetCBW &rArr; USBD_MSC_MemoryRead &rArr; usbd_msc_read_sect &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_TestUnitReady
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SynchronizeCache
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ServiceActionIn16
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RWSetup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MediaRemoval
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ATAPassThrough
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
</UL>

<P><STRONG><a name="[15a]"></a>USBD_MSC_GetMaxLUN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetMaxLUN))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
</UL>

<P><STRONG><a name="[179]"></a>USBD_MSC_Inquiry</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_MSC_Inquiry &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[17a]"></a>USBD_MSC_MediaRemoval</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_MediaRemoval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_MSC_MediaRemoval &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[16d]"></a>USBD_MSC_MemoryRead</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_MemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_MSC_MemoryRead &rArr; usbd_msc_read_sect &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_read_sect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkIn
</UL>

<P><STRONG><a name="[172]"></a>USBD_MSC_MemoryVerify</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_MemoryVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_MSC_MemoryVerify &rArr; usbd_msc_read_sect &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_read_sect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
</UL>

<P><STRONG><a name="[171]"></a>USBD_MSC_MemoryWrite</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_MSC_MemoryWrite &rArr; usbd_msc_write_sect &rArr; file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_write_sect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
</UL>

<P><STRONG><a name="[180]"></a>USBD_MSC_ModeSense10</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_ModeSense10 &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[17f]"></a>USBD_MSC_ModeSense6</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_ModeSense6 &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[17c]"></a>USBD_MSC_RWSetup</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_RWSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_RWSetup &rArr; USBD_MSC_CheckMedia &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[182]"></a>USBD_MSC_ReadCapacity</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_MSC_ReadCapacity &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[181]"></a>USBD_MSC_ReadFormatCapacity</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_ReadFormatCapacity &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[178]"></a>USBD_MSC_RequestSense</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_MSC_RequestSense &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[159]"></a>USBD_MSC_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_MSC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset_Event
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
</UL>

<P><STRONG><a name="[186]"></a>USBD_MSC_Reset_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_MSC_Reset_Event &rArr; USBD_MSC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset_Event
</UL>

<P><STRONG><a name="[183]"></a>USBD_MSC_ServiceActionIn16</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_ServiceActionIn16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_MSC_ServiceActionIn16 &rArr; USBD_MSC_DataInFormat &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[16e]"></a>USBD_MSC_SetCSW</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_SetCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_TestUnitReady
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SynchronizeCache
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RWSetup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MediaRemoval
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkIn
</UL>

<P><STRONG><a name="[16f]"></a>USBD_MSC_SetStallEP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_SetStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_MSC_SetStallEP &rArr; USBD_SetStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_TestUnitReady
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RWSetup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInFormat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkIn
</UL>

<P><STRONG><a name="[17e]"></a>USBD_MSC_StartStopUnit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_StartStopUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_MSC_StartStopUnit &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_start_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[17b]"></a>USBD_MSC_SynchronizeCache</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_SynchronizeCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_MSC_SynchronizeCache &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[17d]"></a>USBD_MSC_TestUnitReady</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_MSC_TestUnitReady &rArr; USBD_MSC_CheckMedia &rArr; USBD_MSC_SetCSW &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[25d]"></a>USBD_RTX_TaskInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_config.o(i.USBD_RTX_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[11a]"></a>USBD_ReadEP</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_stm32f103.o(i.USBD_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_HandleData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKOUT_Event
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EP_BULKOUT_Event
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[188]"></a>USBD_ReqClrFeature_MSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core_msc.o(i.USBD_ReqClrFeature_MSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_ReqClrFeature_MSC &rArr; USBD_MSC_ClrStallEP &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ClrStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[18a]"></a>USBD_ReqGetDescriptor_HID</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_core_hid.o(i.USBD_ReqGetDescriptor_HID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[164]"></a>USBD_Reset</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[18e]"></a>USBD_ResetEP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_ResetEP))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[89]"></a>USBD_Reset_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_Reset_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_Reset_Event &rArr; USBD_CDC_ACM_Reset_Event &rArr; USBD_CDC_ACM_Reset &rArr; USBD_CDC_ACM_PortSetLineCoding &rArr; uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset_Event
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Reset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>USBD_SOF_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_config.o(i.USBD_SOF_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_SOF_Event &rArr; USBD_HID_SOF_Event &rArr; USBD_HID_EP_INTIN_Event &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SOF_Event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_config.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[14a]"></a>USBD_SetStallEP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_SetStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SetStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
</UL>

<P><STRONG><a name="[13c]"></a>USBD_SetupStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_SetupStage &rArr; USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[18f]"></a>USBD_SignalHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.USBD_SignalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_SignalHandler &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>USBD_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_StatusInStage &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_MSC_ReqToIF
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_HID_ReqToIF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_CDC_ReqToIF
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_HID_ReqToIF
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Out_CDC_ReqToIF
</UL>

<P><STRONG><a name="[14d]"></a>USBD_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[166]"></a>USBD_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[167]"></a>USBD_WakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_WakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[18b]"></a>USBD_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.USBD_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[118]"></a>USBD_WriteEP</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, usbd_stm32f103.o(i.USBD_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_HandleData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_BULK_EP_BULKIN_Event
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ServiceActionIn16
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ATAPassThrough
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ClrStallEP
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[29]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usbd_stm32f103.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USBD_SignalHandler &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat_enque
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24f]"></a>UnInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.UnInit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[223]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[92]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_config.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>

<P><STRONG><a name="[93]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_config.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>

<P><STRONG><a name="[103]"></a>_util_assert</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, util.o(i._util_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_close
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector_size
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_string
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_total_size
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_file_info
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_data
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_for_state_change
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_page
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_sector_erase
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_erase_and_program
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_next_sector
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_uninit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_open
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_close
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hex
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_thread_assert
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dir
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_packet
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOut
</UL>

<P><STRONG><a name="[1f7]"></a>bootloader_check_and_update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bootloader_update.o(i.bootloader_check_and_update))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[199]"></a>cdc_process_event</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, usbd_user_cdc_acm.o(i.cdc_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cdc_process_event &rArr; uart_write_data &rArr; circ_buf_write &rArr; circ_buf_push &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cdc_send_event
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blink_cdc_led
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_DataFree
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[111]"></a>circ_buf_count_free</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, circ_buf.o(i.circ_buf_count_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circ_buf_count_free
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_free
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>circ_buf_count_used</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, circ_buf.o(i.circ_buf_count_used))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>circ_buf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, circ_buf.o(i.circ_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
</UL>

<P><STRONG><a name="[115]"></a>circ_buf_pop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, circ_buf.o(i.circ_buf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = circ_buf_pop &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>circ_buf_push</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, circ_buf.o(i.circ_buf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = circ_buf_push &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>circ_buf_read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = circ_buf_read &rArr; circ_buf_pop &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_pop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_used
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_data
</UL>

<P><STRONG><a name="[113]"></a>circ_buf_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, circ_buf.o(i.circ_buf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = circ_buf_write &rArr; circ_buf_push &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_push
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_data
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>config_get_auto_rst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings_rom.o(i.config_get_auto_rst))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_uninit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1cd]"></a>config_get_automation_allowed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings_rom.o(i.config_get_automation_allowed))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
</UL>

<P><STRONG><a name="[250]"></a>config_get_overflow_detect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings_rom.o(i.config_get_overflow_detect))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1a1]"></a>config_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, settings.o(i.config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = config_init &rArr; config_rom_init &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[102]"></a>config_ram_add_hexdump</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, settings.o(i.config_ram_add_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_ram_add_hexdump
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>config_ram_clear_assert</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, settings.o(i.config_ram_clear_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_ram_clear_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_assert_clear
</UL>

<P><STRONG><a name="[192]"></a>config_ram_get_assert</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, settings.o(i.config_ram_get_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[1fb]"></a>config_ram_get_disable_msd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(i.config_ram_get_disable_msd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[20d]"></a>config_ram_get_hexdumps</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, settings.o(i.config_ram_get_hexdumps))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_assert_txt
</UL>

<P><STRONG><a name="[26d]"></a>config_ram_get_hold_in_bl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(i.config_ram_get_hold_in_bl))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
</UL>

<P><STRONG><a name="[251]"></a>config_ram_get_page_erase</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(i.config_ram_get_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[193]"></a>config_ram_set_assert</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, settings.o(i.config_ram_set_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_ram_set_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_bootloader
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>

<P><STRONG><a name="[272]"></a>config_ram_set_disable_msd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(i.config_ram_set_disable_msd))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[271]"></a>config_ram_set_hold_in_bl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.config_ram_set_hold_in_bl))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1d7]"></a>config_ram_set_page_erase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(i.config_ram_set_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_set_page_erase
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1a3]"></a>config_rom_init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, settings_rom.o(i.config_rom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = config_rom_init &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[1a9]"></a>config_set_auto_rst</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings_rom.o(i.config_set_auto_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = config_set_auto_rst &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1aa]"></a>config_set_automation_allowed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings_rom.o(i.config_set_automation_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = config_set_automation_allowed &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1ab]"></a>config_set_overflow_detect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, settings_rom.o(i.config_set_overflow_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = config_set_overflow_detect &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1ac]"></a>crc32</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, crc32.o(i.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc32 &rArr; reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_crc_compute
</UL>

<P><STRONG><a name="[1ae]"></a>crc32_continue</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, crc32.o(i.crc32_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc32_continue &rArr; reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
</UL>

<P><STRONG><a name="[1a5]"></a>daplink_is_bootloader</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, daplink.o(i.daplink_is_bootloader))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
</UL>

<P><STRONG><a name="[1a6]"></a>daplink_is_interface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, daplink.o(i.daplink_is_interface))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_sector_erase
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_assert
</UL>

<P><STRONG><a name="[1b5]"></a>error_get_string</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, error.o(i.error_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_get_string &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_fail_txt
</UL>

<P><STRONG><a name="[211]"></a>error_get_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, error.o(i.error_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_fail_txt
</UL>

<P><STRONG><a name="[1c9]"></a>flash_algo_valid</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, target_board.o(i.flash_algo_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_algo_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[1a0]"></a>flash_decoder_close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash_decoder.o(i.flash_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = flash_decoder_close &rArr; flash_manager_uninit &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_hex
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_bin
</UL>

<P><STRONG><a name="[1b2]"></a>flash_decoder_detect_type</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, flash_decoder.o(i.flash_decoder_detect_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_decoder_detect_type &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_bin
</UL>

<P><STRONG><a name="[1cc]"></a>flash_decoder_get_flash</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, flash_decoder.o(i.flash_decoder_get_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flash_decoder_get_flash &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_bootloader
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_automation_allowed
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin
</UL>

<P><STRONG><a name="[1cf]"></a>flash_decoder_open</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, flash_decoder.o(i.flash_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = flash_decoder_open &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hex
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_bin
</UL>

<P><STRONG><a name="[1d0]"></a>flash_decoder_write</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, flash_decoder.o(i.flash_decoder_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = flash_decoder_write &rArr; flash_manager_data &rArr; setup_next_sector &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_data
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_is_at_end
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hex
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin
</UL>

<P><STRONG><a name="[1b0]"></a>flash_erase_sector</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_hal.o(i.flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_erase_sector &rArr; EraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_erase_and_program
</UL>

<P><STRONG><a name="[1d2]"></a>flash_manager_data</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, flash_manager.o(i.flash_manager_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = flash_manager_data &rArr; setup_next_sector &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_next_sector
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_current_block
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
</UL>

<P><STRONG><a name="[1d1]"></a>flash_manager_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, flash_manager.o(i.flash_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = flash_manager_init &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
</UL>

<P><STRONG><a name="[d1]"></a>flash_manager_set_page_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_manager.o(i.flash_manager_set_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_manager_set_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1ca]"></a>flash_manager_uninit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, flash_manager.o(i.flash_manager_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = flash_manager_uninit &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_current_block
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_close
</UL>

<P><STRONG><a name="[1b1]"></a>flash_program_page</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_hal.o(i.flash_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_page
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_erase_and_program
</UL>

<P><STRONG><a name="[1d8]"></a>get_board_id</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, target_board.o(i.get_board_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_board_id
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
</UL>

<P><STRONG><a name="[1d9]"></a>get_family_id</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, target_board.o(i.get_family_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_family_id
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_family
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
</UL>

<P><STRONG><a name="[205]"></a>gpio_get_reset_btn_fwrd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.gpio_get_reset_btn_fwrd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[26f]"></a>gpio_get_reset_btn_no_fwrd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.gpio_get_reset_btn_no_fwrd))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[1db]"></a>gpio_init</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gpio_init &rArr; output_clock_enable &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[202]"></a>gpio_set_board_power</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_board_power))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1df]"></a>gpio_set_cdc_led</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_cdc_led))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1e0]"></a>gpio_set_hid_led</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_hid_led))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1e1]"></a>gpio_set_msc_led</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.gpio_set_msc_led))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1e2]"></a>hid_send_packet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_user_hid.o(i.hid_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hid_send_packet &rArr; usbd_hid_get_report_trigger &rArr; USBD_HID_EP_INTIN_Event &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_get_send_buf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_get_report_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>

<P><STRONG><a name="[1e4]"></a>info_crc_compute</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, info.o(i.info_crc_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = info_crc_compute &rArr; crc32 &rArr; reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_page
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
</UL>

<P><STRONG><a name="[15b]"></a>info_get_board_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_board_id))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0_Setup_WebUSB_ReqToDevice
</UL>

<P><STRONG><a name="[1e6]"></a>info_get_bootloader_present</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, info.o(i.info_get_bootloader_present))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_bootloader_version
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1e5]"></a>info_get_bootloader_version</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, info.o(i.info_get_bootloader_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = info_get_bootloader_version
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_bootloader_present
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[253]"></a>info_get_crc_bootloader</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info.o(i.info_get_crc_bootloader))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[254]"></a>info_get_crc_interface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info.o(i.info_get_crc_interface))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1bb]"></a>info_get_hic_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_hic_id))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[1b9]"></a>info_get_host_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_host_id))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[1e8]"></a>info_get_interface_present</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, info.o(i.info_get_interface_present))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_interface_version
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1e7]"></a>info_get_interface_version</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, info.o(i.info_get_interface_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = info_get_interface_version
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_interface_present
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1b8]"></a>info_get_mac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_mac))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[1ba]"></a>info_get_target_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_target_id))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[b7]"></a>info_get_unique_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_unique_id))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[189]"></a>info_get_unique_id_string_descriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_unique_id_string_descriptor))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[b8]"></a>info_get_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, info.o(i.info_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
</UL>

<P><STRONG><a name="[1e9]"></a>info_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, info.o(i.info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = info_init &rArr; info_crc_compute &rArr; crc32 &rArr; reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_unique_id
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_crc_compute
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_unique_id
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_string_descriptor
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1ee]"></a>init_family</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, target_family.o(i.init_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_family &rArr; get_family_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_family_id
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[23f]"></a>int2array</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, swd_host.o(i.int2array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_block
</UL>

<P><STRONG><a name="[1f0]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[9c]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; sdk_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19b]"></a>main_blink_cdc_led</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main_blink_cdc_led))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[25c]"></a>main_blink_hid_led</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main_blink_hid_led))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>

<P><STRONG><a name="[25f]"></a>main_blink_msc_led</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main_blink_msc_led))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_write_sect
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_read_sect
</UL>

<P><STRONG><a name="[128]"></a>main_cdc_send_event</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main_cdc_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main_cdc_send_event &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>

<P><STRONG><a name="[130]"></a>main_reset_target</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main_reset_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main_reset_target &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
</UL>

<P><STRONG><a name="[47]"></a>main_task</STRONG> (Thumb, 660 bytes, Stack size 0 bytes, main.o(i.main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; usbd_init &rArr; usbd_class_init &rArr; usbd_msc_init &rArr; build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_check_and_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_set_page_erase
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_enable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configured
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_reset_connect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_family
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_msc_led
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_hid_led
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_cdc_led
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_board_power
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_reset_btn_fwrd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_disable_msd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[cb]"></a>main_usb_set_test_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.main_usb_set_test_mode))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
</UL>

<P><STRONG><a name="[201]"></a>osDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_wiznet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug_tz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug
</UL>

<P><STRONG><a name="[12f]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osKernelGetSysTimerCount))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
</UL>

<P><STRONG><a name="[1f4]"></a>osKernelInitialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>osKernelStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>osMutexAcquire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_lock
</UL>

<P><STRONG><a name="[25e]"></a>osMutexNew</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init
</UL>

<P><STRONG><a name="[24c]"></a>osMutexRelease</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_unlock
</UL>

<P><STRONG><a name="[190]"></a>osThreadFlagsSet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmsis_os2_port.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task_30mS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_reset_target
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_cdc_send_event
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalHandler
</UL>

<P><STRONG><a name="[200]"></a>osThreadFlagsWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1f8]"></a>osThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_open
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_thread_assert
</UL>

<P><STRONG><a name="[1f5]"></a>osThreadNew</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cmsis_os2_port.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>osTimerNew</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1ff]"></a>osTimerStart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[208]"></a>os_error</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_config.o(i.os_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[53]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_idle_demon))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[226]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[a6]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[229]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.os_tmr_call))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[209]"></a>parse_hex_blob</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, intelhex.o(i.parse_hex_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = parse_hex_blob
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctoh
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hex
</UL>

<P><STRONG><a name="[1ea]"></a>read_unique_id</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, read_uid.o(i.read_unique_id))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
</UL>

<P><STRONG><a name="[206]"></a>reset_hex_parser</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, intelhex.o(i.reset_hex_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_hex_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_hex
</UL>

<P><STRONG><a name="[40]"></a>rt_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[213]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_itv_wait
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[227]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.rt_chk_robin))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[217]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[219]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[49]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osDelay)
</UL>
<P><STRONG><a name="[4e]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_get))
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[21b]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4c]"></a>rt_evt_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[4d]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[41]"></a>rt_free_box</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[215]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[225]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[21e]"></a>rt_init_stack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[54]"></a>rt_itv_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_time.o(i.rt_itv_set))
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.rt_timer_task)
</UL>
<P><STRONG><a name="[55]"></a>rt_itv_wait</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_time.o(i.rt_itv_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_itv_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.rt_timer_task)
</UL>
<P><STRONG><a name="[21f]"></a>rt_mbx_psh</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mbx_psh &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4b]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[45]"></a>rt_mut_release</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmsis_os2_port.o(i.osMutexRelease)
<LI> rtx_config.o(i._mutex_release)
</UL>
<P><STRONG><a name="[44]"></a>rt_mut_wait</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmsis_os2_port.o(i.osMutexAcquire)
<LI> rtx_config.o(i._mutex_acquire)
</UL>
<P><STRONG><a name="[a3]"></a>rt_pop_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1f2]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[1f1]"></a>rt_psq_enq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[214]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[218]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[21a]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[220]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[21c]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[222]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[221]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[a2]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_stk_check &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[216]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[51]"></a>rt_sys_init</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[a4]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4a]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_time_get))
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[228]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[50]"></a>rt_tsk_create</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmsis_os2_port.o(i.osThreadNew)
<LI> cmsis_os2_port.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[4f]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[1f3]"></a>sdk_init</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, sdk.o(i.sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sdk_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>stream_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, file_stream.o(i.stream_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_thread_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_data
</UL>

<P><STRONG><a name="[ce]"></a>stream_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, file_stream.o(i.stream_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stream_open &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_open
</UL>

<P><STRONG><a name="[1c5]"></a>stream_start_identify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, file_stream.o(i.stream_start_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stream_start_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_data_handler
</UL>

<P><STRONG><a name="[1bf]"></a>stream_type_from_name</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, file_stream.o(i.stream_type_from_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stream_type_from_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[d0]"></a>stream_write</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, file_stream.o(i.stream_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stream_write &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_thread_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_data
</UL>

<P><STRONG><a name="[22f]"></a>swd_clear_errors</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, swd_host.o(i.swd_clear_errors))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[1d4]"></a>swd_flash_syscall_exec</STRONG> (Thumb, 166 bytes, Stack size 104 bytes, swd_host.o(i.swd_flash_syscall_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_core_register
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
</UL>

<P><STRONG><a name="[237]"></a>swd_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, swd_host.o(i.swd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = swd_init &rArr; DAP_Setup &rArr; DAP_SETUP &rArr; pin_in_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[238]"></a>swd_init_debug</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, swd_host.o(i.swd_init_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_clear_errors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_wiznet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
</UL>

<P><STRONG><a name="[23a]"></a>swd_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, swd_host.o(i.swd_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swd_off &rArr; pin_in_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_uninit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_wiznet
</UL>

<P><STRONG><a name="[23b]"></a>swd_read_ap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = swd_read_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_get_apsel
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
</UL>

<P><STRONG><a name="[240]"></a>swd_read_byte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = swd_read_byte &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_memory
</UL>

<P><STRONG><a name="[233]"></a>swd_read_core_register</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, swd_host.o(i.swd_read_core_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_read_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[107]"></a>swd_read_dp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = swd_read_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[242]"></a>swd_read_memory</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, swd_host.o(i.swd_read_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = swd_read_memory &rArr; swd_read_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_byte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
</UL>

<P><STRONG><a name="[232]"></a>swd_read_word</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = swd_read_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_core_register
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_core_register
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[1f9]"></a>swd_set_reset_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_host.o(i.swd_set_reset_connect))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[24e]"></a>swd_set_soft_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swd_host.o(i.swd_set_soft_reset))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_ti
</UL>

<P><STRONG><a name="[239]"></a>swd_set_target_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, target_family.o(i.swd_set_target_reset))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_wiznet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug_tz
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_before_init_debug
</UL>

<P><STRONG><a name="[244]"></a>swd_set_target_state_hw</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, swd_host.o(i.swd_set_target_state_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = swd_set_target_state_hw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_off
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_clear_errors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_rza
</UL>

<P><STRONG><a name="[245]"></a>swd_set_target_state_sw</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, swd_host.o(i.swd_set_target_state_sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_off
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_clear_errors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_wiznet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_ti
</UL>

<P><STRONG><a name="[23c]"></a>swd_transfer_retry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swd_host.o(i.swd_transfer_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_block
</UL>

<P><STRONG><a name="[23e]"></a>swd_write_ap</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_get_apsel
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_block
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_unlock_sequence
</UL>

<P><STRONG><a name="[247]"></a>swd_write_byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = swd_write_byte &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[249]"></a>swd_write_core_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_core_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[230]"></a>swd_write_dp</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_clear_errors
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
</UL>

<P><STRONG><a name="[243]"></a>swd_write_memory</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state_ti
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_nrf
</UL>

<P><STRONG><a name="[234]"></a>swd_write_word</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_core_register
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_core_register
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_debug_state
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset_realtek
</UL>

<P><STRONG><a name="[236]"></a>target_get_apsel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, target_family.o(i.target_get_apsel))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_get_apsel
</UL>

<P><STRONG><a name="[cd]"></a>target_set_state</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, target_family.o(i.target_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_soft_reset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_uninit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prerun_target_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SendBreak
</UL>

<P><STRONG><a name="[48]"></a>timer_task_30mS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.timer_task_30mS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer_task_30mS &rArr; osThreadFlagsSet &rArr; isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_task)
</UL>
<P><STRONG><a name="[127]"></a>uart_initialize</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, uart.o(i.uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortInitialize
</UL>

<P><STRONG><a name="[c9]"></a>uart_read_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.uart_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_read_data &rArr; circ_buf_read &rArr; circ_buf_pop &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[12a]"></a>uart_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(i.uart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_reset &rArr; clear_buffers
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortReset
</UL>

<P><STRONG><a name="[12b]"></a>uart_set_configuration</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, uart.o(i.uart_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uart_set_configuration &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffers
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_PortSetLineCoding
</UL>

<P><STRONG><a name="[ca]"></a>uart_write_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.uart_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_write_data &rArr; circ_buf_write &rArr; circ_buf_push &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[19c]"></a>uart_write_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_write_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_write_free &rArr; circ_buf_count_free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_count_free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_process_event
</UL>

<P><STRONG><a name="[255]"></a>usbd_bulk_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_bulk.o(i.usbd_bulk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_bulk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[257]"></a>usbd_class_init</STRONG> (Thumb, 314 bytes, Stack size 104 bytes, usb_config.o(i.usbd_class_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = usbd_class_init &rArr; usbd_msc_init &rArr; build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_algo_valid
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_disable_msd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_bulk_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_Initialize
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[204]"></a>usbd_configured</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_configured))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1fd]"></a>usbd_connect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_connect))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[15f]"></a>usbd_hid_get_protocol</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_get_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetProtocol
</UL>

<P><STRONG><a name="[15e]"></a>usbd_hid_get_report</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_user_hid.o(i.usbd_hid_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_get_send_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReport
</UL>

<P><STRONG><a name="[1e3]"></a>usbd_hid_get_report_trigger</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbd_hid.o(i.usbd_hid_get_report_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_hid_get_report_trigger &rArr; USBD_HID_EP_INTIN_Event &rArr; usbd_hid_get_report &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EP_INTIN_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_packet
</UL>

<P><STRONG><a name="[259]"></a>usbd_hid_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_user_hid.o(i.usbd_hid_init))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[25b]"></a>usbd_hid_no_activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_user_hid.o(i.usbd_hid_no_activity))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_set_report
</UL>

<P><STRONG><a name="[161]"></a>usbd_hid_set_protocol</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_hid.o(i.usbd_hid_set_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetProtocol
</UL>

<P><STRONG><a name="[162]"></a>usbd_hid_set_report</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_user_hid.o(i.usbd_hid_set_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = usbd_hid_set_report &rArr; DAP_queue_execute_buf &rArr; DAP_ExecuteCommand &rArr; DAP_ProcessCommand &rArr; DAP_ProcessVendorCommand &rArr; USBD_CDC_ACM_SendBreak &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_queue_execute_buf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blink_hid_led
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_no_activity
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetReport
</UL>

<P><STRONG><a name="[1fa]"></a>usbd_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = usbd_init &rArr; usbd_class_init &rArr; usbd_msc_init &rArr; build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RTX_TaskInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[258]"></a>usbd_msc_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vfs_manager.o(i.usbd_msc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usbd_msc_init &rArr; build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_init
</UL>

<P><STRONG><a name="[184]"></a>usbd_msc_read_sect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vfs_manager.o(i.usbd_msc_read_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usbd_msc_read_sect &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blink_msc_led
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryVerify
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
</UL>

<P><STRONG><a name="[187]"></a>usbd_msc_start_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_msc.o(i.usbd_msc_start_stop))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
</UL>

<P><STRONG><a name="[185]"></a>usbd_msc_write_sect</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, vfs_manager.o(i.usbd_msc_write_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usbd_msc_write_sect &rArr; file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_blink_msc_led
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_data_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
</UL>

<P><STRONG><a name="[165]"></a>usbd_reset_core</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_reset_core))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Handler
</UL>

<P><STRONG><a name="[262]"></a>util_assert_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, util.o(i.util_assert_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_assert_clear &rArr; config_ram_clear_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_clear_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[20e]"></a>util_write_hex32</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, util.o(i.util_write_hex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_write_hex32
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_hex8
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_assert_txt
</UL>

<P><STRONG><a name="[263]"></a>util_write_hex8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i.util_write_hex8))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_hex32
</UL>

<P><STRONG><a name="[20b]"></a>util_write_string</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i.util_write_string))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_fail_txt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_assert_txt
</UL>

<P><STRONG><a name="[20c]"></a>util_write_uint32</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, util.o(i.util_write_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = util_write_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_assert_txt
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32_zp
</UL>

<P><STRONG><a name="[252]"></a>util_write_uint32_zp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, util.o(i.util_write_uint32_zp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = util_write_uint32_zp &rArr; util_write_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>

<P><STRONG><a name="[1cb]"></a>validate_bin_nvic</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, validation.o(i.validate_bin_nvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate_bin_nvic
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_range
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
</UL>

<P><STRONG><a name="[1b3]"></a>validate_hexfile</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, validation.o(i.validate_hexfile))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_hex
</UL>

<P><STRONG><a name="[265]"></a>vfs_create_file</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, virtual_fs.o(i.vfs_create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filename_valid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[1c0]"></a>vfs_file_get_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, virtual_fs.o(i.vfs_file_get_attr))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[1bd]"></a>vfs_file_get_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtual_fs.o(i.vfs_file_get_size))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_start_sector
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[1be]"></a>vfs_file_get_start_sector</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, virtual_fs.o(i.vfs_file_get_start_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vfs_file_get_start_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[26c]"></a>vfs_file_set_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, virtual_fs.o(i.vfs_file_set_attr))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[198]"></a>vfs_get_total_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, virtual_fs.o(i.vfs_get_total_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vfs_get_total_size &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
</UL>

<P><STRONG><a name="[268]"></a>vfs_init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, virtual_fs.o(i.vfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vfs_init &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[1fc]"></a>vfs_mngr_fs_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vfs_manager.o(i.vfs_mngr_fs_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vfs_mngr_fs_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_unlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[194]"></a>vfs_mngr_fs_remount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vfs_manager.o(i.vfs_mngr_fs_remount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vfs_mngr_fs_remount
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_unlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_lock
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changing_state
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
</UL>

<P><STRONG><a name="[210]"></a>vfs_mngr_get_transfer_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vfs_manager.o(i.vfs_mngr_get_transfer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vfs_mngr_get_transfer_status &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_fail_txt
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[203]"></a>vfs_mngr_periodic</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, vfs_manager.o(i.vfs_mngr_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vfs_mngr_periodic &rArr; build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_disconnecting
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_unlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_lock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_assert_usb_thread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_for_state_change
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changing_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[260]"></a>vfs_read</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, virtual_fs.o(i.vfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vfs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_read_sect
</UL>

<P><STRONG><a name="[197]"></a>vfs_set_file_change_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtual_fs.o(i.vfs_set_file_change_callback))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
</UL>

<P><STRONG><a name="[196]"></a>vfs_user_build_filesystem</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, vfs_user.o(i.vfs_user_build_filesystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_set_attr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_size
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_get_transfer_status
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_assert
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_filesystem
</UL>

<P><STRONG><a name="[26a]"></a>vfs_user_disconnecting</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vfs_user.o(i.vfs_user_disconnecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vfs_user_disconnecting &rArr; vfs_mngr_get_transfer_status &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_bootloader
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_disable_msd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_hold_in_bl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_get_transfer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
</UL>

<P><STRONG><a name="[1bc]"></a>vfs_user_file_change_handler</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, vfs_user.o(i.vfs_user_file_change_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vfs_user_file_change_handler &rArr; config_set_overflow_detect &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_automation_allowed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_reset_btn_fwrd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_magic_file_hook
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler_hook
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_reset_btn_no_fwrd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_overflow_detect
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_automation_allowed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_auto_rst
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_hold_in_bl
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_disable_msd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_set_page_erase
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_assert_clear
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[26e]"></a>vfs_user_file_change_handler_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vfs_user.o(i.vfs_user_file_change_handler_hook))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[270]"></a>vfs_user_magic_file_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vfs_user.o(i.vfs_user_magic_file_hook))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
</UL>

<P><STRONG><a name="[261]"></a>vfs_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, virtual_fs.o(i.vfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vfs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_write_sect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b6]"></a>DAP_Info</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dap.o(i.DAP_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAP_Info &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_unique_id
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[d2]"></a>DAP_SETUP</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dap.o(i.DAP_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAP_SETUP &rArr; pin_in_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_od_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
</UL>

<P><STRONG><a name="[c2]"></a>DAP_SWD_Sequence</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, dap.o(i.DAP_SWD_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DAP_SWD_Sequence &rArr; SWD_Sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Sequence
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[c3]"></a>DAP_SWD_Transfer</STRONG> (Thumb, 924 bytes, Stack size 64 bytes, dap.o(i.DAP_SWD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAP_SWD_Transfer &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[c4]"></a>DAP_SWD_TransferBlock</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, dap.o(i.DAP_SWD_TransferBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DAP_SWD_TransferBlock &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[c0]"></a>DAP_SWJ_Clock</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, dap.o(i.DAP_SWJ_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAP_SWJ_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[bf]"></a>DAP_SWJ_Pins</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dap.o(i.DAP_SWJ_Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAP_SWJ_Pins
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMESTAMP_GET
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[d4]"></a>TIMESTAMP_GET</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dap.o(i.TIMESTAMP_GET))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
</UL>

<P><STRONG><a name="[bd]"></a>pin_in_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dap.o(i.pin_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Sequence
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SETUP
</UL>

<P><STRONG><a name="[bc]"></a>pin_out_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dap.o(i.pin_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Sequence
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SETUP
</UL>

<P><STRONG><a name="[be]"></a>pin_out_od_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dap.o(i.pin_out_od_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_out_od_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SETUP
</UL>

<P><STRONG><a name="[10c]"></a>SWD_TransferFast</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, sw_dp.o(i.SWD_TransferFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWD_TransferFast
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMESTAMP_GET
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>

<P><STRONG><a name="[10d]"></a>SWD_TransferSlow</STRONG> (Thumb, 964 bytes, Stack size 40 bytes, sw_dp.o(i.SWD_TransferSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMESTAMP_GET
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>

<P><STRONG><a name="[10e]"></a>TIMESTAMP_GET</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sw_dp.o(i.TIMESTAMP_GET))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferSlow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferFast
</UL>

<P><STRONG><a name="[1ad]"></a>reflect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, crc32.o(i.reflect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_continue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>

<P><STRONG><a name="[22c]"></a>hex_to_ascii</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, info.o(i.hex_to_ascii))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_basics
</UL>

<P><STRONG><a name="[1eb]"></a>setup_basics</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, info.o(i.setup_basics))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setup_basics &rArr; util_write_hex32
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_hex32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_family_id
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_algo_valid
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_disable_msd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
</UL>

<P><STRONG><a name="[1ed]"></a>setup_string_descriptor</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, info.o(i.setup_string_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_string_descriptor &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
</UL>

<P><STRONG><a name="[1ec]"></a>setup_unique_id</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, info.o(i.setup_unique_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setup_unique_id &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_init
</UL>

<P><STRONG><a name="[108]"></a>PORT_SWD_SETUP</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, swd_host.o(i.PORT_SWD_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT_SWD_SETUP &rArr; pin_in_init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
</UL>

<P><STRONG><a name="[10a]"></a>pin_in_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, swd_host.o(i.pin_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_off
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
</UL>

<P><STRONG><a name="[109]"></a>pin_out_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, swd_host.o(i.pin_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
</UL>

<P><STRONG><a name="[235]"></a>swd_get_apsel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, swd_host.o(i.swd_get_apsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swd_get_apsel
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_apsel
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
</UL>

<P><STRONG><a name="[23d]"></a>swd_read_block</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, swd_host.o(i.swd_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = swd_read_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_memory
</UL>

<P><STRONG><a name="[241]"></a>swd_read_data</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = swd_read_data &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_word
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_byte
</UL>

<P><STRONG><a name="[106]"></a>swd_reset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swd_host.o(i.swd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swd_reset &rArr; SWJ_Sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
</UL>

<P><STRONG><a name="[246]"></a>swd_write_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[248]"></a>swd_write_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = swd_write_data &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
</UL>

<P><STRONG><a name="[231]"></a>swd_write_debug_state</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_debug_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_core_register
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
</UL>

<P><STRONG><a name="[1d3]"></a>flash_func_start</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, target_flash.o(i.flash_func_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_uninit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
</UL>

<P><STRONG><a name="[1da]"></a>get_flash_algo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, target_flash.o(i.get_flash_algo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_flash_algo
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
</UL>

<P><STRONG><a name="[65]"></a>target_flash_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, target_flash.o(i.target_flash_busy))
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>target_flash_erase_chip</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, target_flash.o(i.target_flash_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = target_flash_erase_chip &rArr; target_flash_set &rArr; flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_algo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>target_flash_erase_sector</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, target_flash.o(i.target_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = target_flash_erase_sector &rArr; flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector_size
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>target_flash_erase_sector_size</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, target_flash.o(i.target_flash_erase_sector_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = target_flash_erase_sector_size &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_program_page_min_size
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>target_flash_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, target_flash.o(i.target_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = target_flash_init &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>target_flash_program_page</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, target_flash.o(i.target_flash_program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = target_flash_program_page &rArr; flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_automation_allowed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_memory
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_flash_syscall_exec
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>target_flash_program_page_min_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, target_flash.o(i.target_flash_program_page_min_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = target_flash_program_page_min_size &rArr; target_flash_erase_sector_size &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_sector_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>target_flash_set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, target_flash.o(i.target_flash_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = target_flash_set &rArr; flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_algo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_flash_erase_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>target_flash_uninit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, target_flash.o(i.target_flash_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = target_flash_uninit &rArr; flash_func_start &rArr; swd_flash_syscall_exec &rArr; swd_write_debug_state &rArr; swd_write_core_register &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_auto_rst
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_func_start
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_off
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_flash.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>test_range</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, validation.o(i.test_range))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bin_nvic
</UL>

<P><STRONG><a name="[6]"></a>close_bin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_stream.o(i.close_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = close_bin &rArr; flash_decoder_close &rArr; flash_manager_uninit &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>close_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_stream.o(i.close_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = close_hex &rArr; flash_decoder_close &rArr; flash_manager_uninit &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>detect_bin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file_stream.o(i.detect_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = detect_bin &rArr; flash_decoder_detect_type &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>detect_hex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, file_stream.o(i.detect_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = detect_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_hexfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>open_bin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_stream.o(i.open_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = open_bin &rArr; flash_decoder_open &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>open_hex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, file_stream.o(i.open_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = open_hex &rArr; flash_decoder_open &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_hex_parser
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[22d]"></a>stream_thread_assert</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, file_stream.o(i.stream_thread_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_close
</UL>

<P><STRONG><a name="[5]"></a>write_bin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, file_stream.o(i.write_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = write_bin &rArr; flash_decoder_write &rArr; flash_manager_data &rArr; setup_next_sector &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_get_flash
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_detect_type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>write_hex</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, file_stream.o(i.write_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = write_hex &rArr; flash_decoder_write &rArr; flash_manager_data &rArr; setup_next_sector &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex_blob
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_stream.o(.data)
</UL>
<P><STRONG><a name="[1ce]"></a>flash_decoder_is_at_end</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, flash_decoder.o(i.flash_decoder_is_at_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_decoder_is_at_end
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_decoder_write
</UL>

<P><STRONG><a name="[1d6]"></a>flush_current_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, flash_manager.o(i.flush_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = flush_current_block
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_uninit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_data
</UL>

<P><STRONG><a name="[1d5]"></a>setup_next_sector</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, flash_manager.o(i.setup_next_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = setup_next_sector &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_manager_data
</UL>

<P><STRONG><a name="[1af]"></a>critical_erase_and_program</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iap_flash_intf.o(i.critical_erase_and_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_sector_erase
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
</UL>

<P><STRONG><a name="[6b]"></a>erase_chip</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iap_flash_intf.o(i.erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = erase_chip &rArr; erase_sector &rArr; intercept_sector_erase &rArr; critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>erase_sector</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, iap_flash_intf.o(i.erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = erase_sector &rArr; intercept_sector_erase &rArr; critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>erase_sector_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap_flash_intf.o(i.erase_sector_size))
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, iap_flash_intf.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>intercept_page_write</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, iap_flash_intf.o(i.intercept_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = intercept_page_write &rArr; critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_continue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_crc_compute
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_erase_and_program
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_page
</UL>

<P><STRONG><a name="[1b4]"></a>intercept_sector_erase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iap_flash_intf.o(i.intercept_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = intercept_sector_erase &rArr; critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_erase_and_program
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
</UL>

<P><STRONG><a name="[69]"></a>program_page</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, iap_flash_intf.o(i.program_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = program_page &rArr; intercept_page_write &rArr; critical_erase_and_program &rArr; flash_program_page &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_crc_compute
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_page
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intercept_page_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>program_page_min_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap_flash_intf.o(i.program_page_min_size))
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>target_flash_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iap_flash_intf.o(i.target_flash_busy))
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>uninit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iap_flash_intf.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uninit &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_bootloader
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_flash_intf.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>ctoh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intelhex.o(i.ctoh))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex_blob
</UL>

<P><STRONG><a name="[195]"></a>build_filesystem</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vfs_manager.o(i.build_filesystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = build_filesystem &rArr; vfs_user_build_filesystem &rArr; vfs_create_file &rArr; write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_set_file_change_callback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_total_size
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init
</UL>

<P><STRONG><a name="[269]"></a>changing_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vfs_manager.o(i.changing_state))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
</UL>

<P><STRONG><a name="[46]"></a>file_change_handler</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, vfs_manager.o(i.file_change_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = file_change_handler &rArr; vfs_user_file_change_handler &rArr; config_set_overflow_detect &rArr; program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_file_change_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_start_sector
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_size
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_file_get_attr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_file_info
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_unlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_lock
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_type_from_name
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_manager.o(i.build_filesystem)
</UL>
<P><STRONG><a name="[1c4]"></a>file_data_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, vfs_manager.o(i.file_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = file_data_handler &rArr; transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_data
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_start_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_write_sect
</UL>

<P><STRONG><a name="[212]"></a>ready_for_state_change</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, vfs_manager.o(i.ready_for_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ready_for_state_change &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
</UL>

<P><STRONG><a name="[24a]"></a>sync_assert_usb_thread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vfs_manager.o(i.sync_assert_usb_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_get_transfer_status
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_write_sect
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_read_sect
</UL>

<P><STRONG><a name="[1c2]"></a>sync_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfs_manager.o(i.sync_lock))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_enable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[1c3]"></a>sync_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs_manager.o(i.sync_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_enable
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[1c8]"></a>transfer_stream_data</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vfs_manager.o(i.transfer_stream_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = transfer_stream_data &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_close
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_data_handler
</UL>

<P><STRONG><a name="[1c6]"></a>transfer_stream_open</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, vfs_manager.o(i.transfer_stream_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = transfer_stream_open &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_open
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_data_handler
</UL>

<P><STRONG><a name="[1c1]"></a>transfer_update_file_info</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, vfs_manager.o(i.transfer_update_file_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = transfer_update_file_info &rArr; transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_change_handler
</UL>

<P><STRONG><a name="[1c7]"></a>transfer_update_state</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, vfs_manager.o(i.transfer_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = transfer_update_state &rArr; stream_close &rArr; stream_thread_assert &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_close
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_fs_remount
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_periodic
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_update_file_info
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_stream_data
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_data_handler
</UL>

<P><STRONG><a name="[1b6]"></a>expand_info</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, vfs_user.o(i.expand_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = expand_info &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_unique_id
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_target_id
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_mac
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_host_id
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_hic_id
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_board_id
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_mbed_htm
</UL>

<P><STRONG><a name="[26b]"></a>get_file_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfs_user.o(i.get_file_size))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_user_build_filesystem
</UL>

<P><STRONG><a name="[5c]"></a>read_file_assert_txt</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, vfs_user.o(i.read_file_assert_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = read_file_assert_txt &rArr; util_write_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_hex32
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_hexdumps
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_user.o(i.vfs_user_build_filesystem)
</UL>
<P><STRONG><a name="[5a]"></a>read_file_details_txt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vfs_user.o(i.read_file_details_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = read_file_details_txt &rArr; update_details_txt_file &rArr; util_write_uint32_zp &rArr; util_write_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_details_txt_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_user.o(i.vfs_user_build_filesystem)
</UL>
<P><STRONG><a name="[5b]"></a>read_file_fail_txt</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, vfs_user.o(i.read_file_fail_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_file_fail_txt &rArr; vfs_mngr_get_transfer_status &rArr; sync_assert_usb_thread &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_type
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mngr_get_transfer_status
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_user.o(i.vfs_user_build_filesystem)
</UL>
<P><STRONG><a name="[59]"></a>read_file_mbed_htm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vfs_user.o(i.read_file_mbed_htm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_file_mbed_htm &rArr; expand_info &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_user.o(i.vfs_user_build_filesystem)
</UL>
<P><STRONG><a name="[5d]"></a>read_file_need_bl_txt</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vfs_user.o(i.read_file_need_bl_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_file_need_bl_txt &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs_user.o(i.vfs_user_build_filesystem)
</UL>
<P><STRONG><a name="[20f]"></a>update_details_txt_file</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, vfs_user.o(i.update_details_txt_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = update_details_txt_file &rArr; util_write_uint32_zp &rArr; util_write_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_interface
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daplink_is_bootloader
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_auto_rst
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_automation_allowed
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_hex32
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_interface_version
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_interface_present
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_crc_interface
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_crc_bootloader
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_bootloader_version
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_bootloader_present
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_ram_get_page_erase
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_overflow_detect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_info
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32_zp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_uint32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_write_string
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_details_txt
</UL>

<P><STRONG><a name="[58]"></a>file_change_cb_stub</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, virtual_fs.o(i.file_change_cb_stub))
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(i.vfs_init)
</UL>
<P><STRONG><a name="[266]"></a>filename_valid</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, virtual_fs.o(i.filename_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filename_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dir
</UL>

<P><STRONG><a name="[71]"></a>read_dir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, virtual_fs.o(i.read_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_dir &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>read_fat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, virtual_fs.o(i.read_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>read_mbr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, virtual_fs.o(i.read_mbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_mbr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>read_zero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, virtual_fs.o(i.read_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(i.vfs_create_file)
</UL>
<P><STRONG><a name="[72]"></a>write_dir</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, virtual_fs.o(i.write_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_dir &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filename_valid
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtual_fs.o(.constdata)
</UL>
<P><STRONG><a name="[267]"></a>write_fat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, virtual_fs.o(i.write_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_fat &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_create_file
</UL>

<P><STRONG><a name="[57]"></a>write_none</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, virtual_fs.o(i.write_none))
<BR>[Address Reference Count : 2]<UL><LI> virtual_fs.o(i.vfs_create_file)
<LI> virtual_fs.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>security_bits_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, target_reset_kseries.o(i.security_bits_set))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_kseries.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>target_before_init_debug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, target_reset_kseries.o(i.target_before_init_debug))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_kseries.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>target_unlock_sequence</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, target_reset_kseries.o(i.target_unlock_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = target_unlock_sequence &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_kseries.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>security_bits_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, target_reset_lseries.o(i.security_bits_set))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_lseries.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>target_before_init_debug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, target_reset_lseries.o(i.target_before_init_debug))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_lseries.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>target_unlock_sequence</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, target_reset_lseries.o(i.target_unlock_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = target_unlock_sequence &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_lseries.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>prerun_target_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, target_reset_mimxrt.o(i.prerun_target_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prerun_target_config &rArr; target_set_state &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_set_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_mimxrt.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>target_before_init_debug</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, target_reset_mimxrt.o(i.target_before_init_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = target_before_init_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_mimxrt.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>validate_bin_nvic</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, target_reset_mimxrt.o(i.validate_bin_nvic))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_mimxrt.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>swd_set_target_reset_nrf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, target_reset_nrf51.o(i.swd_set_target_reset_nrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = swd_set_target_reset_nrf &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_nrf51.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>swd_set_target_reset_nrf</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, target_reset_nrf52.o(i.swd_set_target_reset_nrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_set_target_reset_nrf &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_nrf52.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>security_bits_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, target_reset_rapid_iot.o(i.security_bits_set))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_rapid_iot.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>target_unlock_sequence</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, target_reset_rapid_iot.o(i.target_unlock_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = target_unlock_sequence &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_ap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_rapid_iot.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>swd_set_target_reset_realtek</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, target_reset_realtek_rtl8195am.o(i.swd_set_target_reset_realtek))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = swd_set_target_reset_realtek &rArr; swd_write_word &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_realtek_rtl8195am.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>validate_bin_nvic_realtek</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, target_reset_realtek_rtl8195am.o(i.validate_bin_nvic_realtek))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = validate_bin_nvic_realtek &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_realtek_rtl8195am.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>target_set_state_rza</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target_reset_rza.o(i.target_set_state_rza))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = target_set_state_rza &rArr; swd_set_target_state_hw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_hw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_rza.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>validate_bin_nvic_rza</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, target_reset_rza.o(i.validate_bin_nvic_rza))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_rza.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>validate_hexfile_rza</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target_reset_rza.o(i.validate_hexfile_rza))
<BR>[Address Reference Count : 1]<UL><LI> target_reset_rza.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>target_set_state_ti</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, target_reset_ti.o(i.target_set_state_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = target_set_state_ti &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_ti.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>validate_bin_nvic_ti</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, target_reset_ti.o(i.validate_bin_nvic_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate_bin_nvic_ti &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_ti.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>target_before_init_debug_tz</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, target_reset_tz.o(i.target_before_init_debug_tz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = target_before_init_debug_tz
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_tz.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>target_set_state_wiznet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, target_reset_wiznet.o(i.target_set_state_wiznet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = target_set_state_wiznet &rArr; swd_set_target_state_sw &rArr; swd_init_debug &rArr; swd_clear_errors &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_reset
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_set_target_state_sw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_off
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target_reset_wiznet.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>output_clock_enable</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, gpio.o(i.output_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = output_clock_enable &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_util_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[e3]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[dd]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[df]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[f3]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f5]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f6]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[101]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19e]"></a>clear_buffers</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.clear_buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_buffers
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_configuration
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[169]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_stm32f103.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[191]"></a>stat_enque</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_stm32f103.o(i.stat_enque))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stat_enque
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>rt_timer_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cmsis_os2_port.o(i.rt_timer_task))
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2_port.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[21d]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1a8]"></a>program_cfg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, settings_rom.o(i.program_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = program_cfg &rArr; ProgramPage &rArr; _util_assert &rArr; config_ram_get_assert &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_overflow_detect
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_automation_allowed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_set_auto_rst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_rom_init
</UL>

<P><STRONG><a name="[11e]"></a>USBD_CDC_ACM_EP_BULKIN_HandleData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKIN_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ACM_EP_BULKIN_HandleData &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKIN_Event
</UL>

<P><STRONG><a name="[120]"></a>USBD_CDC_ACM_EP_BULKOUT_HandleData</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbd_cdc_acm.o(i.USBD_CDC_ACM_EP_BULKOUT_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_ACM_EP_BULKOUT_HandleData &rArr; USBD_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_SOF_Event
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ACM_EP_BULKOUT_Event
</UL>

<P><STRONG><a name="[142]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_ReqGetDescriptor &rArr; USBD_ReqGetDescriptor_HID
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_get_unique_id_string_descriptor
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[13e]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[140]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_ReqClrFeature_MSC &rArr; USBD_MSC_ClrStallEP &rArr; USBD_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WakeUpCfg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStallEP
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrStallEP
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqClrFeature_MSC
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[143]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Configure
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>

<P><STRONG><a name="[144]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableEP
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableEP
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndPoint0
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
