; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_membox.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_membox.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_membox.crf ..\..\..\source\rtos\rt_MemBox.c]
                          THUMB

                          AREA ||i._calloc_box||, CODE, READONLY, ALIGN=1

                  _calloc_box PROC
;;;106    
;;;107    void *_calloc_box (void *box_mem)  {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;108      /* Allocate a 0-initialized memory block and return start address. */
;;;109      void *free;
;;;110      U32 *p;
;;;111      U32 i;
;;;112    
;;;113      free = _alloc_box (box_mem);
000004  f7fffffe          BL       _alloc_box
;;;114      if (free)  {
000008  2800              CMP      r0,#0
00000a  d007              BEQ      |L1.28|
;;;115        p = free;
;;;116        for (i = ((P_BM) box_mem)->blk_size; i; i -= 4)  {
00000c  68a1              LDR      r1,[r4,#8]
00000e  4602              MOV      r2,r0                 ;115
000010  2900              CMP      r1,#0
000012  d003              BEQ      |L1.28|
000014  2300              MOVS     r3,#0
                  |L1.22|
;;;117          *p = 0;
000016  c208              STM      r2!,{r3}
000018  1f09              SUBS     r1,r1,#4
00001a  d1fc              BNE      |L1.22|
                  |L1.28|
;;;118          p++;
;;;119        }
;;;120      }
;;;121      return (free);
;;;122    }
00001c  bd10              POP      {r4,pc}
;;;123    
                          ENDP


                          AREA ||i._init_box||, CODE, READONLY, ALIGN=1

                  _init_box PROC
;;;34     
;;;35     int _init_box  (void *box_mem, U32 box_size, U32 blk_size) {
000000  b510              PUSH     {r4,lr}
;;;36       /* Initialize memory block system, returns 0 if OK, 1 if fails. */
;;;37       void *end;
;;;38       void *blk;
;;;39       void *next;
;;;40       U32  sizeof_bm;
;;;41     
;;;42       /* Create memory structure. */
;;;43       if (blk_size & BOX_ALIGN_8) {
000002  2a00              CMP      r2,#0
000004  da06              BGE      |L2.20|
;;;44         /* Memory blocks 8-byte aligned. */
;;;45         blk_size = ((blk_size & ~BOX_ALIGN_8) + 7) & ~7;
000006  f0224200          BIC      r2,r2,#0x80000000
00000a  1dd2              ADDS     r2,r2,#7
00000c  f0220307          BIC      r3,r2,#7
;;;46         sizeof_bm = (sizeof (struct OS_BM) + 7) & ~7;
000010  2210              MOVS     r2,#0x10
000012  e003              B        |L2.28|
                  |L2.20|
000014  1cd2              ADDS     r2,r2,#3
;;;47       }
;;;48       else {
;;;49         /* Memory blocks 4-byte aligned. */
;;;50         blk_size = (blk_size + 3) & ~3;
000016  f0220303          BIC      r3,r2,#3
;;;51         sizeof_bm = sizeof (struct OS_BM);
00001a  220c              MOVS     r2,#0xc
                  |L2.28|
;;;52       }
;;;53       if (blk_size == 0) {
00001c  b113              CBZ      r3,|L2.36|
;;;54         return (1);
;;;55       }
;;;56       if ((blk_size + sizeof_bm) > box_size) {
00001e  189c              ADDS     r4,r3,r2
000020  428c              CMP      r4,r1
000022  d901              BLS      |L2.40|
                  |L2.36|
;;;57         return (1);
000024  2001              MOVS     r0,#1
;;;58       }
;;;59       /* Create a Memory structure. */
;;;60       blk = ((U8 *) box_mem) + sizeof_bm;
;;;61       ((P_BM) box_mem)->free = blk;
;;;62       end = ((U8 *) box_mem) + box_size;
;;;63       ((P_BM) box_mem)->end      = end;
;;;64       ((P_BM) box_mem)->blk_size = blk_size;
;;;65     
;;;66       /* Link all free blocks using offsets. */
;;;67       end = ((U8 *) end) - blk_size;
;;;68       while (1)  {
;;;69         next = ((U8 *) blk) + blk_size;
;;;70         if (next > end)  break;
;;;71         *((void **)blk) = next;
;;;72         blk = next;
;;;73       }
;;;74       /* end marker */
;;;75       *((void **)blk) = 0;
;;;76       return (0);
;;;77     }
000026  bd10              POP      {r4,pc}
                  |L2.40|
000028  4402              ADD      r2,r2,r0              ;60
00002a  4401              ADD      r1,r1,r0              ;62
00002c  6083              STR      r3,[r0,#8]            ;64
00002e  e9c02100          STRD     r2,r1,[r0,#0]         ;64
000032  1ac9              SUBS     r1,r1,r3              ;67
                  |L2.52|
000034  18d0              ADDS     r0,r2,r3              ;69
000036  4288              CMP      r0,r1                 ;70
000038  d802              BHI      |L2.64|
00003a  6010              STR      r0,[r2,#0]            ;72
00003c  4602              MOV      r2,r0                 ;72
00003e  e7f9              B        |L2.52|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;75
000042  6010              STR      r0,[r2,#0]            ;75
000044  bd10              POP      {r4,pc}
;;;78     
                          ENDP


                          AREA ||i.rt_alloc_box||, CODE, READONLY, ALIGN=1

                  rt_alloc_box PROC
;;;80     
;;;81     void *rt_alloc_box (void *box_mem) {
000000  4601              MOV      r1,r0
;;;82       /* Allocate a memory block and return start address. */
;;;83       void **free;
;;;84     #ifndef __USE_EXCLUSIVE_ACCESS
;;;85       int  irq_dis;
;;;86     
;;;87       irq_dis = __disable_irq ();
000002  f3ef8010          MRS      r0,PRIMASK
000006  f0000201          AND      r2,r0,#1
00000a  b672              CPSID    i
00000c  6808              LDR      r0,[r1,#0]            ;81
00000e  b108              CBZ      r0,|L3.20|
;;;88       free = ((P_BM) box_mem)->free;
;;;89       if (free) {
;;;90         ((P_BM) box_mem)->free = *free;
000010  6803              LDR      r3,[r0,#0]
000012  600b              STR      r3,[r1,#0]
                  |L3.20|
;;;91       }
;;;92       if (!irq_dis) __enable_irq ();
000014  2a00              CMP      r2,#0
000016  d100              BNE      |L3.26|
000018  b662              CPSIE    i
                  |L3.26|
;;;93     #else
;;;94       do {
;;;95         if ((free = (void **)__ldrex(&((P_BM) box_mem)->free)) == 0) {
;;;96           __clrex();
;;;97           break;
;;;98         }
;;;99       } while (__strex((U32)*free, &((P_BM) box_mem)->free));
;;;100    #endif
;;;101      return (free);
;;;102    }
00001a  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||i.rt_free_box||, CODE, READONLY, ALIGN=1

                  rt_free_box PROC
;;;126    
;;;127    int rt_free_box (void *box_mem, void *box) {
000000  4281              CMP      r1,r0
000002  d302              BCC      |L4.10|
;;;128      /* Free a memory block, returns 0 if OK, 1 if box does not belong to box_mem */
;;;129    #ifndef __USE_EXCLUSIVE_ACCESS
;;;130      int irq_dis;
;;;131    #endif
;;;132    
;;;133      if (box < box_mem || box >= ((P_BM) box_mem)->end) {
000004  6842              LDR      r2,[r0,#4]
000006  428a              CMP      r2,r1
000008  d801              BHI      |L4.14|
                  |L4.10|
;;;134        return (1);
00000a  2001              MOVS     r0,#1
;;;135      }
;;;136    
;;;137    #ifndef __USE_EXCLUSIVE_ACCESS
;;;138      irq_dis = __disable_irq ();
;;;139      *((void **)box) = ((P_BM) box_mem)->free;
;;;140      ((P_BM) box_mem)->free = box;
;;;141      if (!irq_dis) __enable_irq ();
;;;142    #else
;;;143      do {
;;;144        *((void **)box) = (void *)__ldrex(&((P_BM) box_mem)->free);
;;;145      } while (__strex ((U32)box, &((P_BM) box_mem)->free));
;;;146    #endif
;;;147      return (0);
;;;148    }
00000c  4770              BX       lr
                  |L4.14|
00000e  f3ef8210          MRS      r2,PRIMASK            ;138
000012  f0120f01          TST      r2,#1                 ;138
000016  b672              CPSID    i                     ;138
000018  6803              LDR      r3,[r0,#0]            ;139
00001a  600b              STR      r3,[r1,#0]            ;140
00001c  6001              STR      r1,[r0,#0]            ;141
00001e  d100              BNE      |L4.34|
000020  b662              CPSIE    i                     ;141
                  |L4.34|
000022  2000              MOVS     r0,#0                 ;147
000024  4770              BX       lr
;;;149    
                          ENDP

