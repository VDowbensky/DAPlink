; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_semaphore.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_semaphore.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_semaphore.crf ..\..\..\source\rtos\rt_Semaphore.c]
                          THUMB

                          AREA ||i.isr_sem_send||, CODE, READONLY, ALIGN=1

                  isr_sem_send PROC
;;;98     
;;;99     void isr_sem_send (OS_ID semaphore) {
000000  b510              PUSH     {r4,lr}
;;;100      /* Same function as "os_sem"send", but to be called by ISRs */
;;;101      P_SCB p_SCB = semaphore;
;;;102    
;;;103      rt_psq_enq (p_SCB, 0);
000002  2100              MOVS     r1,#0
000004  f7fffffe          BL       rt_psq_enq
;;;104      rt_psh_req ();
000008  e8bd4010          POP      {r4,lr}
00000c  f7ffbffe          B.W      rt_psh_req
;;;105    }
;;;106    
                          ENDP


                          AREA ||i.rt_sem_init||, CODE, READONLY, ALIGN=1

                  rt_sem_init PROC
;;;36     
;;;37     void rt_sem_init (OS_ID semaphore, U16 token_count) {
000000  2202              MOVS     r2,#2
;;;38       /* Initialize a semaphore */
;;;39       P_SCB p_SCB = semaphore;
;;;40     
;;;41       p_SCB->cb_type = SCB;
000002  7002              STRB     r2,[r0,#0]
;;;42       p_SCB->p_lnk  = NULL;
000004  2200              MOVS     r2,#0
;;;43       p_SCB->tokens = token_count;
000006  6042              STR      r2,[r0,#4]
000008  8041              STRH     r1,[r0,#2]
;;;44     }
00000a  4770              BX       lr
;;;45     
                          ENDP


                          AREA ||i.rt_sem_psh||, CODE, READONLY, ALIGN=2

                  rt_sem_psh PROC
;;;109    
;;;110    void rt_sem_psh (P_SCB p_CB) {
000000  b510              PUSH     {r4,lr}
000002  6841              LDR      r1,[r0,#4]
000004  b179              CBZ      r1,|L3.38|
;;;111      /* Check if task has to be waken up */
;;;112      P_TCB p_TCB;
;;;113    
;;;114      if (p_CB->p_lnk != NULL) {
;;;115        /* A task is waiting for token */
;;;116        p_TCB = rt_get_first ((P_XCB)p_CB);
000006  f7fffffe          BL       rt_get_first
00000a  4604              MOV      r4,r0
;;;117        rt_rmv_dly (p_TCB);
00000c  f7fffffe          BL       rt_rmv_dly
;;;118        p_TCB->state   = READY;
000010  2001              MOVS     r0,#1
000012  7060              STRB     r0,[r4,#1]
;;;119        p_TCB->ret_val = OS_R_SEM;
000014  2003              MOVS     r0,#3
000016  f8840020          STRB     r0,[r4,#0x20]
;;;120        rt_put_prio (&os_rdy, p_TCB);
00001a  4621              MOV      r1,r4
00001c  e8bd4010          POP      {r4,lr}
000020  4803              LDR      r0,|L3.48|
000022  f7ffbffe          B.W      rt_put_prio
                  |L3.38|
;;;121      }
;;;122      else {
;;;123        /* Store token */
;;;124        p_CB->tokens++;
000026  8841              LDRH     r1,[r0,#2]
000028  1c49              ADDS     r1,r1,#1
00002a  8041              STRH     r1,[r0,#2]
;;;125      }
;;;126    }
00002c  bd10              POP      {r4,pc}
;;;127    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      os_rdy

                          AREA ||i.rt_sem_send||, CODE, READONLY, ALIGN=2

                  rt_sem_send PROC
;;;48     
;;;49     OS_RESULT rt_sem_send (OS_ID semaphore) {
000000  b510              PUSH     {r4,lr}
000002  6841              LDR      r1,[r0,#4]
000004  b189              CBZ      r1,|L4.42|
;;;50       /* Return a token to semaphore */
;;;51       P_SCB p_SCB = semaphore;
;;;52       P_TCB p_TCB;
;;;53     
;;;54       if (p_SCB->p_lnk != NULL) {
;;;55         /* A task is waiting for token */
;;;56         p_TCB = rt_get_first ((P_XCB)p_SCB);
000006  f7fffffe          BL       rt_get_first
00000a  4604              MOV      r4,r0
;;;57         p_TCB->ret_val = OS_R_SEM;
00000c  2003              MOVS     r0,#3
00000e  f8840020          STRB     r0,[r4,#0x20]
;;;58         rt_rmv_dly (p_TCB);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       rt_rmv_dly
;;;59         rt_dispatch (p_TCB);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       rt_dispatch
;;;60         os_tsk.run->ret_val = OS_R_OK;
00001e  4905              LDR      r1,|L4.52|
000020  2000              MOVS     r0,#0
000022  6809              LDR      r1,[r1,#0]  ; os_tsk
000024  f8810020          STRB     r0,[r1,#0x20]
000028  e002              B        |L4.48|
                  |L4.42|
;;;61       }
;;;62       else {
;;;63         /* Store token. */
;;;64         p_SCB->tokens++;
00002a  8841              LDRH     r1,[r0,#2]
00002c  1c49              ADDS     r1,r1,#1
00002e  8041              STRH     r1,[r0,#2]
                  |L4.48|
;;;65       }
;;;66       return (OS_R_OK);
000030  2000              MOVS     r0,#0
;;;67     }
000032  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  |L4.52|
                          DCD      os_tsk

                          AREA ||i.rt_sem_wait||, CODE, READONLY, ALIGN=2

                  rt_sem_wait PROC
;;;71     
;;;72     OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout) {
000000  b510              PUSH     {r4,lr}
000002  460c              MOV      r4,r1
;;;73       /* Obtain a token; possibly wait for it */
;;;74       P_SCB p_SCB = semaphore;
;;;75     
;;;76       if (p_SCB->tokens) {
000004  8841              LDRH     r1,[r0,#2]
000006  b119              CBZ      r1,|L5.16|
000008  1e49              SUBS     r1,r1,#1              ;72
;;;77         p_SCB->tokens--;
00000a  8041              STRH     r1,[r0,#2]
;;;78         return (OS_R_OK);
00000c  2000              MOVS     r0,#0
;;;79       }
;;;80       /* No token available: wait for one */
;;;81       if (timeout == 0) {
;;;82         return (OS_R_TMO);
;;;83       }
;;;84       if (p_SCB->p_lnk != NULL) {
;;;85         rt_put_prio ((P_XCB)p_SCB, os_tsk.run);
;;;86       }
;;;87       else {
;;;88         p_SCB->p_lnk = os_tsk.run;
;;;89         os_tsk.run->p_lnk = NULL;
;;;90         os_tsk.run->p_rlnk = (P_TCB)p_SCB;
;;;91       }
;;;92       rt_block(timeout, WAIT_SEM);
;;;93       return (OS_R_TMO);
;;;94     }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  b134              CBZ      r4,|L5.32|
000012  4a0a              LDR      r2,|L5.60|
000014  6843              LDR      r3,[r0,#4]            ;85
000016  6811              LDR      r1,[r2,#0]            ;84
000018  b123              CBZ      r3,|L5.36|
00001a  f7fffffe          BL       rt_put_prio
00001e  e007              B        |L5.48|
                  |L5.32|
000020  2001              MOVS     r0,#1                 ;82
000022  bd10              POP      {r4,pc}
                  |L5.36|
000024  6041              STR      r1,[r0,#4]            ;89
000026  6813              LDR      r3,[r2,#0]            ;89  ; os_tsk
000028  2100              MOVS     r1,#0                 ;89
00002a  6059              STR      r1,[r3,#4]            ;90
00002c  6811              LDR      r1,[r2,#0]            ;90  ; os_tsk
00002e  6088              STR      r0,[r1,#8]            ;90
                  |L5.48|
000030  2107              MOVS     r1,#7                 ;92
000032  4620              MOV      r0,r4                 ;92
000034  f7fffffe          BL       rt_block
000038  e7f2              B        |L5.32|
;;;95     
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      os_tsk
