; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_system.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_system.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_system.crf ..\..\..\source\rtos\rt_System.c]
                          THUMB

                          AREA ||i.os_tick_init||, CODE, READONLY, ALIGN=2

                  os_tick_init PROC
;;;222    
;;;223    __weak int os_tick_init (void) {
000000  4807              LDR      r0,|L1.32|
000002  6801              LDR      r1,[r0,#0]  ; os_trv
000004  f04f20e0          MOV      r0,#0xe000e000
000008  6141              STR      r1,[r0,#0x14]
00000a  2100              MOVS     r1,#0
00000c  6181              STR      r1,[r0,#0x18]
00000e  2107              MOVS     r1,#7
000010  6101              STR      r1,[r0,#0x10]
000012  4804              LDR      r0,|L1.36|
000014  6801              LDR      r1,[r0,#0]
000016  f041417f          ORR      r1,r1,#0xff000000
00001a  6001              STR      r1,[r0,#0]
;;;224      /* Initialize SysTick timer as system tick timer. */
;;;225      rt_systick_init ();
;;;226      return (-1);  /* Return IRQ number of SysTick timer */
00001c  1740              ASRS     r0,r0,#29
;;;227    }
00001e  4770              BX       lr
;;;228    
                          ENDP

                  |L1.32|
                          DCD      os_trv
                  |L1.36|
                          DCD      0xe000ed20

                          AREA ||i.os_tick_irqack||, CODE, READONLY, ALIGN=1

                  os_tick_irqack PROC
;;;231    
;;;232    __weak void os_tick_irqack (void) {
000000  4770              BX       lr
;;;233      /* Acknowledge timer interrupt. */
;;;234    }
;;;235    
                          ENDP


                          AREA ||i.rt_pop_req||, CODE, READONLY, ALIGN=2

                  rt_pop_req PROC
;;;186    
;;;187    void rt_pop_req (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;188      /* Process an ISR post service requests. */
;;;189      struct OS_XCB *p_CB;
;;;190      P_TCB next;
;;;191      U32  idx;
;;;192    
;;;193      os_tsk.run->state = READY;
000002  4818              LDR      r0,|L3.100|
000004  2101              MOVS     r1,#1
000006  6802              LDR      r2,[r0,#0]  ; os_tsk
000008  7051              STRB     r1,[r2,#1]
;;;194      rt_put_rdy_first (os_tsk.run);
00000a  6800              LDR      r0,[r0,#0]  ; os_tsk
00000c  f7fffffe          BL       rt_put_rdy_first
;;;195    
;;;196      idx = os_psq->last;
000010  4d15              LDR      r5,|L3.104|
000012  786c              LDRB     r4,[r5,#1]  ; os_fifo
;;;197      while (os_psq->count) {
000014  e012              B        |L3.60|
                  |L3.22|
;;;198        p_CB = os_psq->q[idx].id;
000016  eb0501c4          ADD      r1,r5,r4,LSL #3
;;;199        if (p_CB->cb_type == TCB) {
00001a  6848              LDR      r0,[r1,#4]
00001c  7802              LDRB     r2,[r0,#0]
00001e  b1c2              CBZ      r2,|L3.82|
;;;200          /* Is of TCB type */
;;;201          rt_evt_psh ((P_TCB)p_CB, (U16)os_psq->q[idx].arg);
;;;202        }
;;;203        else if (p_CB->cb_type == MCB) {
000020  2a01              CMP      r2,#1
000022  d01b              BEQ      |L3.92|
;;;204          /* Is of MCB type */
;;;205          rt_mbx_psh ((P_MCB)p_CB, (void *)os_psq->q[idx].arg);
;;;206        }
;;;207        else {
;;;208          /* Must be of SCB type */
;;;209          rt_sem_psh ((P_SCB)p_CB);
000024  f7fffffe          BL       rt_sem_psh
                  |L3.40|
;;;210        }
;;;211        if (++idx == os_psq->size) idx = 0;
000028  78e8              LDRB     r0,[r5,#3]  ; os_fifo
00002a  1c64              ADDS     r4,r4,#1
00002c  4284              CMP      r4,r0
00002e  d100              BNE      |L3.50|
000030  2400              MOVS     r4,#0
                  |L3.50|
;;;212        rt_dec (&os_psq->count);
000032  b672              CPSID    i
000034  78a8              LDRB     r0,[r5,#2]  ; os_fifo
000036  1e40              SUBS     r0,r0,#1
000038  70a8              STRB     r0,[r5,#2]
00003a  b662              CPSIE    i
                  |L3.60|
00003c  78a8              LDRB     r0,[r5,#2]            ;197  ; os_fifo
00003e  2800              CMP      r0,#0                 ;197
000040  d1e9              BNE      |L3.22|
;;;213      }
;;;214      os_psq->last = idx;
000042  706c              STRB     r4,[r5,#1]
;;;215    
;;;216      next = rt_get_first (&os_rdy);
000044  4809              LDR      r0,|L3.108|
000046  f7fffffe          BL       rt_get_first
;;;217      rt_switch_req (next);
00004a  e8bd4070          POP      {r4-r6,lr}
00004e  f7ffbffe          B.W      rt_switch_req
                  |L3.82|
000052  8909              LDRH     r1,[r1,#8]            ;201
000054  b289              UXTH     r1,r1                 ;201
000056  f7fffffe          BL       rt_evt_psh
00005a  e7e5              B        |L3.40|
                  |L3.92|
00005c  6889              LDR      r1,[r1,#8]            ;205
00005e  f7fffffe          BL       rt_mbx_psh
000062  e7e1              B        |L3.40|
;;;218    }
;;;219    
                          ENDP

                  |L3.100|
                          DCD      os_tsk
                  |L3.104|
                          DCD      os_fifo
                  |L3.108|
                          DCD      os_rdy

                          AREA ||i.rt_psh_req||, CODE, READONLY, ALIGN=2

                  rt_psh_req PROC
;;;173    
;;;174    void rt_psh_req (void) {
000000  4805              LDR      r0,|L4.24|
;;;175      /* Initiate a post service handling request if required. */
;;;176      if (os_lock == __FALSE) {
000002  7801              LDRB     r1,[r0,#0]  ; os_lock
000004  b111              CBZ      r1,|L4.12|
;;;177        OS_PEND_IRQ ();
;;;178      }
;;;179      else {
;;;180        os_psh_flag = __TRUE;
000006  2101              MOVS     r1,#1
000008  7041              STRB     r1,[r0,#1]
;;;181      }
;;;182    }
00000a  4770              BX       lr
                  |L4.12|
00000c  4903              LDR      r1,|L4.28|
00000e  f04f5080          MOV      r0,#0x10000000        ;177
000012  6008              STR      r0,[r1,#0]            ;177
000014  4770              BX       lr
;;;183    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      ||.data||
                  |L4.28|
                          DCD      0xe000ed04

                          AREA ||i.rt_resume||, CODE, READONLY, ALIGN=2

                  rt_resume PROC
;;;82     
;;;83     void rt_resume (U32 sleep_time) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;84       /* Resume OS scheduler after suspend */
;;;85       P_TCB next;
;;;86       U32   delta;
;;;87     
;;;88       os_tsk.run->state = READY;
000006  4823              LDR      r0,|L5.148|
000008  2601              MOVS     r6,#1
00000a  6801              LDR      r1,[r0,#0]  ; os_tsk
00000c  704e              STRB     r6,[r1,#1]
;;;89       rt_put_rdy_first (os_tsk.run);
00000e  6800              LDR      r0,[r0,#0]  ; os_tsk
000010  f7fffffe          BL       rt_put_rdy_first
;;;90     
;;;91       os_robin.task = NULL;
000014  4920              LDR      r1,|L5.152|
000016  2000              MOVS     r0,#0
;;;92     
;;;93       /* Update delays. */
;;;94       if (os_dly.p_dlnk) {
;;;95         delta = sleep_time;
;;;96         if (delta >= os_dly.delta_time) {
;;;97           delta   -= os_dly.delta_time;
;;;98           os_time += os_dly.delta_time;
000018  4f21              LDR      r7,|L5.160|
00001a  6008              STR      r0,[r1,#0]            ;94  ; os_robin
00001c  491f              LDR      r1,|L5.156|
00001e  68c8              LDR      r0,[r1,#0xc]          ;94  ; os_dly
000020  b1d0              CBZ      r0,|L5.88|
000022  8a88              LDRH     r0,[r1,#0x14]         ;96  ; os_dly
000024  42a8              CMP      r0,r5                 ;96
000026  d811              BHI      |L5.76|
000028  683a              LDR      r2,[r7,#0]  ; os_time
00002a  1a2c              SUBS     r4,r5,r0              ;97
00002c  4410              ADD      r0,r0,r2
;;;99           os_dly.delta_time = 1;
00002e  6038              STR      r0,[r7,#0]  ; os_time
000030  828e              STRH     r6,[r1,#0x14]
000032  4688              MOV      r8,r1                 ;94
                  |L5.52|
;;;100          while (os_dly.p_dlnk) {
;;;101            rt_dec_dly();
000034  f7fffffe          BL       rt_dec_dly
;;;102            if (delta == 0) break;
000038  b18c              CBZ      r4,|L5.94|
;;;103            delta--;
;;;104            os_time++;
00003a  6838              LDR      r0,[r7,#0]  ; os_time
00003c  1e64              SUBS     r4,r4,#1              ;100
00003e  1c40              ADDS     r0,r0,#1
000040  6038              STR      r0,[r7,#0]            ;100  ; os_time
000042  f8d8000c          LDR      r0,[r8,#0xc]  ; os_dly
000046  2800              CMP      r0,#0
000048  d1f4              BNE      |L5.52|
00004a  e008              B        |L5.94|
                  |L5.76|
;;;105          }
;;;106        } else {
;;;107          os_time           += delta;
00004c  683b              LDR      r3,[r7,#0]  ; os_time
00004e  195a              ADDS     r2,r3,r5
;;;108          os_dly.delta_time -= delta;
000050  1b40              SUBS     r0,r0,r5
000052  603a              STR      r2,[r7,#0]  ; os_time
000054  8288              STRH     r0,[r1,#0x14]
000056  e002              B        |L5.94|
                  |L5.88|
;;;109        }
;;;110      } else {
;;;111        os_time += sleep_time;
000058  6838              LDR      r0,[r7,#0]  ; os_time
00005a  4428              ADD      r0,r0,r5
00005c  6038              STR      r0,[r7,#0]  ; os_time
                  |L5.94|
;;;112      }
;;;113    
;;;114      /* Check the user timers. */
;;;115      if (os_tmr.next) {
00005e  4f11              LDR      r7,|L5.164|
000060  6838              LDR      r0,[r7,#0]  ; os_tmr
000062  b170              CBZ      r0,|L5.130|
;;;116        delta = sleep_time;
;;;117        if (delta >= os_tmr.tcnt) {
000064  88b8              LDRH     r0,[r7,#4]  ; os_tmr
000066  42a8              CMP      r0,r5
000068  d809              BHI      |L5.126|
;;;118          delta   -= os_tmr.tcnt;
00006a  1a2c              SUBS     r4,r5,r0
;;;119          os_tmr.tcnt = 1;
00006c  80be              STRH     r6,[r7,#4]
                  |L5.110|
;;;120          while (os_tmr.next) {
;;;121            rt_tmr_tick();
00006e  f7fffffe          BL       rt_tmr_tick
;;;122            if (delta == 0) break;
000072  b134              CBZ      r4,|L5.130|
;;;123            delta--;
000074  6838              LDR      r0,[r7,#0]  ; os_tmr
000076  1e64              SUBS     r4,r4,#1              ;120
000078  2800              CMP      r0,#0
00007a  d1f8              BNE      |L5.110|
00007c  e001              B        |L5.130|
                  |L5.126|
;;;124          }
;;;125        } else {
;;;126          os_tmr.tcnt -= delta;
00007e  1b40              SUBS     r0,r0,r5
000080  80b8              STRH     r0,[r7,#4]
                  |L5.130|
;;;127        }
;;;128      }
;;;129    
;;;130      /* Switch back to highest ready task */
;;;131      next = rt_get_first (&os_rdy);
000082  4809              LDR      r0,|L5.168|
000084  f7fffffe          BL       rt_get_first
;;;132      rt_switch_req (next);
000088  f7fffffe          BL       rt_switch_req
;;;133    
;;;134      rt_tsk_unlock();
00008c  e8bd41f0          POP      {r4-r8,lr}
000090  f7ffbffe          B.W      rt_tsk_unlock
;;;135    }
;;;136    
                          ENDP

                  |L5.148|
                          DCD      os_tsk
                  |L5.152|
                          DCD      os_robin
                  |L5.156|
                          DCD      os_dly
                  |L5.160|
                          DCD      os_time
                  |L5.164|
                          DCD      os_tmr
                  |L5.168|
                          DCD      os_rdy

                          AREA ||i.rt_stk_check||, CODE, READONLY, ALIGN=2

                  rt_stk_check PROC
;;;262    
;;;263    __weak void rt_stk_check (void) {
000000  4806              LDR      r0,|L6.28|
;;;264      /* Check for stack overflow. */
;;;265      if ((os_tsk.run->tsk_stack < (U32)os_tsk.run->stack) ||
000002  6800              LDR      r0,[r0,#0]  ; os_tsk
000004  e9d01009          LDRD     r1,r0,[r0,#0x24]
000008  4281              CMP      r1,r0
00000a  d303              BCC      |L6.20|
;;;266          (os_tsk.run->stack[0] != MAGIC_WORD)) {
00000c  6800              LDR      r0,[r0,#0]
00000e  4904              LDR      r1,|L6.32|
000010  4288              CMP      r0,r1
000012  d002              BEQ      |L6.26|
                  |L6.20|
;;;267        os_error (OS_ERR_STK_OVF);
000014  2001              MOVS     r0,#1
000016  f7ffbffe          B.W      os_error
                  |L6.26|
;;;268      }
;;;269    }
00001a  4770              BX       lr
;;;270    
                          ENDP

                  |L6.28|
                          DCD      os_tsk
                  |L6.32|
                          DCD      0xe25a2ea5

                          AREA ||i.rt_suspend||, CODE, READONLY, ALIGN=2

                  rt_suspend PROC
;;;63     
;;;64     U32 rt_suspend (void) {
000000  b510              PUSH     {r4,lr}
;;;65       /* Suspend OS scheduler */
;;;66       U32 delta = 0xFFFF;
000002  f64f74ff          MOV      r4,#0xffff
;;;67     
;;;68       rt_tsk_lock();
000006  f7fffffe          BL       rt_tsk_lock
;;;69     
;;;70       if (os_dly.p_dlnk) {
00000a  4806              LDR      r0,|L7.36|
00000c  68c1              LDR      r1,[r0,#0xc]  ; os_dly
00000e  b101              CBZ      r1,|L7.18|
;;;71         delta = os_dly.delta_time;
000010  8a84              LDRH     r4,[r0,#0x14]  ; os_dly
                  |L7.18|
;;;72       }
;;;73       if (os_tmr.next) {
000012  4805              LDR      r0,|L7.40|
000014  6801              LDR      r1,[r0,#0]  ; os_tmr
000016  b119              CBZ      r1,|L7.32|
;;;74         if (os_tmr.tcnt < delta) delta = os_tmr.tcnt;
000018  8880              LDRH     r0,[r0,#4]  ; os_tmr
00001a  42a0              CMP      r0,r4
00001c  d200              BCS      |L7.32|
00001e  4604              MOV      r4,r0
                  |L7.32|
;;;75       }
;;;76     
;;;77       return (delta);
000020  4620              MOV      r0,r4
;;;78     }
000022  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  |L7.36|
                          DCD      os_dly
                  |L7.40|
                          DCD      os_tmr

                          AREA ||i.rt_systick||, CODE, READONLY, ALIGN=2

                  rt_systick PROC
;;;238    
;;;239    void rt_systick (void) {
000000  480c              LDR      r0,|L8.52|
000002  b510              PUSH     {r4,lr}
;;;240      /* Check for system clock update, suspend running task. */
;;;241      P_TCB next;
;;;242    
;;;243      os_tsk.run->state = READY;
000004  6802              LDR      r2,[r0,#0]  ; os_tsk
000006  2101              MOVS     r1,#1
000008  7051              STRB     r1,[r2,#1]
;;;244      rt_put_rdy_first (os_tsk.run);
00000a  6800              LDR      r0,[r0,#0]  ; os_tsk
00000c  f7fffffe          BL       rt_put_rdy_first
;;;245    
;;;246      /* Check Round Robin timeout. */
;;;247      rt_chk_robin ();
000010  f7fffffe          BL       rt_chk_robin
;;;248    
;;;249      /* Update delays. */
;;;250      os_time++;
000014  4808              LDR      r0,|L8.56|
000016  6801              LDR      r1,[r0,#0]  ; os_time
000018  1c49              ADDS     r1,r1,#1
;;;251      rt_dec_dly ();
00001a  6001              STR      r1,[r0,#0]  ; os_time
00001c  f7fffffe          BL       rt_dec_dly
;;;252    
;;;253      /* Check the user timers. */
;;;254      rt_tmr_tick ();
000020  f7fffffe          BL       rt_tmr_tick
;;;255    
;;;256      /* Switch back to highest ready task */
;;;257      next = rt_get_first (&os_rdy);
000024  4805              LDR      r0,|L8.60|
000026  f7fffffe          BL       rt_get_first
;;;258      rt_switch_req (next);
00002a  e8bd4010          POP      {r4,lr}
00002e  f7ffbffe          B.W      rt_switch_req
;;;259    }
;;;260    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      os_tsk
                  |L8.56|
                          DCD      os_time
                  |L8.60|
                          DCD      os_rdy

                          AREA ||i.rt_tsk_lock||, CODE, READONLY, ALIGN=2

                  rt_tsk_lock PROC
;;;139    
;;;140    void rt_tsk_lock (void) {
000000  4911              LDR      r1,|L9.72|
000002  b510              PUSH     {r4,lr}
;;;141      /* Prevent task switching by locking out scheduler */
;;;142      if (os_tick_irqn < 0) {
000004  6848              LDR      r0,[r1,#4]  ; os_tick_irqn
;;;143        OS_LOCK();
;;;144        os_lock = __TRUE;
000006  2301              MOVS     r3,#1
;;;145        OS_UNPEND (&pend_flags);
000008  4a10              LDR      r2,|L9.76|
00000a  2800              CMP      r0,#0                 ;142
00000c  da0a              BGE      |L9.36|
00000e  f04f24e0          MOV      r4,#0xe000e000        ;143
000012  2005              MOVS     r0,#5                 ;143
000014  6120              STR      r0,[r4,#0x10]         ;143
000016  700b              STRB     r3,[r1,#0]            ;144
000018  6813              LDR      r3,[r2,#0]
00001a  ea006093          AND      r0,r0,r3,LSR #26
00001e  7088              STRB     r0,[r1,#2]
000020  0640              LSLS     r0,r0,#25
000022  e00f              B        |L9.68|
                  |L9.36|
;;;146      } else {
;;;147        OS_X_LOCK(os_tick_irqn);
000024  f000041f          AND      r4,r0,#0x1f
000028  fa03f404          LSL      r4,r3,r4
00002c  1140              ASRS     r0,r0,#5
00002e  0080              LSLS     r0,r0,#2
000030  f10020e0          ADD      r0,r0,#0xe000e000
000034  f8c04180          STR      r4,[r0,#0x180]
;;;148        os_lock = __TRUE;
000038  700b              STRB     r3,[r1,#0]
;;;149        OS_X_UNPEND (&pend_flags);
00003a  6810              LDR      r0,[r2,#0]
00003c  f3c07000          UBFX     r0,r0,#28,#1
000040  7088              STRB     r0,[r1,#2]
000042  06c0              LSLS     r0,r0,#27
                  |L9.68|
000044  6010              STR      r0,[r2,#0]            ;145
;;;150      }
;;;151    }
000046  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  |L9.72|
                          DCD      ||.data||
                  |L9.76|
                          DCD      0xe000ed04

                          AREA ||i.rt_tsk_unlock||, CODE, READONLY, ALIGN=2

                  rt_tsk_unlock PROC
;;;155    
;;;156    void rt_tsk_unlock (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;157      /* Unlock scheduler and re-enable task switching */
;;;158      if (os_tick_irqn < 0) {
000002  4a11              LDR      r2,|L10.72|
000004  2300              MOVS     r3,#0
000006  4610              MOV      r0,r2
000008  6851              LDR      r1,[r2,#4]  ; os_tick_irqn
;;;159        OS_UNLOCK();
;;;160        os_lock = __FALSE;
;;;161        OS_PEND (pend_flags, os_psh_flag);
00000a  4c10              LDR      r4,|L10.76|
00000c  7880              LDRB     r0,[r0,#2]
00000e  2900              CMP      r1,#0                 ;158
000010  da09              BGE      |L10.38|
000012  f04f25e0          MOV      r5,#0xe000e000        ;159
000016  2107              MOVS     r1,#7                 ;159
000018  6129              STR      r1,[r5,#0x10]         ;159
00001a  7013              STRB     r3,[r2,#0]            ;160
00001c  7851              LDRB     r1,[r2,#1]  ; os_psh_flag
00001e  ea400081          ORR      r0,r0,r1,LSL #2
000022  0680              LSLS     r0,r0,#26
;;;162        os_psh_flag = __FALSE;
000024  e00d              B        |L10.66|
                  |L10.38|
;;;163      } else {
;;;164        OS_X_UNLOCK(os_tick_irqn);
000026  f001061f          AND      r6,r1,#0x1f
00002a  2501              MOVS     r5,#1
00002c  40b5              LSLS     r5,r5,r6
00002e  1149              ASRS     r1,r1,#5
000030  0089              LSLS     r1,r1,#2
000032  f10121e0          ADD      r1,r1,#0xe000e000
000036  f8c15100          STR      r5,[r1,#0x100]
;;;165        os_lock = __FALSE;
00003a  7013              STRB     r3,[r2,#0]
;;;166        OS_X_PEND (pend_flags, os_psh_flag);
00003c  7851              LDRB     r1,[r2,#1]  ; os_psh_flag
00003e  4308              ORRS     r0,r0,r1
000040  0700              LSLS     r0,r0,#28
                  |L10.66|
000042  6020              STR      r0,[r4,#0]            ;161
000044  7053              STRB     r3,[r2,#1]            ;162
;;;167        os_psh_flag = __FALSE;
;;;168      }
;;;169    }
000046  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP

                  |L10.72|
                          DCD      ||.data||
                  |L10.76|
                          DCD      0xe000ed04

                          AREA ||.data||, DATA, ALIGN=2

                  os_lock
000000  00                DCB      0x00
                  os_psh_flag
000001  00                DCB      0x00
                  pend_flags
000002  0000              DCB      0x00,0x00
                  os_tick_irqn
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\rtos\\rt_System.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT ||$$RTX$$version||
#line 53
||$$RTX$$version|| PROC
#line 53

 

 EXPORT __RL_RTX_VER

__RL_RTX_VER EQU 0x470
	ENDP

;*** End   embedded assembler ***
