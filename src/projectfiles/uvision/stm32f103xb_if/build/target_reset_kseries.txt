; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\target_reset_kseries.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\target_reset_kseries.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\target_reset_kseries.crf ..\..\..\source\family\freescale\target_reset_Kseries.c]
                          THUMB

                          AREA ||i.security_bits_set||, CODE, READONLY, ALIGN=1

                  security_bits_set PROC
;;;108    //
;;;109    static uint8_t security_bits_set(uint32_t addr, uint8_t *data, uint32_t size)
000000  f240430c          MOV      r3,#0x40c
;;;110    {
;;;111        const uint32_t fsec_addr = 0x40C;
;;;112    
;;;113        if ((addr <= fsec_addr) && (addr + size) > fsec_addr) {
000004  4298              CMP      r0,r3
000006  d80f              BHI      |L1.40|
000008  4402              ADD      r2,r2,r0
00000a  429a              CMP      r2,r3
00000c  d90c              BLS      |L1.40|
;;;114            uint8_t fsec = data[fsec_addr - addr];
00000e  1a08              SUBS     r0,r1,r0
000010  f890040c          LDRB     r0,[r0,#0x40c]
;;;115    
;;;116            // make sure we can unsecure the device or dont program at all
;;;117            if ((fsec & 0x30) == 0x20) {
000014  f3c01101          UBFX     r1,r0,#4,#2
000018  2902              CMP      r1,#2
00001a  d003              BEQ      |L1.36|
;;;118                // Dont allow programming mass-erase disabled state
;;;119                return 1;
;;;120            }
;;;121    
;;;122            // Security is OK long as we can mass-erase (comment the following out to enable target security)
;;;123            if ((fsec & 0x03) != 0x02) {
00001c  f0000003          AND      r0,r0,#3
000020  2802              CMP      r0,#2
000022  d001              BEQ      |L1.40|
                  |L1.36|
;;;124                return 1;
000024  2001              MOVS     r0,#1
;;;125            }
;;;126        }
;;;127    
;;;128        return 0;
;;;129    }
000026  4770              BX       lr
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;128
00002a  4770              BX       lr
;;;130    
                          ENDP


                          AREA ||i.target_before_init_debug||, CODE, READONLY, ALIGN=1

                  target_before_init_debug PROC
;;;30     
;;;31     static void target_before_init_debug(void)
000000  2001              MOVS     r0,#1
;;;32     {
;;;33         swd_set_target_reset(1);
000002  f7ffbffe          B.W      swd_set_target_reset
;;;34     }
;;;35     
                          ENDP


                          AREA ||i.target_unlock_sequence||, CODE, READONLY, ALIGN=2

                  target_unlock_sequence PROC
;;;35     
;;;36     static uint8_t target_unlock_sequence(void)
000000  b538              PUSH     {r3-r5,lr}
;;;37     {
;;;38         uint32_t val;
;;;39     
;;;40         // read the device ID
;;;41         if (!swd_read_ap(MDM_IDR, &val)) {
000002  4669              MOV      r1,sp
000004  4819              LDR      r0,|L3.108|
000006  f7fffffe          BL       swd_read_ap
00000a  2800              CMP      r0,#0
00000c  d004              BEQ      |L3.24|
;;;42             return 0;
;;;43         }
;;;44     
;;;45         // verify the result
;;;46         if (val != MDM_ID) {
00000e  9800              LDR      r0,[sp,#0]
000010  f5b01fe0          CMP      r0,#0x1c0000
000014  d001              BEQ      |L3.26|
;;;47             return 0;
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;48         }
;;;49     
;;;50         if (!swd_read_ap(MDM_STATUS, &val)) {
;;;51             return 0;
;;;52         }
;;;53     
;;;54         // flash in secured mode
;;;55         if (val & (1 << 2)) {
;;;56             // hold the device in reset
;;;57             swd_set_target_reset(1);
;;;58     
;;;59             // write the mass-erase enable bit
;;;60             if (!swd_write_ap(MDM_CTRL, 1)) {
;;;61                 return 0;
;;;62             }
;;;63     
;;;64             while (1) {
;;;65                 // wait until mass erase is started
;;;66                 if (!swd_read_ap(MDM_STATUS, &val)) {
;;;67                     return 0;
;;;68                 }
;;;69     
;;;70                 if (val & 1) {
;;;71                     break;
;;;72                 }
;;;73             }
;;;74     
;;;75             // mass erase in progress
;;;76             while (1) {
;;;77                 // keep reading until procedure is complete
;;;78                 if (!swd_read_ap(MDM_CTRL, &val)) {
;;;79                     return 0;
;;;80                 }
;;;81     
;;;82                 if (val == 0) {
;;;83                     break;
;;;84                 }
;;;85             }
;;;86         }
;;;87     
;;;88         return 1;
;;;89     }
000018  bd38              POP      {r3-r5,pc}
                  |L3.26|
00001a  f04f7580          MOV      r5,#0x1000000         ;50
00001e  4669              MOV      r1,sp                 ;50
000020  4628              MOV      r0,r5                 ;50
000022  f7fffffe          BL       swd_read_ap
000026  2800              CMP      r0,#0                 ;50
000028  d0f6              BEQ      |L3.24|
00002a  9800              LDR      r0,[sp,#0]            ;55
00002c  0740              LSLS     r0,r0,#29             ;55
00002e  d51b              BPL      |L3.104|
000030  2001              MOVS     r0,#1                 ;57
000032  f7fffffe          BL       swd_set_target_reset
000036  1d2c              ADDS     r4,r5,#4              ;60
000038  2101              MOVS     r1,#1                 ;60
00003a  4620              MOV      r0,r4                 ;60
00003c  f7fffffe          BL       swd_write_ap
000040  2800              CMP      r0,#0                 ;60
000042  d0e9              BEQ      |L3.24|
                  |L3.68|
000044  4669              MOV      r1,sp                 ;66
000046  4628              MOV      r0,r5                 ;66
000048  f7fffffe          BL       swd_read_ap
00004c  2800              CMP      r0,#0                 ;66
00004e  d0e3              BEQ      |L3.24|
000050  9800              LDR      r0,[sp,#0]            ;70
000052  07c0              LSLS     r0,r0,#31             ;70
000054  d0f6              BEQ      |L3.68|
                  |L3.86|
000056  4669              MOV      r1,sp                 ;78
000058  4620              MOV      r0,r4                 ;78
00005a  f7fffffe          BL       swd_read_ap
00005e  2800              CMP      r0,#0                 ;78
000060  d0da              BEQ      |L3.24|
000062  9800              LDR      r0,[sp,#0]            ;82
000064  2800              CMP      r0,#0                 ;82
000066  d1f6              BNE      |L3.86|
                  |L3.104|
000068  2001              MOVS     r0,#1                 ;88
00006a  bd38              POP      {r3-r5,pc}
;;;90     
                          ENDP

                  |L3.108|
                          DCD      0x010000fc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_nxp_kinetis_kseries
000000  0b01              DCW      0x0b01
000002  0100              DCB      0x01,0x00
                          DCD      0x00000000
                          DCD      target_before_init_debug
                          DCD      0x00000000
                          DCD      target_unlock_sequence
                          DCD      security_bits_set
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\family\\freescale\\target_reset_Kseries.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_target_reset_Kseries_c_3f437189____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___22_target_reset_Kseries_c_3f437189____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_target_reset_Kseries_c_3f437189____REVSH|
#line 495
|__asm___22_target_reset_Kseries_c_3f437189____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_target_reset_Kseries_c_3f437189____RRX|
#line 682
|__asm___22_target_reset_Kseries_c_3f437189____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
