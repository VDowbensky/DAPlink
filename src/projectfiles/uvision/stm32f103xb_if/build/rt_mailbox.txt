; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_mailbox.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_mailbox.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_mailbox.crf ..\..\..\source\rtos\rt_Mailbox.c]
                          THUMB

                          AREA ||i.isr_mbx_receive||, CODE, READONLY, ALIGN=1

                  isr_mbx_receive PROC
;;;176    
;;;177    OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;178      /* Receive a message in the interrupt function. The interrupt function   */
;;;179      /* should not wait for a message since this would block the rtx os.      */
;;;180      P_MCB p_MCB = mailbox;
;;;181    
;;;182      if (p_MCB->count) {
000004  8980              LDRH     r0,[r0,#0xc]
000006  2800              CMP      r0,#0                 ;177
000008  d01e              BEQ      |L1.72|
;;;183        /* A message is available in the fifo buffer. */
;;;184        *message = p_MCB->msg[p_MCB->last];
00000a  8960              LDRH     r0,[r4,#0xa]
00000c  eb040080          ADD      r0,r4,r0,LSL #2
000010  6900              LDR      r0,[r0,#0x10]
;;;185        if (p_MCB->isr_st == 1) {
000012  6008              STR      r0,[r1,#0]
000014  7860              LDRB     r0,[r4,#1]
000016  2801              CMP      r0,#1
000018  d107              BNE      |L1.42|
;;;186          /* A task is locked waiting to send message */
;;;187          p_MCB->isr_st = 2;
00001a  2002              MOVS     r0,#2
00001c  7060              STRB     r0,[r4,#1]
;;;188          rt_psq_enq (p_MCB, 0);
00001e  2100              MOVS     r1,#0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       rt_psq_enq
;;;189          rt_psh_req ();
000026  f7fffffe          BL       rt_psh_req
                  |L1.42|
;;;190        }
;;;191        rt_dec (&p_MCB->count);
00002a  b672              CPSID    i
00002c  89a0              LDRH     r0,[r4,#0xc]
00002e  1e40              SUBS     r0,r0,#1
000030  81a0              STRH     r0,[r4,#0xc]
000032  b662              CPSIE    i
;;;192        if (++p_MCB->last == p_MCB->size) {
000034  8960              LDRH     r0,[r4,#0xa]
000036  1c40              ADDS     r0,r0,#1
000038  b280              UXTH     r0,r0
00003a  8160              STRH     r0,[r4,#0xa]
00003c  89e1              LDRH     r1,[r4,#0xe]
00003e  4288              CMP      r0,r1
000040  d101              BNE      |L1.70|
;;;193          p_MCB->last = 0;
000042  2000              MOVS     r0,#0
000044  8160              STRH     r0,[r4,#0xa]
                  |L1.70|
;;;194        }
;;;195        return (OS_R_MBX);
000046  2004              MOVS     r0,#4
                  |L1.72|
;;;196      }
;;;197      return (OS_R_OK);
;;;198    }
000048  bd10              POP      {r4,pc}
;;;199    
                          ENDP


                          AREA ||i.isr_mbx_send||, CODE, READONLY, ALIGN=1

                  isr_mbx_send PROC
;;;165    
;;;166    void isr_mbx_send (OS_ID mailbox, void *p_msg) {
000000  b510              PUSH     {r4,lr}
;;;167      /* Same function as "os_mbx_send", but to be called by ISRs. */
;;;168      P_MCB p_MCB = mailbox;
;;;169    
;;;170      rt_psq_enq (p_MCB, (U32)p_msg);
000002  f7fffffe          BL       rt_psq_enq
;;;171      rt_psh_req ();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      rt_psh_req
;;;172    }
;;;173    
                          ENDP


                          AREA ||i.rt_mbx_check||, CODE, READONLY, ALIGN=1

                  rt_mbx_check PROC
;;;154    
;;;155    OS_RESULT rt_mbx_check (OS_ID mailbox) {
000000  89c1              LDRH     r1,[r0,#0xe]
;;;156      /* Check for free space in a mailbox. Returns the number of messages     */
;;;157      /* that can be stored to a mailbox. It returns 0 when mailbox is full.   */
;;;158      P_MCB p_MCB = mailbox;
;;;159    
;;;160      return (p_MCB->size - p_MCB->count);
000002  8980              LDRH     r0,[r0,#0xc]
000004  1a08              SUBS     r0,r1,r0
;;;161    }
000006  4770              BX       lr
;;;162    
                          ENDP


                          AREA ||i.rt_mbx_init||, CODE, READONLY, ALIGN=1

                  rt_mbx_init PROC
;;;37     
;;;38     void rt_mbx_init (OS_ID mailbox, U16 mbx_size) {
000000  2201              MOVS     r2,#1
;;;39       /* Initialize a mailbox */
;;;40       P_MCB p_MCB = mailbox;
;;;41     
;;;42       p_MCB->cb_type = MCB;
000002  7002              STRB     r2,[r0,#0]
;;;43       p_MCB->isr_st  = 0;
000004  2200              MOVS     r2,#0
000006  7042              STRB     r2,[r0,#1]
;;;44       p_MCB->p_lnk   = NULL;
;;;45       p_MCB->first   = 0;
000008  6042              STR      r2,[r0,#4]
00000a  8102              STRH     r2,[r0,#8]
;;;46       p_MCB->last    = 0;
00000c  8142              STRH     r2,[r0,#0xa]
;;;47       p_MCB->count   = 0;
00000e  3910              SUBS     r1,r1,#0x10
000010  8182              STRH     r2,[r0,#0xc]
;;;48       p_MCB->size    = (mbx_size + sizeof(void *) - sizeof(struct OS_MCB)) /
000012  0889              LSRS     r1,r1,#2
000014  81c1              STRH     r1,[r0,#0xe]
;;;49                                                          (U32)sizeof (void *);
;;;50     }
000016  4770              BX       lr
;;;51     
                          ENDP


                          AREA ||i.rt_mbx_psh||, CODE, READONLY, ALIGN=2

                  rt_mbx_psh PROC
;;;202    
;;;203    void rt_mbx_psh (P_MCB p_CB, void *p_msg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;204      /* Store the message to the mailbox queue or pass it to task directly. */
;;;205      P_TCB p_TCB;
;;;206    
;;;207      /* Check if this was an 'isr_mbx_receive ()' post service request.   */
;;;208      if (p_CB->p_lnk != NULL && p_CB->isr_st == 2) {
000006  6840              LDR      r0,[r0,#4]
000008  460f              MOV      r7,r1                 ;203
00000a  2600              MOVS     r6,#0
00000c  b120              CBZ      r0,|L5.24|
00000e  7860              LDRB     r0,[r4,#1]
000010  2802              CMP      r0,#2
000012  d018              BEQ      |L5.70|
;;;209        /* A task is waiting to send message, remove it from the waiting list. */
;;;210        p_CB->isr_st = 0;
;;;211        p_TCB = rt_get_first ((P_XCB)p_CB);
;;;212        p_TCB->ret_val = OS_R_OK;
;;;213        /* Store the message to the mailbox queue. */
;;;214        p_CB->msg[p_CB->first] = p_TCB->msg;
;;;215        rt_inc (&p_CB->count);
;;;216        if (++p_CB->first == p_CB->size) {
;;;217          p_CB->first = 0;
;;;218        }
;;;219        goto rdy;
;;;220      }
;;;221      /* A task is waiting for message, pass the message to task directly. */
;;;222      if (p_CB->p_lnk != NULL && p_CB->count == 0) {
000014  89a0              LDRH     r0,[r4,#0xc]
000016  b380              CBZ      r0,|L5.122|
                  |L5.24|
;;;223        p_TCB = rt_get_first ((P_XCB)p_CB);
;;;224        *p_TCB->msg = p_msg;
;;;225        p_TCB->ret_val = OS_R_MBX;
;;;226    rdy:p_TCB->state = READY;
;;;227        rt_rmv_dly (p_TCB);
;;;228        rt_put_prio (&os_rdy, p_TCB);
;;;229      }
;;;230      else {
;;;231        /* No task is waiting for message, store the message to the mailbox queue.*/
;;;232        if (p_CB->count < p_CB->size) {
000018  89a0              LDRH     r0,[r4,#0xc]
00001a  89e1              LDRH     r1,[r4,#0xe]
00001c  4288              CMP      r0,r1
00001e  d241              BCS      |L5.164|
;;;233          p_CB->msg[p_CB->first] = p_msg;
000020  8920              LDRH     r0,[r4,#8]
000022  eb040080          ADD      r0,r4,r0,LSL #2
;;;234          rt_inc (&p_CB->count);
000026  6107              STR      r7,[r0,#0x10]
000028  b672              CPSID    i
00002a  89a0              LDRH     r0,[r4,#0xc]
00002c  1c40              ADDS     r0,r0,#1
00002e  81a0              STRH     r0,[r4,#0xc]
000030  b662              CPSIE    i
;;;235          if (++p_CB->first == p_CB->size) {
000032  8920              LDRH     r0,[r4,#8]
000034  1c40              ADDS     r0,r0,#1
000036  b280              UXTH     r0,r0
000038  8120              STRH     r0,[r4,#8]
00003a  89e1              LDRH     r1,[r4,#0xe]
00003c  4288              CMP      r0,r1
00003e  d100              BNE      |L5.66|
;;;236            p_CB->first = 0;
000040  8126              STRH     r6,[r4,#8]
                  |L5.66|
;;;237          }
;;;238        }
;;;239        else {
;;;240          os_error (OS_ERR_MBX_OVF);
;;;241        }
;;;242      }
;;;243    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L5.70|
000046  7066              STRB     r6,[r4,#1]            ;210
000048  4620              MOV      r0,r4                 ;211
00004a  f7fffffe          BL       rt_get_first
00004e  f8806020          STRB     r6,[r0,#0x20]         ;212
000052  8921              LDRH     r1,[r4,#8]            ;214
000054  4605              MOV      r5,r0                 ;211
000056  eb040181          ADD      r1,r4,r1,LSL #2       ;214
00005a  69c0              LDR      r0,[r0,#0x1c]         ;214
00005c  6108              STR      r0,[r1,#0x10]         ;215
00005e  b672              CPSID    i                     ;215
000060  89a0              LDRH     r0,[r4,#0xc]          ;215
000062  1c40              ADDS     r0,r0,#1              ;215
000064  81a0              STRH     r0,[r4,#0xc]          ;215
000066  b662              CPSIE    i                     ;215
000068  8920              LDRH     r0,[r4,#8]            ;216
00006a  1c40              ADDS     r0,r0,#1              ;216
00006c  b280              UXTH     r0,r0                 ;216
00006e  8120              STRH     r0,[r4,#8]            ;216
000070  89e1              LDRH     r1,[r4,#0xe]          ;216
000072  4288              CMP      r0,r1                 ;216
000074  d10b              BNE      |L5.142|
000076  8126              STRH     r6,[r4,#8]            ;217
000078  e009              B        |L5.142|
                  |L5.122|
00007a  e7ff              B        |L5.124|
                  |L5.124|
00007c  4620              MOV      r0,r4                 ;223
00007e  f7fffffe          BL       rt_get_first
000082  4605              MOV      r5,r0                 ;223
000084  69c0              LDR      r0,[r0,#0x1c]         ;224
000086  2104              MOVS     r1,#4                 ;225
000088  6007              STR      r7,[r0,#0]            ;225
00008a  f8851020          STRB     r1,[r5,#0x20]         ;225
                  |L5.142|
00008e  2001              MOVS     r0,#1                 ;226
000090  7068              STRB     r0,[r5,#1]            ;226
000092  4628              MOV      r0,r5                 ;227
000094  f7fffffe          BL       rt_rmv_dly
000098  4629              MOV      r1,r5                 ;228
00009a  e8bd41f0          POP      {r4-r8,lr}            ;228
00009e  4804              LDR      r0,|L5.176|
0000a0  f7ffbffe          B.W      rt_put_prio
                  |L5.164|
0000a4  e8bd41f0          POP      {r4-r8,lr}            ;240
0000a8  2003              MOVS     r0,#3                 ;240
0000aa  f7ffbffe          B.W      os_error
;;;244    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L5.176|
                          DCD      os_rdy

                          AREA ||i.rt_mbx_send||, CODE, READONLY, ALIGN=2

                  rt_mbx_send PROC
;;;54     
;;;55     OS_RESULT rt_mbx_send (OS_ID mailbox, void *p_msg, U16 timeout) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4617              MOV      r7,r2
000006  460c              MOV      r4,r1
;;;56       /* Send message to a mailbox */
;;;57       P_MCB p_MCB = mailbox;
;;;58       P_TCB p_TCB;
;;;59     
;;;60       if (p_MCB->p_lnk != NULL && p_MCB->count == 0) {
000008  8981              LDRH     r1,[r0,#0xc]
;;;61         /* A task is waiting for message */
;;;62         p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;63         *p_TCB->msg    = p_msg;
;;;64         p_TCB->ret_val = OS_R_MBX;
;;;65         rt_rmv_dly (p_TCB);
;;;66         rt_dispatch (p_TCB);
;;;67         os_tsk.run->ret_val = OS_R_OK;
00000a  4d22              LDR      r5,|L6.148|
00000c  6842              LDR      r2,[r0,#4]            ;55
00000e  2600              MOVS     r6,#0                 ;60
000010  b102              CBZ      r2,|L6.20|
000012  b149              CBZ      r1,|L6.40|
                  |L6.20|
;;;68       }
;;;69       else {
;;;70         /* Store message in mailbox queue */
;;;71         if (p_MCB->count == p_MCB->size) {
000014  89c3              LDRH     r3,[r0,#0xe]
000016  4299              CMP      r1,r3
000018  d129              BNE      |L6.110|
;;;72           /* No free message entry, wait for one. If message queue is full, */
;;;73           /* then no task is waiting for message. The 'p_MCB->p_lnk' list   */
;;;74           /* pointer can now be reused for send message waits task list.    */
;;;75           if (timeout == 0) {
00001a  b1bf              CBZ      r7,|L6.76|
00001c  491d              LDR      r1,|L6.148|
00001e  6809              LDR      r1,[r1,#0]            ;67
;;;76             return (OS_R_TMO);
;;;77           }
;;;78           if (p_MCB->p_lnk != NULL) {
000020  b1ba              CBZ      r2,|L6.82|
;;;79             rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
000022  f7fffffe          BL       rt_put_prio
000026  e01b              B        |L6.96|
                  |L6.40|
000028  f7fffffe          BL       rt_get_first
00002c  4607              MOV      r7,r0                 ;62
00002e  69c0              LDR      r0,[r0,#0x1c]         ;63
000030  6004              STR      r4,[r0,#0]            ;64
000032  2004              MOVS     r0,#4                 ;64
000034  f8870020          STRB     r0,[r7,#0x20]         ;64
000038  4638              MOV      r0,r7                 ;65
00003a  f7fffffe          BL       rt_rmv_dly
00003e  4638              MOV      r0,r7                 ;66
000040  f7fffffe          BL       rt_dispatch
000044  6828              LDR      r0,[r5,#0]            ;67  ; os_tsk
000046  f8806020          STRB     r6,[r0,#0x20]         ;67
00004a  e021              B        |L6.144|
                  |L6.76|
00004c  2001              MOVS     r0,#1                 ;76
                  |L6.78|
;;;80           }
;;;81           else {
;;;82             p_MCB->p_lnk = os_tsk.run;
;;;83             os_tsk.run->p_lnk  = NULL;
;;;84             os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;85             /* Signal the 'isr_mbx_receive ()' that the task is waiting */
;;;86             /* to send a message */
;;;87             p_MCB->isr_st = 1;
;;;88           }
;;;89           os_tsk.run->msg = p_msg;
;;;90           rt_block (timeout, WAIT_MBX);
;;;91           return (OS_R_TMO);
;;;92         }
;;;93         /* Yes, there is a free entry in a mailbox. */
;;;94         p_MCB->msg[p_MCB->first] = p_msg;
;;;95         rt_inc (&p_MCB->count);
;;;96         if (++p_MCB->first == p_MCB->size) {
;;;97           p_MCB->first = 0;
;;;98         }
;;;99       }
;;;100      return (OS_R_OK);
;;;101    }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L6.82|
000052  6041              STR      r1,[r0,#4]            ;83
000054  6829              LDR      r1,[r5,#0]            ;83  ; os_tsk
000056  604e              STR      r6,[r1,#4]            ;84
000058  6829              LDR      r1,[r5,#0]            ;84  ; os_tsk
00005a  6088              STR      r0,[r1,#8]            ;87
00005c  2101              MOVS     r1,#1                 ;87
00005e  7041              STRB     r1,[r0,#1]            ;87
                  |L6.96|
000060  6828              LDR      r0,[r5,#0]            ;89  ; os_tsk
000062  2108              MOVS     r1,#8                 ;90
000064  61c4              STR      r4,[r0,#0x1c]         ;90
000066  4638              MOV      r0,r7                 ;90
000068  f7fffffe          BL       rt_block
00006c  e7ee              B        |L6.76|
                  |L6.110|
00006e  8901              LDRH     r1,[r0,#8]            ;94
000070  eb000181          ADD      r1,r0,r1,LSL #2       ;94
000074  610c              STR      r4,[r1,#0x10]         ;95
000076  b672              CPSID    i                     ;95
000078  8981              LDRH     r1,[r0,#0xc]          ;95
00007a  1c49              ADDS     r1,r1,#1              ;95
00007c  8181              STRH     r1,[r0,#0xc]          ;95
00007e  b662              CPSIE    i                     ;95
000080  8901              LDRH     r1,[r0,#8]            ;96
000082  1c49              ADDS     r1,r1,#1              ;96
000084  b289              UXTH     r1,r1                 ;96
000086  8101              STRH     r1,[r0,#8]            ;96
000088  89c2              LDRH     r2,[r0,#0xe]          ;96
00008a  4291              CMP      r1,r2                 ;96
00008c  d100              BNE      |L6.144|
00008e  8106              STRH     r6,[r0,#8]            ;97
                  |L6.144|
000090  2000              MOVS     r0,#0                 ;100
000092  e7dc              B        |L6.78|
;;;102    
                          ENDP

                  |L6.148|
                          DCD      os_tsk

                          AREA ||i.rt_mbx_wait||, CODE, READONLY, ALIGN=2

                  rt_mbx_wait PROC
;;;105    
;;;106    OS_RESULT rt_mbx_wait (OS_ID mailbox, void **message, U16 timeout) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;107      /* Receive a message; possibly wait for it */
;;;108      P_MCB p_MCB = mailbox;
;;;109      P_TCB p_TCB;
;;;110    
;;;111      /* If a message is available in the fifo buffer */
;;;112      /* remove it from the fifo buffer and return. */
;;;113      if (p_MCB->count) {
000006  8980              LDRH     r0,[r0,#0xc]
;;;114        *message = p_MCB->msg[p_MCB->last];
;;;115        if (++p_MCB->last == p_MCB->size) {
;;;116          p_MCB->last = 0;
;;;117        }
;;;118        if (p_MCB->p_lnk != NULL) {
;;;119          /* A task is waiting to send message */
;;;120          p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;121          p_TCB->ret_val = OS_R_OK;
;;;122          p_MCB->msg[p_MCB->first] = p_TCB->msg;
;;;123          if (++p_MCB->first == p_MCB->size) {
;;;124            p_MCB->first = 0;
;;;125          }
;;;126          rt_rmv_dly (p_TCB);
;;;127          rt_dispatch (p_TCB);
;;;128          os_tsk.run->ret_val = OS_R_OK;
000008  4f29              LDR      r7,|L7.176|
00000a  4690              MOV      r8,r2                 ;106
00000c  460d              MOV      r5,r1                 ;106
00000e  2600              MOVS     r6,#0                 ;113
000010  b398              CBZ      r0,|L7.122|
000012  8960              LDRH     r0,[r4,#0xa]          ;114
000014  eb040080          ADD      r0,r4,r0,LSL #2       ;114
000018  6900              LDR      r0,[r0,#0x10]         ;114
00001a  6008              STR      r0,[r1,#0]            ;115
00001c  8960              LDRH     r0,[r4,#0xa]          ;115
00001e  1c40              ADDS     r0,r0,#1              ;115
000020  b280              UXTH     r0,r0                 ;115
000022  8160              STRH     r0,[r4,#0xa]          ;115
000024  89e1              LDRH     r1,[r4,#0xe]          ;115
000026  4288              CMP      r0,r1                 ;115
000028  d100              BNE      |L7.44|
00002a  8166              STRH     r6,[r4,#0xa]          ;116
                  |L7.44|
00002c  6860              LDR      r0,[r4,#4]            ;118
00002e  b1e0              CBZ      r0,|L7.106|
000030  4620              MOV      r0,r4                 ;120
000032  f7fffffe          BL       rt_get_first
000036  f8806020          STRB     r6,[r0,#0x20]         ;121
00003a  8921              LDRH     r1,[r4,#8]            ;122
00003c  4605              MOV      r5,r0                 ;120
00003e  eb040181          ADD      r1,r4,r1,LSL #2       ;122
000042  69c0              LDR      r0,[r0,#0x1c]         ;122
000044  6108              STR      r0,[r1,#0x10]         ;123
000046  8920              LDRH     r0,[r4,#8]            ;123
000048  1c40              ADDS     r0,r0,#1              ;123
00004a  b280              UXTH     r0,r0                 ;123
00004c  8120              STRH     r0,[r4,#8]            ;123
00004e  89e1              LDRH     r1,[r4,#0xe]          ;123
000050  4288              CMP      r0,r1                 ;123
000052  d100              BNE      |L7.86|
000054  8126              STRH     r6,[r4,#8]            ;124
                  |L7.86|
000056  4628              MOV      r0,r5                 ;126
000058  f7fffffe          BL       rt_rmv_dly
00005c  4628              MOV      r0,r5                 ;127
00005e  f7fffffe          BL       rt_dispatch
000062  6838              LDR      r0,[r7,#0]  ; os_tsk
000064  f8806020          STRB     r6,[r0,#0x20]
000068  e004              B        |L7.116|
                  |L7.106|
;;;129        }
;;;130        else {
;;;131          rt_dec (&p_MCB->count);
00006a  b672              CPSID    i
00006c  89a0              LDRH     r0,[r4,#0xc]
00006e  1e40              SUBS     r0,r0,#1
000070  81a0              STRH     r0,[r4,#0xc]
000072  b662              CPSIE    i
                  |L7.116|
;;;132        }
;;;133        return (OS_R_OK);
000074  2000              MOVS     r0,#0
                  |L7.118|
;;;134      }
;;;135      /* No message available: wait for one */
;;;136      if (timeout == 0) {
;;;137        return (OS_R_TMO);
;;;138      }
;;;139      if (p_MCB->p_lnk != NULL) {
;;;140        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;141      }
;;;142      else {
;;;143        p_MCB->p_lnk = os_tsk.run;
;;;144        os_tsk.run->p_lnk = NULL;
;;;145        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;146      }
;;;147      rt_block(timeout, WAIT_MBX);
;;;148      os_tsk.run->msg = message;
;;;149      return (OS_R_TMO);
;;;150    }
000076  e8bd81f0          POP      {r4-r8,pc}
                  |L7.122|
00007a  e7ff              B        |L7.124|
                  |L7.124|
00007c  f1b80f00          CMP      r8,#0                 ;136
000080  d007              BEQ      |L7.146|
000082  490b              LDR      r1,|L7.176|
000084  6860              LDR      r0,[r4,#4]            ;128
000086  6809              LDR      r1,[r1,#0]            ;128
000088  b128              CBZ      r0,|L7.150|
00008a  4620              MOV      r0,r4                 ;140
00008c  f7fffffe          BL       rt_put_prio
000090  e006              B        |L7.160|
                  |L7.146|
000092  2001              MOVS     r0,#1                 ;137
000094  e7ef              B        |L7.118|
                  |L7.150|
000096  6061              STR      r1,[r4,#4]            ;144
000098  6838              LDR      r0,[r7,#0]            ;144  ; os_tsk
00009a  6046              STR      r6,[r0,#4]            ;145
00009c  6838              LDR      r0,[r7,#0]            ;145  ; os_tsk
00009e  6084              STR      r4,[r0,#8]            ;145
                  |L7.160|
0000a0  2108              MOVS     r1,#8                 ;147
0000a2  4640              MOV      r0,r8                 ;147
0000a4  f7fffffe          BL       rt_block
0000a8  6838              LDR      r0,[r7,#0]            ;148  ; os_tsk
0000aa  61c5              STR      r5,[r0,#0x1c]         ;149
0000ac  e7f1              B        |L7.146|
;;;151    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L7.176|
                          DCD      os_tsk
