; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rt_mutex.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rt_mutex.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rt_mutex.crf ..\..\..\source\rtos\rt_Mutex.c]
                          THUMB

                          AREA ||i.rt_mut_init||, CODE, READONLY, ALIGN=1

                  rt_mut_init PROC
;;;35     
;;;36     void rt_mut_init (OS_ID mutex) {
000000  2103              MOVS     r1,#3
;;;37       /* Initialize a mutex object */
;;;38       P_MUCB p_MCB = mutex;
;;;39     
;;;40       p_MCB->cb_type = MUCB;
000002  7001              STRB     r1,[r0,#0]
;;;41       p_MCB->prio    = 0;
000004  2100              MOVS     r1,#0
000006  7041              STRB     r1,[r0,#1]
;;;42       p_MCB->level   = 0;
000008  8041              STRH     r1,[r0,#2]
;;;43       p_MCB->p_lnk   = NULL;
;;;44       p_MCB->owner   = NULL;
00000a  6041              STR      r1,[r0,#4]
00000c  6081              STR      r1,[r0,#8]
;;;45     }
00000e  4770              BX       lr
;;;46     
                          ENDP


                          AREA ||i.rt_mut_release||, CODE, READONLY, ALIGN=2

                  rt_mut_release PROC
;;;49     
;;;50     OS_RESULT rt_mut_release (OS_ID mutex) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
;;;51       /* Release a mutex object */
;;;52       P_MUCB p_MCB = mutex;
;;;53       P_TCB p_TCB;
;;;54     
;;;55       if (p_MCB->level == 0 || p_MCB->owner != os_tsk.run) {
000006  8840              LDRH     r0,[r0,#2]
000008  b120              CBZ      r0,|L2.20|
00000a  4e27              LDR      r6,|L2.168|
00000c  68a1              LDR      r1,[r4,#8]
00000e  6832              LDR      r2,[r6,#0]  ; os_tsk
000010  4291              CMP      r1,r2
000012  d002              BEQ      |L2.26|
                  |L2.20|
;;;56         /* Unbalanced mutex release or task is not the owner */
;;;57         return (OS_R_NOK);
000014  20ff              MOVS     r0,#0xff
                  |L2.22|
;;;58       }
;;;59       if (--p_MCB->level != 0) {
;;;60         return (OS_R_OK);
;;;61       }
;;;62       /* Restore owner task's priority. */
;;;63       os_tsk.run->prio = p_MCB->prio;
;;;64       if (p_MCB->p_lnk != NULL) {
;;;65         /* A task is waiting for mutex. */
;;;66         p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;67         p_TCB->ret_val = OS_R_MUT;
;;;68         rt_rmv_dly (p_TCB);
;;;69         /* A waiting task becomes the owner of this mutex. */
;;;70         p_MCB->level     = 1;
;;;71         p_MCB->owner     = p_TCB;
;;;72         p_MCB->prio      = p_TCB->prio;
;;;73         /* Priority inversion, check which task continues. */
;;;74         if (os_tsk.run->prio >= rt_rdy_prio()) {
;;;75           rt_dispatch (p_TCB);
;;;76         }
;;;77         else {
;;;78           /* Ready task has higher priority than running task. */
;;;79           rt_put_prio (&os_rdy, os_tsk.run);
;;;80           rt_put_prio (&os_rdy, p_TCB);
;;;81           os_tsk.run->state = READY;
;;;82           p_TCB->state      = READY;
;;;83           rt_dispatch (NULL);
;;;84         }
;;;85         os_tsk.run->ret_val = OS_R_OK;
;;;86       }
;;;87       else {
;;;88         /* Check if own priority raised by priority inversion. */
;;;89         if (rt_rdy_prio() > os_tsk.run->prio) {
;;;90           rt_put_prio (&os_rdy, os_tsk.run);
;;;91           os_tsk.run->state = READY;
;;;92           rt_dispatch (NULL);
;;;93           os_tsk.run->ret_val = OS_R_OK;
;;;94         }
;;;95       }
;;;96       return (OS_R_OK);
;;;97     }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L2.26|
00001a  1e40              SUBS     r0,r0,#1
00001c  0400              LSLS     r0,r0,#16             ;59
00001e  0c00              LSRS     r0,r0,#16             ;59
000020  8060              STRH     r0,[r4,#2]            ;59
000022  d13e              BNE      |L2.162|
000024  6831              LDR      r1,[r6,#0]            ;63  ; os_tsk
000026  7860              LDRB     r0,[r4,#1]            ;63
000028  f8df8080          LDR      r8,|L2.172|
00002c  7088              STRB     r0,[r1,#2]            ;63
00002e  6861              LDR      r1,[r4,#4]            ;64
000030  f04f0900          MOV      r9,#0                 ;64
000034  2701              MOVS     r7,#1                 ;70
000036  b339              CBZ      r1,|L2.136|
000038  4620              MOV      r0,r4                 ;66
00003a  f7fffffe          BL       rt_get_first
00003e  4605              MOV      r5,r0                 ;66
000040  2005              MOVS     r0,#5                 ;67
000042  f8850020          STRB     r0,[r5,#0x20]         ;67
000046  4628              MOV      r0,r5                 ;68
000048  f7fffffe          BL       rt_rmv_dly
00004c  8067              STRH     r7,[r4,#2]            ;70
00004e  60a5              STR      r5,[r4,#8]            ;72
000050  78a8              LDRB     r0,[r5,#2]            ;72
000052  7060              STRB     r0,[r4,#1]            ;72
000054  6831              LDR      r1,[r6,#0]            ;74  ; os_tsk
000056  f8d80004          LDR      r0,[r8,#4]            ;74  ; os_rdy
00005a  788a              LDRB     r2,[r1,#2]            ;74
00005c  7880              LDRB     r0,[r0,#2]            ;74
00005e  4282              CMP      r2,r0                 ;74
000060  d301              BCC      |L2.102|
000062  4628              MOV      r0,r5                 ;75
000064  e00a              B        |L2.124|
                  |L2.102|
000066  4811              LDR      r0,|L2.172|
000068  f7fffffe          BL       rt_put_prio
00006c  4629              MOV      r1,r5                 ;80
00006e  480f              LDR      r0,|L2.172|
000070  f7fffffe          BL       rt_put_prio
000074  6830              LDR      r0,[r6,#0]            ;81  ; os_tsk
000076  7047              STRB     r7,[r0,#1]            ;81
000078  706f              STRB     r7,[r5,#1]            ;82
00007a  e010              B        |L2.158|
                  |L2.124|
00007c  f7fffffe          BL       rt_dispatch
000080  6831              LDR      r1,[r6,#0]            ;85  ; os_tsk
000082  f8819020          STRB     r9,[r1,#0x20]         ;85
000086  e00c              B        |L2.162|
                  |L2.136|
000088  f8d81004          LDR      r1,[r8,#4]            ;89  ; os_rdy
00008c  788a              LDRB     r2,[r1,#2]            ;89
00008e  6831              LDR      r1,[r6,#0]            ;89  ; os_tsk
000090  4282              CMP      r2,r0                 ;89
000092  d906              BLS      |L2.162|
000094  4805              LDR      r0,|L2.172|
000096  f7fffffe          BL       rt_put_prio
00009a  6830              LDR      r0,[r6,#0]            ;91  ; os_tsk
00009c  7047              STRB     r7,[r0,#1]            ;91
                  |L2.158|
00009e  2000              MOVS     r0,#0                 ;92
0000a0  e7ec              B        |L2.124|
                  |L2.162|
0000a2  2000              MOVS     r0,#0                 ;96
0000a4  e7b7              B        |L2.22|
;;;98     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      os_tsk
                  |L2.172|
                          DCD      os_rdy

                          AREA ||i.rt_mut_wait||, CODE, READONLY, ALIGN=2

                  rt_mut_wait PROC
;;;101    
;;;102    OS_RESULT rt_mut_wait (OS_ID mutex, U16 timeout) {
000000  b570              PUSH     {r4-r6,lr}
;;;103      /* Wait for a mutex, continue when mutex is free. */
;;;104      P_MUCB p_MCB = mutex;
;;;105    
;;;106      if (p_MCB->level == 0) {
;;;107        p_MCB->owner = os_tsk.run;
000002  4d18              LDR      r5,|L3.100|
000004  460e              MOV      r6,r1                 ;102
000006  4604              MOV      r4,r0                 ;102
000008  8841              LDRH     r1,[r0,#2]            ;106
00000a  6828              LDR      r0,[r5,#0]            ;102
00000c  b139              CBZ      r1,|L3.30|
;;;108        p_MCB->prio  = os_tsk.run->prio;
;;;109        goto inc;
;;;110      }
;;;111      if (p_MCB->owner == os_tsk.run) {
00000e  68a1              LDR      r1,[r4,#8]
000010  4281              CMP      r1,r0
000012  d108              BNE      |L3.38|
                  |L3.20|
;;;112        /* OK, running task is the owner of this mutex. */
;;;113    inc:p_MCB->level++;
000014  8860              LDRH     r0,[r4,#2]
000016  1c40              ADDS     r0,r0,#1
000018  8060              STRH     r0,[r4,#2]
;;;114        return (OS_R_OK);
00001a  2000              MOVS     r0,#0
;;;115      }
;;;116      /* Mutex owned by another task, wait until released. */
;;;117      if (timeout == 0) {
;;;118        return (OS_R_TMO);
;;;119      }
;;;120      /* Raise the owner task priority if lower than current priority. */
;;;121      /* This priority inversion is called priority inheritance.       */
;;;122      if (p_MCB->prio < os_tsk.run->prio) {
;;;123        p_MCB->owner->prio = os_tsk.run->prio;
;;;124        rt_resort_prio (p_MCB->owner);
;;;125      }
;;;126      if (p_MCB->p_lnk != NULL) {
;;;127        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;128      }
;;;129      else {
;;;130        p_MCB->p_lnk = os_tsk.run;
;;;131        os_tsk.run->p_lnk  = NULL;
;;;132        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;133      }
;;;134      rt_block(timeout, WAIT_MUT);
;;;135      return (OS_R_TMO);
;;;136    }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  60a0              STR      r0,[r4,#8]            ;108
000020  7880              LDRB     r0,[r0,#2]            ;108
000022  7060              STRB     r0,[r4,#1]            ;108
000024  e7f6              B        |L3.20|
                  |L3.38|
000026  b176              CBZ      r6,|L3.70|
000028  7862              LDRB     r2,[r4,#1]            ;122
00002a  7880              LDRB     r0,[r0,#2]            ;122
00002c  4282              CMP      r2,r0                 ;122
00002e  d203              BCS      |L3.56|
000030  7088              STRB     r0,[r1,#2]            ;123
000032  68a0              LDR      r0,[r4,#8]            ;124
000034  f7fffffe          BL       rt_resort_prio
                  |L3.56|
000038  6860              LDR      r0,[r4,#4]            ;126
00003a  b130              CBZ      r0,|L3.74|
00003c  4620              MOV      r0,r4                 ;127
00003e  6829              LDR      r1,[r5,#0]            ;127  ; os_tsk
000040  f7fffffe          BL       rt_put_prio
000044  e008              B        |L3.88|
                  |L3.70|
000046  2001              MOVS     r0,#1                 ;118
000048  bd70              POP      {r4-r6,pc}
                  |L3.74|
00004a  6828              LDR      r0,[r5,#0]            ;130  ; os_tsk
00004c  6060              STR      r0,[r4,#4]            ;131
00004e  6829              LDR      r1,[r5,#0]            ;131  ; os_tsk
000050  2000              MOVS     r0,#0                 ;131
000052  6048              STR      r0,[r1,#4]            ;132
000054  6828              LDR      r0,[r5,#0]            ;132  ; os_tsk
000056  6084              STR      r4,[r0,#8]            ;132
                  |L3.88|
000058  2109              MOVS     r1,#9                 ;134
00005a  4630              MOV      r0,r6                 ;134
00005c  f7fffffe          BL       rt_block
000060  e7f1              B        |L3.70|
;;;137    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      os_tsk
