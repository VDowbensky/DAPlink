; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\cmsis_os2_port.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\cmsis_os2_port.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\cmsis_os2_port.crf ..\..\..\source\rtos\cmsis_os2_port.c]
                          THUMB

                          AREA ||i.osDelay||, CODE, READONLY, ALIGN=2

                  osDelay PROC
;;;130    
;;;131    osStatus_t osDelay(uint32_t ticks)
000000  b280              UXTH     r0,r0
;;;132    {
;;;133        os_dly_wait(ticks);
000002  f8dfc008          LDR      r12,|L1.12|
000006  df00              SVC      #0x0
;;;134        return osOK;
000008  2000              MOVS     r0,#0
;;;135    }
00000a  4770              BX       lr
;;;136    
                          ENDP

                  |L1.12|
                          DCD      rt_dly_wait

                          AREA ||i.osKernelGetSysTimerCount||, CODE, READONLY, ALIGN=2

                  osKernelGetSysTimerCount PROC
;;;136    
;;;137    uint32_t osKernelGetSysTimerCount(void)
000000  f8dfc004          LDR      r12,|L2.8|
;;;138    {
;;;139        return os_time_get();
000004  df00              SVC      #0x0
;;;140    }
000006  4770              BX       lr
;;;141    
                          ENDP

                  |L2.8|
                          DCD      rt_time_get

                          AREA ||i.osKernelInitialize||, CODE, READONLY, ALIGN=2

                  osKernelInitialize PROC
;;;39     
;;;40     osStatus_t osKernelInitialize(void)
000000  4901              LDR      r1,|L3.8|
;;;41     {
;;;42         taskCount = 0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]  ; taskCount
;;;43         return osOK;
;;;44     }
000006  4770              BX       lr
;;;45     
                          ENDP

                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.osKernelStart||, CODE, READONLY, ALIGN=1

                  osKernelStart PROC
;;;69     
;;;70     osStatus_t osKernelStart(void)
000000  2000              MOVS     r0,#0
;;;71     {
;;;72         //first thread already started the kernel
;;;73         return osOK;
;;;74     }
000002  4770              BX       lr
;;;75     
                          ENDP


                          AREA ||i.osMutexAcquire||, CODE, READONLY, ALIGN=2

                  osMutexAcquire PROC
;;;113    
;;;114    osStatus_t osMutexAcquire(osMutexId_t mutex_id, uint32_t timeout)
000000  b289              UXTH     r1,r1
;;;115    {
;;;116        os_mut_wait((OS_ID)mutex_id, timeout);
000002  f8dfc008          LDR      r12,|L5.12|
000006  df00              SVC      #0x0
;;;117        return osOK;
000008  2000              MOVS     r0,#0
;;;118    }
00000a  4770              BX       lr
;;;119    
                          ENDP

                  |L5.12|
                          DCD      rt_mut_wait

                          AREA ||i.osMutexNew||, CODE, READONLY, ALIGN=2

                  osMutexNew PROC
;;;107    
;;;108    osMutexId_t osMutexNew(const osMutexAttr_t *attr)
000000  4802              LDR      r0,|L6.12|
;;;109    {
;;;110        os_mut_init(onlyMutex);
000002  f8dfc00c          LDR      r12,|L6.16|
000006  df00              SVC      #0x0
;;;111        return (osMutexId_t)onlyMutex;
000008  4800              LDR      r0,|L6.12|
;;;112    }
00000a  4770              BX       lr
;;;113    
                          ENDP

                  |L6.12|
                          DCD      ||.bss||+0x3a8
                  |L6.16|
                          DCD      rt_mut_init

                          AREA ||i.osMutexRelease||, CODE, READONLY, ALIGN=2

                  osMutexRelease PROC
;;;119    
;;;120    osStatus_t osMutexRelease(osMutexId_t mutex_id)
000000  f8dfc008          LDR      r12,|L7.12|
;;;121    {
;;;122        os_mut_release((OS_ID)mutex_id);
000004  df00              SVC      #0x0
;;;123        return osOK;
000006  2000              MOVS     r0,#0
;;;124    }
000008  4770              BX       lr
;;;125    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      rt_mut_release

                          AREA ||i.osThreadFlagsSet||, CODE, READONLY, ALIGN=2

                  osThreadFlagsSet PROC
;;;59     
;;;60     uint32_t osThreadFlagsSet(osThreadId_t thread_id, uint32_t flags)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  460c              MOV      r4,r1
000004  4601              MOV      r1,r0
000006  f3ef8003          MRS      r0,XPSR
00000a  06c0              LSLS     r0,r0,#27
;;;62         if (cortex_in_isr()){
;;;63             isr_evt_set(flags, (OS_TID)thread_id);
;;;64         }else {
;;;65             os_evt_set(flags, (OS_TID)thread_id);
00000c  b2a0              UXTH     r0,r4
00000e  d002              BEQ      |L8.22|
000010  f7fffffe          BL       isr_evt_set
000014  e002              B        |L8.28|
                  |L8.22|
000016  f8dfc008          LDR      r12,|L8.32|
00001a  df00              SVC      #0x0
                  |L8.28|
;;;66         }
;;;67         return flags;
00001c  4620              MOV      r0,r4
;;;68     }
00001e  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  |L8.32|
                          DCD      rt_evt_set

                          AREA ||i.osThreadFlagsWait||, CODE, READONLY, ALIGN=2

                  osThreadFlagsWait PROC
;;;101    
;;;102    uint32_t osThreadFlagsWait(uint32_t flags, uint32_t options, uint32_t timeout)
000000  b291              UXTH     r1,r2
;;;103    {
;;;104        os_evt_wait_or(flags, timeout);
000002  b280              UXTH     r0,r0
000004  2200              MOVS     r2,#0
000006  f8dfc00c          LDR      r12,|L9.20|
00000a  df00              SVC      #0x0
;;;105        return os_evt_get();
00000c  f8dfc008          LDR      r12,|L9.24|
000010  df00              SVC      #0x0
;;;106    }
000012  4770              BX       lr
;;;107    
                          ENDP

                  |L9.20|
                          DCD      rt_evt_wait
                  |L9.24|
                          DCD      rt_evt_get

                          AREA ||i.osThreadGetId||, CODE, READONLY, ALIGN=2

                  osThreadGetId PROC
;;;125    
;;;126    osThreadId_t osThreadGetId(void)
000000  f8dfc004          LDR      r12,|L10.8|
;;;127    {
;;;128        return (osThreadId_t)os_tsk_self();
000004  df00              SVC      #0x0
;;;129    }
000006  4770              BX       lr
;;;130    
                          ENDP

                  |L10.8|
                          DCD      rt_tsk_self

                          AREA ||i.osThreadNew||, CODE, READONLY, ALIGN=2

                  osThreadNew PROC
;;;45     
;;;46     osThreadId_t osThreadNew(osThreadFunc_t func, void *argument, const osThreadAttr_t *attr)
000000  b570              PUSH     {r4-r6,lr}
;;;47     {
;;;48         OS_TID tid = 0;
;;;49         //first task will init the rtx
;;;50         if (taskCount == 0) {
000002  4c0d              LDR      r4,|L11.56|
000004  4606              MOV      r6,r0                 ;47
000006  2500              MOVS     r5,#0                 ;48
000008  6820              LDR      r0,[r4,#0]            ;47  ; taskCount
00000a  b160              CBZ      r0,|L11.38|
;;;51             os_sys_init_user((void (*)(void))func, MAIN_TASK_PRIORITY, stk_main_task, MAIN_TASK_STACK);
;;;52         }
;;;53         else {
;;;54             tid = os_tsk_create((void (*)(void))func, MAIN_TASK_PRIORITY+1);
00000c  2300              MOVS     r3,#0
00000e  461a              MOV      r2,r3
000010  210b              MOVS     r1,#0xb
000012  4630              MOV      r0,r6
000014  f8dfc024          LDR      r12,|L11.60|
000018  df00              SVC      #0x0
00001a  4605              MOV      r5,r0
                  |L11.28|
;;;55         }
;;;56         taskCount++;
00001c  6820              LDR      r0,[r4,#0]  ; taskCount
00001e  1c40              ADDS     r0,r0,#1
;;;57         return (osThreadId_t) tid;
000020  6020              STR      r0,[r4,#0]  ; taskCount
000022  4628              MOV      r0,r5
;;;58     }
000024  bd70              POP      {r4-r6,pc}
                  |L11.38|
000026  f7fffffe          BL       os_set_env
00002a  4a05              LDR      r2,|L11.64|
00002c  4905              LDR      r1,|L11.68|
00002e  4630              MOV      r0,r6                 ;51
000030  f8dfc014          LDR      r12,|L11.72|
000034  df00              SVC      #0x0                  ;51
000036  e7f1              B        |L11.28|
;;;59     
                          ENDP

                  |L11.56|
                          DCD      ||.data||
                  |L11.60|
                          DCD      rt_tsk_create
                  |L11.64|
                          DCD      ||.bss||
                  |L11.68|
                          DCD      0x0003200a
                  |L11.72|
                          DCD      rt_sys_init

                          AREA ||i.osTimerNew||, CODE, READONLY, ALIGN=2

                  osTimerNew PROC
;;;87     
;;;88     osTimerId_t osTimerNew(osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr)
000000  4a02              LDR      r2,|L12.12|
;;;89     {
000002  4601              MOV      r1,r0
;;;90         OS_TID tid = 0;
000004  2000              MOVS     r0,#0
;;;91         onlyTimerFunction = func;
000006  6051              STR      r1,[r2,#4]  ; onlyTimerFunction
;;;92         return (osTimerId_t)tid;
;;;93     }
000008  4770              BX       lr
;;;94     
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.osTimerStart||, CODE, READONLY, ALIGN=2

                  osTimerStart PROC
;;;94     
;;;95     osStatus_t osTimerStart(osTimerId_t timer_id, uint32_t ticks)
000000  4805              LDR      r0,|L13.24|
;;;96     {
;;;97         timerTick = ticks;
;;;98         OS_TID tid = os_tsk_create_user(rt_timer_task, TIMER_TASK_30_PRIORITY, (void *)stk_timer_task, TIMER_TASK_STACK);
000002  2300              MOVS     r3,#0
000004  4a05              LDR      r2,|L13.28|
000006  6081              STR      r1,[r0,#8]  ; timerTick
000008  f648010b          MOV      r1,#0x880b
00000c  4804              LDR      r0,|L13.32|
00000e  f8dfc014          LDR      r12,|L13.36|
000012  df00              SVC      #0x0
;;;99         return osOK;
000014  2000              MOVS     r0,#0
;;;100    }
000016  4770              BX       lr
;;;101    
                          ENDP

                  |L13.24|
                          DCD      ||.data||
                  |L13.28|
                          DCD      ||.bss||+0x320
                  |L13.32|
                          DCD      rt_timer_task
                  |L13.36|
                          DCD      rt_tsk_create

                          AREA ||i.rt_timer_task||, CODE, READONLY, ALIGN=2

                  rt_timer_task PROC
;;;76     // Timer task
;;;77     static void rt_timer_task(void)
000000  4c07              LDR      r4,|L14.32|
;;;78     {
;;;79         os_itv_set(timerTick);
000002  f8dfc020          LDR      r12,|L14.36|
000006  8920              LDRH     r0,[r4,#8]  ; timerTick
000008  b280              UXTH     r0,r0
00000a  df00              SVC      #0x0
                  |L14.12|
;;;80         while (1) {
;;;81             os_itv_wait();
00000c  f8dfc018          LDR      r12,|L14.40|
000010  df00              SVC      #0x0
;;;82             if (onlyTimerFunction) {
000012  6861              LDR      r1,[r4,#4]  ; onlyTimerFunction
000014  2900              CMP      r1,#0
000016  d0f9              BEQ      |L14.12|
;;;83                 onlyTimerFunction(NULL);
000018  2000              MOVS     r0,#0
00001a  4788              BLX      r1
00001c  e7f6              B        |L14.12|
;;;84             }
;;;85         }
;;;86     }
;;;87     
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      ||.data||
                  |L14.36|
                          DCD      rt_itv_set
                  |L14.40|
                          DCD      rt_itv_wait

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  stk_main_task
                          %        800
                  stk_timer_task
                          %        136
                  onlyMutex
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  taskCount
                          DCD      0x00000000
                  onlyTimerFunction
                          DCD      0x00000000
                  timerTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\rtos\\cmsis_os2_port.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_cmsis_os2_port_c_256c2b68____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___16_cmsis_os2_port_c_256c2b68____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_cmsis_os2_port_c_256c2b68____REVSH|
#line 495
|__asm___16_cmsis_os2_port_c_256c2b68____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_cmsis_os2_port_c_256c2b68____RRX|
#line 682
|__asm___16_cmsis_os2_port_c_256c2b68____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
