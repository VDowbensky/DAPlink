; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\settings_rom.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\settings_rom.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\settings_rom.crf ..\..\..\source\daplink\settings\settings_rom.c]
                          THUMB

                          AREA ||i.config_get_auto_rst||, CODE, READONLY, ALIGN=2

                  config_get_auto_rst PROC
;;;165    
;;;166    bool config_get_auto_rst()
000000  4802              LDR      r0,|L1.12|
;;;167    {
;;;168        return config_rom_copy.auto_rst;
000002  7980              LDRB     r0,[r0,#6]  ; config_rom_copy
000004  2800              CMP      r0,#0                 ;167
000006  d000              BEQ      |L1.10|
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;169    }
00000a  4770              BX       lr
;;;170    
                          ENDP

                  |L1.12|
                          DCD      ||.bss||

                          AREA ||i.config_get_automation_allowed||, CODE, READONLY, ALIGN=2

                  config_get_automation_allowed PROC
;;;170    
;;;171    bool config_get_automation_allowed(void)
000000  4802              LDR      r0,|L2.12|
;;;172    {
;;;173        return config_rom_copy.automation_allowed;
000002  79c0              LDRB     r0,[r0,#7]  ; config_rom_copy
000004  2800              CMP      r0,#0                 ;172
000006  d000              BEQ      |L2.10|
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;174    }
00000a  4770              BX       lr
;;;175    
                          ENDP

                  |L2.12|
                          DCD      ||.bss||

                          AREA ||i.config_get_overflow_detect||, CODE, READONLY, ALIGN=2

                  config_get_overflow_detect PROC
;;;175    
;;;176    bool config_get_overflow_detect()
000000  4802              LDR      r0,|L3.12|
;;;177    {
;;;178        return config_rom_copy.overflow_detect;
000002  7a00              LDRB     r0,[r0,#8]  ; config_rom_copy
000004  2800              CMP      r0,#0                 ;177
000006  d000              BEQ      |L3.10|
000008  2001              MOVS     r0,#1
                  |L3.10|
;;;179    }
00000a  4770              BX       lr
                          ENDP

                  |L3.12|
                          DCD      ||.bss||

                          AREA ||i.config_rom_init||, CODE, READONLY, ALIGN=2

                  config_rom_init PROC
;;;122    
;;;123    void config_rom_init()
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
;;;125        Init(0, 0, 0);
000002  2200              MOVS     r2,#0
000004  4611              MOV      r1,r2
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       Init
;;;126        // Fill in the ram copy with the defaults
;;;127        memcpy(&config_rom_copy, &config_default, sizeof(config_rom_copy));
00000c  2209              MOVS     r2,#9
00000e  4921              LDR      r1,|L4.148|
000010  4821              LDR      r0,|L4.152|
000012  f7fffffe          BL       __aeabi_memcpy
;;;128    
;;;129        // Read settings from flash if the key is valid
;;;130        if (CFG_KEY == config_rom.key) {
000016  4c21              LDR      r4,|L4.156|
000018  7822              LDRB     r2,[r4,#0]  ; config_rom
00001a  4610              MOV      r0,r2
00001c  7862              LDRB     r2,[r4,#1]  ; config_rom
00001e  ea402002          ORR      r0,r0,r2,LSL #8
000022  78a2              LDRB     r2,[r4,#2]  ; config_rom
000024  78e1              LDRB     r1,[r4,#3]  ; config_rom
000026  ea404002          ORR      r0,r0,r2,LSL #16
00002a  4d1d              LDR      r5,|L4.160|
00002c  ea406001          ORR      r0,r0,r1,LSL #24
000030  42a8              CMP      r0,r5
000032  d10f              BNE      |L4.84|
;;;131            uint32_t size = MIN(config_rom.size, sizeof(config_rom));
000034  7960              LDRB     r0,[r4,#5]  ; config_rom
000036  7921              LDRB     r1,[r4,#4]  ; config_rom
000038  ea412000          ORR      r0,r1,r0,LSL #8
00003c  2809              CMP      r0,#9
00003e  d204              BCS      |L4.74|
000040  7960              LDRB     r0,[r4,#5]  ; config_rom
000042  7921              LDRB     r1,[r4,#4]  ; config_rom
000044  ea412200          ORR      r2,r1,r0,LSL #8
000048  e000              B        |L4.76|
                  |L4.74|
00004a  2209              MOVS     r2,#9
                  |L4.76|
;;;132            memcpy(&config_rom_copy, (void *)&config_rom, size);
00004c  4913              LDR      r1,|L4.156|
00004e  4812              LDR      r0,|L4.152|
000050  f7fffffe          BL       __aeabi_memcpy
                  |L4.84|
;;;133        }
;;;134    
;;;135        // Fill in special values
;;;136        config_rom_copy.key = CFG_KEY;
000054  4910              LDR      r1,|L4.152|
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       __aeabi_uwrite4
;;;137        config_rom_copy.size = sizeof(config_rom);
00005c  490e              LDR      r1,|L4.152|
00005e  2009              MOVS     r0,#9
000060  8088              STRH     r0,[r1,#4]
000062  7820              LDRB     r0,[r4,#0]  ; config_rom
000064  4601              MOV      r1,r0
000066  7860              LDRB     r0,[r4,#1]  ; config_rom
000068  ea412100          ORR      r1,r1,r0,LSL #8
00006c  78a0              LDRB     r0,[r4,#2]  ; config_rom
00006e  ea414100          ORR      r1,r1,r0,LSL #16
000072  78e0              LDRB     r0,[r4,#3]  ; config_rom
000074  ea416100          ORR      r1,r1,r0,LSL #24
000078  42a9              CMP      r1,r5
00007a  d105              BNE      |L4.136|
00007c  7960              LDRB     r0,[r4,#5]  ; config_rom
00007e  7921              LDRB     r1,[r4,#4]  ; config_rom
000080  ea412000          ORR      r0,r1,r0,LSL #8
000084  2809              CMP      r0,#9
000086  d204              BCS      |L4.146|
                  |L4.136|
;;;138    
;;;139        // Write settings back to flash if they are out of date
;;;140        // Note - program_cfg only programs data in bootloader mode
;;;141        if (config_needs_update()) {
;;;142            // Program with defaults if none are set
;;;143            program_cfg(&config_rom_copy);
000088  e8bd4070          POP      {r4-r6,lr}
00008c  4802              LDR      r0,|L4.152|
00008e  f7ffbffe          B.W      program_cfg
                  |L4.146|
;;;144        }
;;;145    }
000092  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

                  |L4.148|
                          DCD      ||.constdata||
                  |L4.152|
                          DCD      ||.bss||
                  |L4.156|
                          DCD      cfgrom
                  |L4.160|
                          DCD      0x6b766c64

                          AREA ||i.config_set_auto_rst||, CODE, READONLY, ALIGN=2

                  config_set_auto_rst PROC
;;;147    
;;;148    void config_set_auto_rst(bool on)
000000  4902              LDR      r1,|L5.12|
;;;149    {
;;;150        config_rom_copy.auto_rst = on;
000002  7188              STRB     r0,[r1,#6]
;;;151        program_cfg(&config_rom_copy);
000004  4608              MOV      r0,r1
000006  f7ffbffe          B.W      program_cfg
;;;152    }
;;;153    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      ||.bss||

                          AREA ||i.config_set_automation_allowed||, CODE, READONLY, ALIGN=2

                  config_set_automation_allowed PROC
;;;153    
;;;154    void config_set_automation_allowed(bool on)
000000  4902              LDR      r1,|L6.12|
;;;155    {
;;;156        config_rom_copy.automation_allowed = on;
000002  71c8              STRB     r0,[r1,#7]
;;;157        program_cfg(&config_rom_copy);
000004  4608              MOV      r0,r1
000006  f7ffbffe          B.W      program_cfg
;;;158    }
;;;159    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      ||.bss||

                          AREA ||i.config_set_overflow_detect||, CODE, READONLY, ALIGN=2

                  config_set_overflow_detect PROC
;;;159    
;;;160    void config_set_overflow_detect(bool on)
000000  4902              LDR      r1,|L7.12|
;;;161    {
;;;162        config_rom_copy.overflow_detect = on;
000002  7208              STRB     r0,[r1,#8]
;;;163        program_cfg(&config_rom_copy);
000004  4608              MOV      r0,r1
000006  f7ffbffe          B.W      program_cfg
;;;164    }
;;;165    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      ||.bss||

                          AREA ||i.program_cfg||, CODE, READONLY, ALIGN=2

                  program_cfg PROC
;;;97     // Reprogram the new settings if flash writing is allowed
;;;98     static void program_cfg(cfg_setting_t *new_cfg)
000000  b570              PUSH     {r4-r6,lr}
;;;99     {
;;;100        uint32_t status;
;;;101        uint32_t addr;
;;;102        cortex_int_state_t state;
;;;103        addr = (uint32_t)&config_rom;
000002  4d13              LDR      r5,|L8.80|
000004  4606              MOV      r6,r0                 ;99
000006  f3ef8010          MRS      r0,PRIMASK            ;99
00000a  f0000401          AND      r4,r0,#1              ;99
00000e  b672              CPSID    i                     ;99
;;;104        state = cortex_int_get_and_disable();
;;;105        status = EraseSector(addr);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       EraseSector
000016  b904              CBNZ     r4,|L8.26|
000018  b662              CPSIE    i
                  |L8.26|
;;;106        cortex_int_restore(state);
;;;107    
;;;108        if (status != 0) {
00001a  2800              CMP      r0,#0
00001c  d116              BNE      |L8.76|
;;;109            return;
;;;110        }
;;;111    
;;;112        memset(write_buffer, 0xFF, sizeof(write_buffer));
00001e  22ff              MOVS     r2,#0xff
000020  2110              MOVS     r1,#0x10
000022  480c              LDR      r0,|L8.84|
000024  f7fffffe          BL       __aeabi_memset
;;;113        memcpy(write_buffer, new_cfg, sizeof(cfg_setting_t));
000028  2209              MOVS     r2,#9
00002a  4631              MOV      r1,r6
00002c  4809              LDR      r0,|L8.84|
00002e  f7fffffe          BL       __aeabi_memcpy
000032  f3ef8010          MRS      r0,PRIMASK
000036  f0000401          AND      r4,r0,#1
00003a  b672              CPSID    i
;;;114        state = cortex_int_get_and_disable();
;;;115        status = ProgramPage(addr, sizeof(write_buffer), write_buffer);
00003c  4a05              LDR      r2,|L8.84|
00003e  2110              MOVS     r1,#0x10
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       ProgramPage
000046  2c00              CMP      r4,#0
000048  d100              BNE      |L8.76|
00004a  b662              CPSIE    i
                  |L8.76|
;;;116        cortex_int_restore(state);
;;;117    
;;;118        if (0 != status) {
;;;119            return;
;;;120        }
;;;121    }
00004c  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      cfgrom
                  |L8.84|
                          DCD      ||.bss||+0xc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  config_rom_copy
                          %        12
                  write_buffer
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  config_default
                          DCDU     0x00000000
000004  0000              DCWU     0x0000
000006  0101              DCB      0x01,0x01
000008  01                DCB      0x01

                          AREA cfgrom, DATA, NOINIT, ALIGN=0

                  config_rom
                          %        9

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\daplink\\settings\\settings_rom.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_settings_rom_c_a278e4a0____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___14_settings_rom_c_a278e4a0____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_settings_rom_c_a278e4a0____REVSH|
#line 495
|__asm___14_settings_rom_c_a278e4a0____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_settings_rom_c_a278e4a0____RRX|
#line 682
|__asm___14_settings_rom_c_a278e4a0____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
