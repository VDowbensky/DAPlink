; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\rtx_config.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\rtx_config.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\rtx_config.crf ..\..\..\source\rtos\RTX_Config.c]
                          THUMB

                          AREA ||i.__user_perthread_libspace||, CODE, READONLY, ALIGN=2

                  __user_perthread_libspace PROC
;;;386    
;;;387    void *__user_perthread_libspace (void) {
000000  b510              PUSH     {r4,lr}
;;;388      /* Provide a separate libspace for each task. */
;;;389      U32 idx;
;;;390    
;;;391      idx = runtask_id ();
000002  f7fffffe          BL       rt_tsk_self
;;;392      if (idx == 0) {
000006  b130              CBZ      r0,|L1.22|
;;;393        /* RTX not running yet. */
;;;394        return (&__libspace_start);
;;;395      }
;;;396      return ((void *)&std_libspace[idx-1]);
000008  4904              LDR      r1,|L1.28|
00000a  eb000040          ADD      r0,r0,r0,LSL #1
00000e  eb011040          ADD      r0,r1,r0,LSL #5
000012  3860              SUBS     r0,r0,#0x60
;;;397    }
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  4802              LDR      r0,|L1.32|
000018  bd10              POP      {r4,pc}
;;;398    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      ||area_number.15||
                  |L1.32|
                          DCD      __libspace_start

                          AREA ||i._mutex_acquire||, CODE, READONLY, ALIGN=2

                  _mutex_acquire PROC
                  ||__tagsym$$used||
;;;415    
;;;416    __used void _mutex_acquire (OS_ID *mutex) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;417      /* Acquire a system mutex, lock stdlib resources. */
;;;418      if (runtask_id ()) {
000004  f7fffffe          BL       rt_tsk_self
000008  2800              CMP      r0,#0
00000a  d005              BEQ      |L2.24|
;;;419        /* RTX running, acquire a mutex. */
;;;420        mutex_wait (*mutex);
00000c  f64f71ff          MOV      r1,#0xffff
000010  f8dfc008          LDR      r12,|L2.28|
000014  6820              LDR      r0,[r4,#0]
000016  df00              SVC      #0x0
                  |L2.24|
;;;421      }
;;;422    }
000018  bd10              POP      {r4,pc}
;;;423    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      rt_mut_wait

                          AREA ||i._mutex_initialize||, CODE, READONLY, ALIGN=2

                  _mutex_initialize PROC
;;;400    
;;;401    int _mutex_initialize (OS_ID *mutex) {
000000  4906              LDR      r1,|L3.28|
000002  b510              PUSH     {r4,lr}
000004  4602              MOV      r2,r0
000006  6808              LDR      r0,[r1,#0]  ; nr_mutex
000008  b100              CBZ      r0,|L3.12|
                  |L3.10|
;;;402      /* Allocate and initialize a system mutex. */
;;;403    
;;;404      if (nr_mutex >= OS_MUTEXCNT) {
;;;405        /* If you are here, you need to increase the number OS_MUTEXCNT. */
;;;406        for (;;);
00000a  e7fe              B        |L3.10|
                  |L3.12|
;;;407      }
;;;408      *mutex = &std_libmutex[nr_mutex++];
00000c  4804              LDR      r0,|L3.32|
00000e  6010              STR      r0,[r2,#0]
000010  2201              MOVS     r2,#1
;;;409      mutex_init (*mutex);
000012  600a              STR      r2,[r1,#0]  ; nr_mutex
000014  f7fffffe          BL       rt_mut_init
;;;410      return (1);
000018  2001              MOVS     r0,#1
;;;411    }
00001a  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  |L3.28|
                          DCD      ||area_number.28||
                  |L3.32|
                          DCD      ||area_number.15||+0x180

                          AREA ||i._mutex_release||, CODE, READONLY, ALIGN=2

                  _mutex_release PROC
                  |symbol_number.99|
;;;426    
;;;427    __used void _mutex_release (OS_ID *mutex) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;428      /* Release a system mutex, unlock stdlib resources. */
;;;429      if (runtask_id ()) {
000004  f7fffffe          BL       rt_tsk_self
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L4.20|
;;;430        /* RTX runnning, release a mutex. */
;;;431        mutex_rel (*mutex);
00000c  f8dfc008          LDR      r12,|L4.24|
000010  6820              LDR      r0,[r4,#0]
000012  df00              SVC      #0x0
                  |L4.20|
;;;432      }
;;;433    }
000014  bd10              POP      {r4,pc}
;;;434    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      rt_mut_release

                          AREA ||i.os_error||, CODE, READONLY, ALIGN=2

                  os_error PROC
;;;180    
;;;181    void os_error(U32 err_code)
000000  2801              CMP      r0,#1
;;;182    {
000002  d005              BEQ      |L5.16|
;;;183        /* This function is called when a runtime error is detected. Parameter */
;;;184        /* 'err_code' holds the runtime error code (defined in RTL.H).         */
;;;185        switch (err_code) {
000004  2802              CMP      r0,#2
000006  d005              BEQ      |L5.20|
000008  2803              CMP      r0,#3
00000a  d00b              BEQ      |L5.36|
;;;186            case OS_ERR_STK_OVF:
;;;187                util_assert(0);
;;;188                break;
;;;189    
;;;190            case OS_ERR_FIFO_OVF:
;;;191                util_assert(0);
;;;192                break;
;;;193    
;;;194            case OS_ERR_MBX_OVF:
;;;195                util_assert(0);
;;;196                break;
;;;197    
;;;198            default:
;;;199                util_assert(0);
00000c  22c7              MOVS     r2,#0xc7
;;;200                break;
00000e  e002              B        |L5.22|
                  |L5.16|
000010  22bb              MOVS     r2,#0xbb              ;187
000012  e000              B        |L5.22|
                  |L5.20|
000014  22bf              MOVS     r2,#0xbf              ;191
                  |L5.22|
000016  a104              ADR      r1,|L5.40|
000018  2000              MOVS     r0,#0                 ;187
00001a  f7fffffe          BL       _util_assert
;;;201        }
;;;202    
;;;203        SystemReset();
00001e  f7fffffe          BL       SystemReset
                  |L5.34|
;;;204    
;;;205        for (;;); // Wait for reset
000022  e7fe              B        |L5.34|
                  |L5.36|
000024  22c3              MOVS     r2,#0xc3              ;195
000026  e7f6              B        |L5.22|
;;;206    }
;;;207    
                          ENDP

                  |L5.40|
000028  2e2e5c2e          DCB      "..\\..\\..\\source\\rtos\\RTX_Config.c",0
00002c  2e5c2e2e
000030  5c736f75
000034  7263655c
000038  72746f73
00003c  5c525458
000040  5f436f6e
000044  6669672e
000048  6300    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.os_idle_demon||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
                  |L6.0|
;;;158    
;;;159    __task void os_idle_demon(void)
000000  e7fe              B        |L6.0|
;;;160    {
;;;161        /* The idle demon is a system task, running when no other task is ready */
;;;162        /* to run. The 'os_xxx' function calls are not allowed from this task.  */
;;;163        for (;;) {
;;;164            /* HERE: include optional user code to be executed when no task runs.*/
;;;165        }
;;;166    }
;;;167    
                          ENDP


                          AREA ||i.os_tmr_call||, CODE, READONLY, ALIGN=1

                  os_tmr_call PROC
;;;170    
;;;171    void os_tmr_call(U16 info)
000000  4770              BX       lr
;;;172    {
;;;173        /* This function is called when the user timer has expired. Parameter   */
;;;174        /* 'info' holds the value, defined when the timer was created.          */
;;;175        /* HERE: include optional user code to be executed on timeout. */
;;;176    }
;;;177    
                          ENDP


                          AREA ||i.rt_chk_robin||, CODE, READONLY, ALIGN=1

                  rt_chk_robin PROC
;;;370     void rt_init_robin (void) {;}
;;;371     void rt_chk_robin  (void) {;}
000000  4770              BX       lr
;;;372    #endif
                          ENDP


                          AREA ||i.rt_init_robin||, CODE, READONLY, ALIGN=1

                  rt_init_robin PROC
;;;369    #if (__CM__) && OS_ROBIN == 0
;;;370     void rt_init_robin (void) {;}
000000  4770              BX       lr
;;;371     void rt_chk_robin  (void) {;}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mp_tcb
                          %        204

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=3

                          EXPORTAS ||area_number.12||, ||.bss||
                  mp_stk
                          %        152

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.bss||
                  os_fifo
                          %        36

                          AREA ||area_number.14||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.bss||
                  os_active_TCB
                          %        16

                          AREA ||area_number.15||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.bss||
                  std_libspace
                          %        384
                  std_libmutex
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  os_maxtaskrun
000000  0004              DCW      0x0004

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.constdata||
                  os_stackinfo
                          DCD      0x01040088

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  os_rrobin
                          DCD      0x0000000a

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.constdata||
                  os_trv
                          DCD      0x000afc7f

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  os_flags
000000  01                DCB      0x01

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.constdata||
                  os_clockrate
                  |symbol_number.45|
                          DCD      0x00002710
                  os_timernum
                  |symbol_number.46|
                          DCD      0x00000000

                          AREA ||area_number.23||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.23||, ||.constdata||
                  mp_tcb_size
000000  00cc              DCW      0x00cc

                          AREA ||area_number.24||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.constdata||
                  mp_stk_size
                          DCD      0x00000098

                          AREA ||area_number.25||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.constdata||
                  os_fifo_size
000000  04                DCB      0x04

                          AREA ||area_number.26||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.26||, ||.constdata||
                  mp_tmr_size
000000  0000              DCW      0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  m_tmr
                          DCD      0x00000000

                          AREA ||area_number.28||, DATA, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.data||
                  nr_mutex
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\rtos\\RTX_Config.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_RTX_Config_c_79201571____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___12_RTX_Config_c_79201571____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_RTX_Config_c_79201571____REVSH|
#line 495
|__asm___12_RTX_Config_c_79201571____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_RTX_Config_c_79201571____RRX|
#line 682
|__asm___12_RTX_Config_c_79201571____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
