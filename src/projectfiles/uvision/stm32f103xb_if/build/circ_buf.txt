; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\circ_buf.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\circ_buf.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink\cmsis-dap -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\usb2uart -I..\..\..\source\daplink\settings -I..\..\..\source\daplink -I..\..\..\source\daplink\interface -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\target -I..\..\..\source\rtos -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_if -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DWEBUSB_INTERFACE -DWINUSB_INTERFACE -DDRAG_N_DROP_SUPPORT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 -DBULK_ENDPOINT --omf_browse=.\build\circ_buf.crf ..\..\..\source\daplink\circ_buf.c]
                          THUMB

                          AREA ||i.circ_buf_count_free||, CODE, READONLY, ALIGN=1

                  circ_buf_count_free PROC
;;;96     
;;;97     uint32_t circ_buf_count_free(circ_buf_t *circ_buf)
000000  b530              PUSH     {r4,r5,lr}
;;;98     {
000002  4605              MOV      r5,r0
000004  f3ef8010          MRS      r0,PRIMASK
000008  f0000401          AND      r4,r0,#1
00000c  b672              CPSID    i
;;;99         uint32_t cnt;
;;;100        cortex_int_state_t state;
;;;101    
;;;102        state = cortex_int_get_and_disable();
;;;103    
;;;104        cnt = circ_buf->size - circ_buf_count_used(circ_buf) - 1;
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       circ_buf_count_used
000014  68a9              LDR      r1,[r5,#8]
000016  1a08              SUBS     r0,r1,r0
000018  1e40              SUBS     r0,r0,#1
00001a  2c00              CMP      r4,#0
00001c  d100              BNE      |L1.32|
00001e  b662              CPSIE    i
                  |L1.32|
;;;105    
;;;106        cortex_int_restore(state);
;;;107        return cnt;
;;;108    }
000020  bd30              POP      {r4,r5,pc}
;;;109    
                          ENDP


                          AREA ||i.circ_buf_count_used||, CODE, READONLY, ALIGN=1

                  circ_buf_count_used PROC
;;;79     
;;;80     uint32_t circ_buf_count_used(circ_buf_t *circ_buf)
000000  f3ef8110          MRS      r1,PRIMASK
000004  f0010301          AND      r3,r1,#1
000008  b672              CPSID    i
00000a  e9d01200          LDRD     r1,r2,[r0,#0]
;;;81     {
;;;82         uint32_t cnt;
;;;83         cortex_int_state_t state;
;;;84     
;;;85         state = cortex_int_get_and_disable();
;;;86     
;;;87         if (circ_buf->tail >= circ_buf->head) {
00000e  428a              CMP      r2,r1
000010  d301              BCC      |L2.22|
;;;88             cnt = circ_buf->tail - circ_buf->head;
000012  1a50              SUBS     r0,r2,r1
000014  e002              B        |L2.28|
                  |L2.22|
;;;89         } else {
;;;90             cnt = circ_buf->tail + circ_buf->size - circ_buf->head;
000016  6880              LDR      r0,[r0,#8]
000018  4410              ADD      r0,r0,r2
00001a  1a40              SUBS     r0,r0,r1
                  |L2.28|
00001c  2b00              CMP      r3,#0
00001e  d100              BNE      |L2.34|
000020  b662              CPSIE    i
                  |L2.34|
;;;91         }
;;;92     
;;;93         cortex_int_restore(state);
;;;94         return cnt;
;;;95     }
000022  4770              BX       lr
;;;96     
                          ENDP


                          AREA ||i.circ_buf_init||, CODE, READONLY, ALIGN=1

                  circ_buf_init PROC
;;;26     
;;;27     void circ_buf_init(circ_buf_t *circ_buf, uint8_t *buffer, uint32_t size)
000000  f3ef8310          MRS      r3,PRIMASK
000004  f0130f01          TST      r3,#1
000008  b672              CPSID    i
00000a  e9c02102          STRD     r2,r1,[r0,#8]
;;;28     {
;;;29         cortex_int_state_t state;
;;;30         state = cortex_int_get_and_disable();
;;;31     
;;;32         circ_buf->buf = buffer;
;;;33         circ_buf->size = size;
;;;34         circ_buf->head = 0;
00000e  f04f0100          MOV      r1,#0
;;;35         circ_buf->tail = 0;
000012  6001              STR      r1,[r0,#0]
000014  6041              STR      r1,[r0,#4]            ;28
000016  d100              BNE      |L3.26|
000018  b662              CPSIE    i                     ;28
                  |L3.26|
;;;36     
;;;37         cortex_int_restore(state);
;;;38     }
00001a  4770              BX       lr
;;;39     
                          ENDP


                          AREA ||i.circ_buf_pop||, CODE, READONLY, ALIGN=2

                  circ_buf_pop PROC
;;;57     
;;;58     uint8_t circ_buf_pop(circ_buf_t *circ_buf)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
000004  f3ef8010          MRS      r0,PRIMASK
000008  f0000501          AND      r5,r0,#1
00000c  b672              CPSID    i
00000e  e9d40100          LDRD     r0,r1,[r4,#0]
;;;60         uint8_t data;
;;;61         cortex_int_state_t state;
;;;62     
;;;63         state = cortex_int_get_and_disable();
;;;64     
;;;65         // Assert buffer isn't empty
;;;66         util_assert(circ_buf->head != circ_buf->tail);
000012  4288              CMP      r0,r1
000014  d001              BEQ      |L4.26|
000016  2001              MOVS     r0,#1
000018  e000              B        |L4.28|
                  |L4.26|
00001a  2000              MOVS     r0,#0
                  |L4.28|
00001c  2242              MOVS     r2,#0x42
00001e  a10e              ADR      r1,|L4.88|
000020  f7fffffe          BL       _util_assert
;;;67     
;;;68         data = circ_buf->buf[circ_buf->head];
000024  68e1              LDR      r1,[r4,#0xc]
000026  6820              LDR      r0,[r4,#0]
000028  5c0e              LDRB     r6,[r1,r0]
00002a  1c40              ADDS     r0,r0,#1
;;;69         circ_buf->head += 1;
;;;70         if (circ_buf->head >= circ_buf->size) {
00002c  6020              STR      r0,[r4,#0]
00002e  68a1              LDR      r1,[r4,#8]
000030  4288              CMP      r0,r1
000032  d30c              BCC      |L4.78|
;;;71             util_assert(circ_buf->head == circ_buf->size);
000034  d102              BNE      |L4.60|
000036  f04f0001          MOV      r0,#1
00003a  e001              B        |L4.64|
                  |L4.60|
00003c  f04f0000          MOV      r0,#0
                  |L4.64|
000040  f04f0247          MOV      r2,#0x47
000044  a104              ADR      r1,|L4.88|
000046  f7fffffe          BL       _util_assert
;;;72             circ_buf->head = 0;
00004a  2000              MOVS     r0,#0
00004c  6020              STR      r0,[r4,#0]
                  |L4.78|
00004e  b905              CBNZ     r5,|L4.82|
000050  b662              CPSIE    i
                  |L4.82|
;;;73         }
;;;74     
;;;75         cortex_int_restore(state);
;;;76     
;;;77         return data;
000052  4630              MOV      r0,r6
;;;78     }
000054  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
000058  2e2e5c2e          DCB      "..\\..\\..\\source\\daplink\\circ_buf.c",0
00005c  2e5c2e2e
000060  5c736f75
000064  7263655c
000068  6461706c
00006c  696e6b5c
000070  63697263
000074  5f627566
000078  2e6300  
00007b  00                DCB      0

                          AREA ||i.circ_buf_push||, CODE, READONLY, ALIGN=2

                  circ_buf_push PROC
;;;39     
;;;40     void circ_buf_push(circ_buf_t *circ_buf, uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
000004  f3ef8010          MRS      r0,PRIMASK
000008  f0000501          AND      r5,r0,#1
00000c  b672              CPSID    i
;;;42         cortex_int_state_t state;
;;;43         state = cortex_int_get_and_disable();
;;;44     
;;;45         circ_buf->buf[circ_buf->tail] = data;
00000e  6862              LDR      r2,[r4,#4]
000010  68e0              LDR      r0,[r4,#0xc]
000012  5481              STRB     r1,[r0,r2]
;;;46         circ_buf->tail += 1;
000014  6860              LDR      r0,[r4,#4]
000016  1c40              ADDS     r0,r0,#1
;;;47         if (circ_buf->tail >= circ_buf->size) {
000018  6060              STR      r0,[r4,#4]
00001a  68a1              LDR      r1,[r4,#8]
00001c  4288              CMP      r0,r1
00001e  d30c              BCC      |L5.58|
;;;48             util_assert(circ_buf->tail == circ_buf->size);
000020  d102              BNE      |L5.40|
000022  f04f0001          MOV      r0,#1
000026  e001              B        |L5.44|
                  |L5.40|
000028  f04f0000          MOV      r0,#0
                  |L5.44|
00002c  f04f0230          MOV      r2,#0x30
000030  a109              ADR      r1,|L5.88|
000032  f7fffffe          BL       _util_assert
;;;49             circ_buf->tail = 0;
000036  2000              MOVS     r0,#0
000038  6060              STR      r0,[r4,#4]
                  |L5.58|
00003a  e9d40100          LDRD     r0,r1,[r4,#0]
;;;50         }
;;;51     
;;;52         // Assert no overflow
;;;53         util_assert(circ_buf->head != circ_buf->tail);
00003e  4288              CMP      r0,r1
000040  d001              BEQ      |L5.70|
000042  2001              MOVS     r0,#1
000044  e000              B        |L5.72|
                  |L5.70|
000046  2000              MOVS     r0,#0
                  |L5.72|
000048  2235              MOVS     r2,#0x35
00004a  a103              ADR      r1,|L5.88|
00004c  f7fffffe          BL       _util_assert
000050  2d00              CMP      r5,#0
000052  d100              BNE      |L5.86|
000054  b662              CPSIE    i
                  |L5.86|
;;;54     
;;;55         cortex_int_restore(state);
;;;56     }
000056  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP

                  |L5.88|
000058  2e2e5c2e          DCB      "..\\..\\..\\source\\daplink\\circ_buf.c",0
00005c  2e5c2e2e
000060  5c736f75
000064  7263655c
000068  6461706c
00006c  696e6b5c
000070  63697263
000074  5f627566
000078  2e6300  
00007b  00                DCB      0

                          AREA ||i.circ_buf_read||, CODE, READONLY, ALIGN=1

                  circ_buf_read PROC
;;;109    
;;;110    uint32_t circ_buf_read(circ_buf_t *circ_buf, uint8_t *data, uint32_t size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;111    {
000004  4614              MOV      r4,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;112        uint32_t cnt;
;;;113        uint32_t i;
;;;114    
;;;115        cnt = circ_buf_count_used(circ_buf);
00000a  f7fffffe          BL       circ_buf_count_used
;;;116        cnt = MIN(size, cnt);
00000e  4284              CMP      r4,r0
000010  d200              BCS      |L6.20|
000012  4620              MOV      r0,r4
                  |L6.20|
000014  4605              MOV      r5,r0
;;;117        for (i = 0; i < cnt; i++) {
000016  2400              MOVS     r4,#0
000018  e004              B        |L6.36|
                  |L6.26|
;;;118            data[i] = circ_buf_pop(circ_buf);
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       circ_buf_pop
000020  5530              STRB     r0,[r6,r4]
000022  1c64              ADDS     r4,r4,#1
                  |L6.36|
000024  42ac              CMP      r4,r5                 ;117
000026  d3f8              BCC      |L6.26|
;;;119        }
;;;120    
;;;121        return cnt;
000028  4628              MOV      r0,r5
;;;122    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;123    
                          ENDP


                          AREA ||i.circ_buf_write||, CODE, READONLY, ALIGN=1

                  circ_buf_write PROC
;;;123    
;;;124    uint32_t circ_buf_write(circ_buf_t *circ_buf, const uint8_t *data, uint32_t size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
000004  4614              MOV      r4,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;126        uint32_t cnt;
;;;127        uint32_t i;
;;;128    
;;;129        cnt = circ_buf_count_free(circ_buf);
00000a  f7fffffe          BL       circ_buf_count_free
;;;130        cnt = MIN(size, cnt);
00000e  4284              CMP      r4,r0
000010  d200              BCS      |L7.20|
000012  4620              MOV      r0,r4
                  |L7.20|
000014  4605              MOV      r5,r0
;;;131        for (i = 0; i < cnt; i++) {
000016  2400              MOVS     r4,#0
000018  e004              B        |L7.36|
                  |L7.26|
;;;132            circ_buf_push(circ_buf, data[i]);
00001a  5d31              LDRB     r1,[r6,r4]
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       circ_buf_push
000022  1c64              ADDS     r4,r4,#1
                  |L7.36|
000024  42ac              CMP      r4,r5                 ;131
000026  d3f8              BCC      |L7.26|
;;;133        }
;;;134    
;;;135        return cnt;
000028  4628              MOV      r0,r5
;;;136    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\daplink\\circ_buf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_circ_buf_c_9783ab12____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___10_circ_buf_c_9783ab12____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_circ_buf_c_9783ab12____REVSH|
#line 495
|__asm___10_circ_buf_c_9783ab12____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_circ_buf_c_9783ab12____RRX|
#line 682
|__asm___10_circ_buf_c_9783ab12____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
