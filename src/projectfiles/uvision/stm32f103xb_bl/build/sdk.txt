; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\sdk.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\sdk.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink -I..\..\..\source\daplink\bootloader -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\settings -I..\..\..\source\target -I..\..\..\source\rtos_none -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_bl -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DMSC_ENDPOINT -DDAPLINK_BL -DDAPLINK_BUILD_KEY=0x9B939D93 -DDRAG_N_DROP_SUPPORT -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 --omf_browse=.\build\sdk.crf ..\..\..\source\hic_hal\stm32\stm32f103xb\sdk.c]
                          THUMB

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;140    
;;;141    uint32_t HAL_GetTick(void)
000000  f3ef8010          MRS      r0,PRIMASK
000004  f0100f01          TST      r0,#1
000008  b672              CPSID    i
;;;142    {
;;;143        cortex_int_state_t state;
;;;144        state = cortex_int_get_and_disable();
;;;145        const uint32_t ticks = __HAL_TIM_GET_COUNTER(&timer) / 4;
00000a  4808              LDR      r0,|L1.44|
00000c  6800              LDR      r0,[r0,#0]  ; timer
00000e  6a40              LDR      r0,[r0,#0x24]
;;;146        time_count += (ticks - time_count) & 0x3FFF;
000010  4b07              LDR      r3,|L1.48|
000012  ea4f0290          LSR      r2,r0,#2              ;145
000016  6818              LDR      r0,[r3,#0]  ; time_count
000018  eba20200          SUB      r2,r2,r0
00001c  f3c2020d          UBFX     r2,r2,#0,#14
000020  4410              ADD      r0,r0,r2
000022  6018              STR      r0,[r3,#0]            ;142  ; time_count
000024  d100              BNE      |L1.40|
000026  b662              CPSIE    i                     ;142
                  |L1.40|
;;;147        cortex_int_restore(state);
;;;148        return time_count;
;;;149    }
000028  4770              BX       lr
;;;150    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.bss||
                  |L1.48|
                          DCD      ||.data||

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=1

                  HAL_IncTick PROC
;;;135    
;;;136    void HAL_IncTick(void)
000000  4770              BX       lr
;;;137    {
;;;138        // Do nothing
;;;139    }
;;;140    
                          ENDP


                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;90     
;;;91     HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b510              PUSH     {r4,lr}
;;;92     {
000002  b088              SUB      sp,sp,#0x20
;;;93         HAL_StatusTypeDef ret;
;;;94         RCC_ClkInitTypeDef clk_init;
;;;95         uint32_t unused;
;;;96         uint32_t prescaler;
;;;97         uint32_t source_clock;
;;;98     
;;;99         HAL_RCC_GetClockConfig(&clk_init, &unused);
000004  a905              ADD      r1,sp,#0x14
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       HAL_RCC_GetClockConfig
00000c  9803              LDR      r0,[sp,#0xc]
00000e  f5b06f80          CMP      r0,#0x400
000012  d008              BEQ      |L3.38|
000014  f5b06fa0          CMP      r0,#0x500
000018  d035              BEQ      |L3.134|
00001a  f5b06fc0          CMP      r0,#0x600
00001e  d034              BEQ      |L3.138|
000020  f5b06fe0          CMP      r0,#0x700
000024  d033              BEQ      |L3.142|
                  |L3.38|
000026  2001              MOVS     r0,#1
                  |L3.40|
;;;100    
;;;101        /* Compute the prescaler value to have TIMx counter clock equal to 4000 Hz */
;;;102        source_clock = SystemCoreClock / tim2_clk_div(clk_init.APB1CLKDivider);
000028  491a              LDR      r1,|L3.148|
;;;103        prescaler = (uint32_t)(source_clock / 4000) - 1;
;;;104    
;;;105        /* Set TIMx instance */
;;;106        timer.Instance = TIM2;
00002a  f04f4280          MOV      r2,#0x40000000
;;;107    
;;;108        timer.Init.Period            = 0xFFFF;
;;;109        timer.Init.Prescaler         = prescaler;
;;;110        timer.Init.ClockDivision     = 0;
00002e  2400              MOVS     r4,#0
000030  6809              LDR      r1,[r1,#0]            ;102  ; SystemCoreClock
000032  fbb1f0f0          UDIV     r0,r1,r0              ;102
000036  f44f617a          MOV      r1,#0xfa0             ;103
00003a  fbb0f1f1          UDIV     r1,r0,r1              ;103
00003e  4816              LDR      r0,|L3.152|
000040  1e49              SUBS     r1,r1,#1
000042  6002              STR      r2,[r0,#0]            ;108  ; timer
000044  f64f72ff          MOV      r2,#0xffff            ;108
000048  e9c02403          STRD     r2,r4,[r0,#0xc]
00004c  e9c01401          STRD     r1,r4,[r0,#4]
;;;111        timer.Init.CounterMode       = TIM_COUNTERMODE_UP;
;;;112        timer.Init.RepetitionCounter = 0;
;;;113    
;;;114        __HAL_RCC_TIM2_CLK_ENABLE();
000050  6144              STR      r4,[r0,#0x14]  ; timer
000052  4812              LDR      r0,|L3.156|
000054  69c1              LDR      r1,[r0,#0x1c]
000056  f0410101          ORR      r1,r1,#1
00005a  61c1              STR      r1,[r0,#0x1c]
00005c  69c0              LDR      r0,[r0,#0x1c]
00005e  f0000001          AND      r0,r0,#1
;;;115    
;;;116        ret = HAL_TIM_Base_DeInit(&timer);
000062  9006              STR      r0,[sp,#0x18]
000064  480c              LDR      r0,|L3.152|
000066  f7fffffe          BL       HAL_TIM_Base_DeInit
;;;117        if (ret != HAL_OK) {
00006a  2800              CMP      r0,#0
00006c  d109              BNE      |L3.130|
;;;118            return ret;
;;;119        }
;;;120    
;;;121        time_count = 0;
00006e  480c              LDR      r0,|L3.160|
;;;122        ret = HAL_TIM_Base_Init(&timer);
000070  6004              STR      r4,[r0,#0]  ; time_count
000072  4809              LDR      r0,|L3.152|
000074  f7fffffe          BL       HAL_TIM_Base_Init
;;;123        if (ret != HAL_OK) {
000078  2800              CMP      r0,#0
00007a  d102              BNE      |L3.130|
;;;124            return ret;
;;;125        }
;;;126    
;;;127        ret = HAL_TIM_Base_Start(&timer);
00007c  4806              LDR      r0,|L3.152|
00007e  f7fffffe          BL       HAL_TIM_Base_Start
                  |L3.130|
;;;128        if (ret != HAL_OK) {
;;;129            return ret;
;;;130        }
;;;131    
;;;132        return HAL_OK;
;;;133    }
000082  b008              ADD      sp,sp,#0x20
000084  bd10              POP      {r4,pc}
                  |L3.134|
000086  2002              MOVS     r0,#2
000088  e7ce              B        |L3.40|
                  |L3.138|
00008a  2004              MOVS     r0,#4
00008c  e7cc              B        |L3.40|
                  |L3.142|
00008e  2008              MOVS     r0,#8
000090  e7ca              B        |L3.40|
;;;134    
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      SystemCoreClock
                  |L3.152|
                          DCD      ||.bss||
                  |L3.156|
                          DCD      0x40021000
                  |L3.160|
                          DCD      ||.data||

                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=2

                  HAL_ResumeTick PROC
;;;155    
;;;156    void HAL_ResumeTick(void)
000000  4801              LDR      r0,|L4.8|
;;;157    {
;;;158        HAL_TIM_Base_Stop(&timer);
000002  f7ffbffe          B.W      HAL_TIM_Base_Stop
;;;159    }
;;;160    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=2

                  HAL_SuspendTick PROC
;;;150    
;;;151    void HAL_SuspendTick(void)
000000  4801              LDR      r0,|L5.8|
;;;152    {
;;;153        HAL_TIM_Base_Start(&timer);
000002  f7ffbffe          B.W      HAL_TIM_Base_Start
;;;154    }
;;;155    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.sdk_init||, CODE, READONLY, ALIGN=2

                  sdk_init PROC
;;;50       */
;;;51     void sdk_init()
000000  b530              PUSH     {r4,r5,lr}
;;;52     {
000002  b08f              SUB      sp,sp,#0x3c
;;;53         RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
000004  2114              MOVS     r1,#0x14
000006  a80a              ADD      r0,sp,#0x28
000008  f7fffffe          BL       __aeabi_memclr4
;;;54         RCC_OscInitTypeDef RCC_OscInitStruct = {0};
00000c  2128              MOVS     r1,#0x28
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memclr4
;;;55     
;;;56         SystemCoreClockUpdate();
000014  f7fffffe          BL       SystemCoreClockUpdate
;;;57         HAL_Init();
000018  f7fffffe          BL       HAL_Init
;;;58     
;;;59         /* Select HSI as system clock source to allow modification of the PLL configuration */
;;;60         RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
00001c  2501              MOVS     r5,#1
;;;61         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
00001e  2400              MOVS     r4,#0
;;;62         if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
000020  e9cd540a          STRD     r5,r4,[sp,#0x28]
000024  4629              MOV      r1,r5
000026  a80a              ADD      r0,sp,#0x28
000028  f7fffffe          BL       HAL_RCC_ClockConfig
00002c  b120              CBZ      r0,|L6.56|
;;;63             /* Initialization Error */
;;;64             util_assert(0);
00002e  2240              MOVS     r2,#0x40
000030  a116              ADR      r1,|L6.140|
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       _util_assert
                  |L6.56|
;;;65         }
;;;66     
;;;67         /* Enable HSE bypass Oscillator, select it as PLL source and finally activate the PLL */
;;;68         RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
;;;69         RCC_OscInitStruct.HSEState = RCC_CR_HSEON;
000038  f44f3080          MOV      r0,#0x10000
00003c  e9cd5000          STRD     r5,r0,[sp,#0]
;;;70         RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
;;;71         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
000040  2502              MOVS     r5,#2
;;;72         RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
000042  9402              STR      r4,[sp,#8]
000044  e9cd5007          STRD     r5,r0,[sp,#0x1c]
;;;73         RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
000048  f44f10e0          MOV      r0,#0x1c0000
;;;74         if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
00004c  9009              STR      r0,[sp,#0x24]
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       HAL_RCC_OscConfig
000054  b120              CBZ      r0,|L6.96|
;;;75             /* Initialization Error */
;;;76             util_assert(0);
000056  224c              MOVS     r2,#0x4c
000058  a10c              ADR      r1,|L6.140|
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       _util_assert
                  |L6.96|
;;;77         }
;;;78     
;;;79         /* Select the PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
;;;80         RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
000060  200f              MOVS     r0,#0xf
000062  e9cd050a          STRD     r0,r5,[sp,#0x28]
;;;81         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
;;;82         RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
;;;83         RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
000066  f44f6080          MOV      r0,#0x400
00006a  e9cd400c          STRD     r4,r0,[sp,#0x30]
;;;84         RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
;;;85         if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
00006e  2102              MOVS     r1,#2
000070  a80a              ADD      r0,sp,#0x28
000072  940e              STR      r4,[sp,#0x38]
000074  f7fffffe          BL       HAL_RCC_ClockConfig
000078  2800              CMP      r0,#0
00007a  d004              BEQ      |L6.134|
;;;86             /* Initialization Error */
;;;87             util_assert(0);
00007c  2257              MOVS     r2,#0x57
00007e  a103              ADR      r1,|L6.140|
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       _util_assert
                  |L6.134|
;;;88         }
;;;89     }
000086  b00f              ADD      sp,sp,#0x3c
000088  bd30              POP      {r4,r5,pc}
;;;90     
                          ENDP

00008a  0000              DCW      0x0000
                  |L6.140|
00008c  2866696c          DCB      "(file)",0
000090  652900  
000093  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  timer
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  time_count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\hic_hal\\stm32\\stm32f103xb\\sdk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sdk_c_sdk_init____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___5_sdk_c_sdk_init____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sdk_c_sdk_init____REVSH|
#line 495
|__asm___5_sdk_c_sdk_init____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_sdk_c_sdk_init____RRX|
#line 682
|__asm___5_sdk_c_sdk_init____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
