L 1 "..\..\..\source\daplink\bootloader\daplink.c"
N/**
N * @file    daplink.c
N * @brief   Implementation of daplink.h for the bootloader application
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2019, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#include "daplink.h"
L 1 "..\..\..\source\daplink\daplink.h" 1
N/**
N * @file    daplink.h
N * @brief   Information about different Hardware Interface Circuits the firmware runs
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef DAPLINK_H
N#define DAPLINK_H
N
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 26 "..\..\..\source\daplink\daplink.h" 2
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 27 "..\..\..\source\daplink\daplink.h" 2
N
N#include "daplink_addr.h"
L 1 "..\..\..\source\hic_hal\stm32\stm32f103xb\daplink_addr.h" 1
N/**
N * @file    daplink_addr.h
N * @brief
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef DAPLINK_ADDR_H
N#define DAPLINK_ADDR_H
N
N/* Device sizes */
N
N#define DAPLINK_ROM_START               0x08000000
N#define DAPLINK_ROM_SIZE                0x00020000
N
N#define DAPLINK_RAM_START               0x20000000
N#define DAPLINK_RAM_SIZE                0x00005000
N
N/* ROM sizes */
N
N#define DAPLINK_ROM_BL_START            0x08000000
N#define DAPLINK_ROM_BL_SIZE             0x0000BC00
N
N#define DAPLINK_ROM_CONFIG_ADMIN_START  0x0800BC00
N#define DAPLINK_ROM_CONFIG_ADMIN_SIZE   0x00000400
N
N#define DAPLINK_ROM_IF_START            0x0800C000
N#define DAPLINK_ROM_IF_SIZE             0x00013C00
N
N#define DAPLINK_ROM_CONFIG_USER_START   0x0801FC00
N#define DAPLINK_ROM_CONFIG_USER_SIZE    0x00000400
N
N/* RAM sizes */
N
N#define DAPLINK_RAM_APP_START           0x20000000
N#define DAPLINK_RAM_APP_SIZE            0x00004F00
N
N#define DAPLINK_RAM_SHARED_START        0x20004F00
N#define DAPLINK_RAM_SHARED_SIZE         0x00000100
N
N/* Flash Programming Info */
N
N#define DAPLINK_SECTOR_SIZE             0x00000400
N#define DAPLINK_MIN_WRITE_SIZE          0x00000400
N
N/* Current build */
N
N#if defined(DAPLINK_BL)
X#if 1L
N
N#define DAPLINK_ROM_APP_START            DAPLINK_ROM_BL_START
N#define DAPLINK_ROM_APP_SIZE             DAPLINK_ROM_BL_SIZE
N#define DAPLINK_ROM_UPDATE_START         DAPLINK_ROM_IF_START
N#define DAPLINK_ROM_UPDATE_SIZE          DAPLINK_ROM_IF_SIZE
N
N#elif defined(DAPLINK_IF)
X#elif 0L
S
S#define DAPLINK_ROM_APP_START            DAPLINK_ROM_IF_START
S#define DAPLINK_ROM_APP_SIZE             DAPLINK_ROM_IF_SIZE
S#define DAPLINK_ROM_UPDATE_START         DAPLINK_ROM_BL_START
S#define DAPLINK_ROM_UPDATE_SIZE          DAPLINK_ROM_BL_SIZE
S
S#else
S
S#error "Build must be either bootloader or interface"
S
N#endif
N
N#endif
L 29 "..\..\..\source\daplink\daplink.h" 2
N#include "compiler.h"
L 1 "..\..\..\source\daplink\compiler.h" 1
N/**
N * @file    compiler.h
N * @brief   Special asserts and macros
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef COMPILER_H
N#define COMPILER_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define COMPILER_CONCAT_(a, b) a##b
N#define COMPILER_CONCAT(a, b) COMPILER_CONCAT_(a, b)
N
N// Divide by zero if the the expression is false.  This
N// causes an error at compile time.
N//
N// The special value '__COUNTER__' is used to create a unique value to
N// append to 'compiler_assert_' to create a unique token.  This prevents
N// conflicts resulting from the same enum being declared multiple times.
N#define COMPILER_ASSERT(e) enum { COMPILER_CONCAT(compiler_assert_, __COUNTER__) = 1/((e) ? 1 : 0) }
N
N#define __at(_addr) __attribute__ ((at(_addr)))
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 30 "..\..\..\source\daplink\daplink.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N// Assert that regions are sequential with no gaps
N// and that they take up all available space
N
N// ROM check
NCOMPILER_ASSERT(DAPLINK_ROM_BL_START == DAPLINK_ROM_START);
Xenum { compiler_assert_0 = 1/((0x08000000 == 0x08000000) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_ROM_BL_START + DAPLINK_ROM_BL_SIZE == DAPLINK_ROM_CONFIG_ADMIN_START);
Xenum { compiler_assert_1 = 1/((0x08000000 + 0x0000BC00 == 0x0800BC00) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_ROM_CONFIG_ADMIN_START + DAPLINK_ROM_CONFIG_ADMIN_SIZE == DAPLINK_ROM_IF_START);
Xenum { compiler_assert_2 = 1/((0x0800BC00 + 0x00000400 == 0x0800C000) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_ROM_IF_START + DAPLINK_ROM_IF_SIZE == DAPLINK_ROM_CONFIG_USER_START);
Xenum { compiler_assert_3 = 1/((0x0800C000 + 0x00013C00 == 0x0801FC00) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_ROM_CONFIG_USER_START + DAPLINK_ROM_CONFIG_USER_SIZE == DAPLINK_ROM_START + DAPLINK_ROM_SIZE);
Xenum { compiler_assert_4 = 1/((0x0801FC00 + 0x00000400 == 0x08000000 + 0x00020000) ? 1 : 0) };
N
N// RAM check
NCOMPILER_ASSERT(DAPLINK_RAM_APP_START == DAPLINK_RAM_START);
Xenum { compiler_assert_5 = 1/((0x20000000 == 0x20000000) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_RAM_APP_START + DAPLINK_RAM_APP_SIZE == DAPLINK_RAM_SHARED_START);
Xenum { compiler_assert_6 = 1/((0x20000000 + 0x00004F00 == 0x20004F00) ? 1 : 0) };
NCOMPILER_ASSERT(DAPLINK_RAM_SHARED_START + DAPLINK_RAM_SHARED_SIZE == DAPLINK_RAM_START + DAPLINK_RAM_SIZE);
Xenum { compiler_assert_7 = 1/((0x20004F00 + 0x00000100 == 0x20000000 + 0x00005000) ? 1 : 0) };
N
N#define DAPLINK_BUILD_KEY_IF        0x9B939E8F
N#define DAPLINK_BUILD_KEY_BL        0x9B939D93
N
N//! @name HIC IDs
N//@{
N#define DAPLINK_HIC_ID_K20DX        0x97969900
N#define DAPLINK_HIC_ID_KL26         0x97969901
N#define DAPLINK_HIC_ID_LPC11U35     0x97969902
N#define DAPLINK_HIC_ID_SAM3U2C      0x97969903
N#define DAPLINK_HIC_ID_MAX32620     0x97969904
N#define DAPLINK_HIC_ID_LPC4322      0x97969905
N#define DAPLINK_HIC_ID_MAX32625     0x97969906
N#define DAPLINK_HIC_ID_MAX32550     0x97969907
N#define DAPLINK_HIC_ID_STM32F103XB  0x97969908
N#define DAPLINK_HIC_ID_K26F         0x97969909
N#define DAPLINK_HIC_ID_K22F         0x9796990A
N#define DAPLINK_HIC_ID_KL27Z        0x9796990B
N#define DAPLINK_HIC_ID_LPC54606     0x9796990C // reserving for future use
N#define DAPLINK_HIC_ID_STM32F723IE  0x9796990D // reserving for future use
N#define DAPLINK_HIC_ID_LPC55S69     0x97969920 // reserving for future use
N#define DAPLINK_HIC_ID_M48SSIDAE    0x97969921
N#define DAPLINK_HIC_ID_PSOC5        0x2E127069
N//@}
N
N#define DAPLINK_INFO_OFFSET         0x20
N
Ntypedef struct {
N    uint32_t build_key;
N    uint32_t hic_id;
N    uint32_t version;
N} daplink_info_t;
N
Nbool daplink_is_bootloader(void);
X_Bool daplink_is_bootloader(void);
Nbool daplink_is_interface(void);
X_Bool daplink_is_interface(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 23 "..\..\..\source\daplink\bootloader\daplink.c" 2
N#include "virtual_fs.h"
L 1 "..\..\..\source\daplink\drag-n-drop\virtual_fs.h" 1
N/**
N * @file    virtual_fs.h
N * @brief   FAT 12/16 filesystem handling
N *
N * DAPLink Interface Firmware
N * Copyright (c) 2009-2016, ARM Limited, All Rights Reserved
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the "License"); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * http://www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef VIRTUAL_FS_H
N#define VIRTUAL_FS_H
N
N#include <stdint.h>
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define VFS_CLUSTER_SIZE        0x1000
N#define VFS_SECTOR_SIZE         512
N#define VFS_INVALID_SECTOR      0xFFFFFFFF
N#define VFS_FILE_INVALID        0
N#define VFS_MAX_FILES           16
N
Ntypedef char vfs_filename_t[11];
N
Ntypedef enum {
N    VFS_FILE_ATTR_READ_ONLY     = (1 << 0),
N    VFS_FILE_ATTR_HIDDEN        = (1 << 1),
N    VFS_FILE_ATTR_SYSTEM        = (1 << 2),
N    VFS_FILE_ATTR_VOLUME_LABEL  = (1 << 3),
N    VFS_FILE_ATTR_SUB_DIR       = (1 << 4),
N    VFS_FILE_ATTR_ARCHIVE       = (1 << 5),
N} vfs_file_attr_bit_t;
N
Ntypedef enum {
N    VFS_FILE_CREATED = 0,   /*!< A new file was created */
N    VFS_FILE_DELETED,       /*!< An existing file was deleted */
N    VFS_FILE_CHANGED,       /*!< Some attribute of the file changed.
N                                  Note: when a file is deleted or
N                                  created a file changed
N                                  notification will also occur*/
N} vfs_file_change_t;
N
Ntypedef void *vfs_file_t;
Ntypedef uint32_t vfs_sector_t;
N
N// Callback for when data is written to a file on the virtual filesystem
Ntypedef void (*vfs_write_cb_t)(uint32_t sector_offset, const uint8_t *data, uint32_t num_sectors);
N// Callback for when data is ready from the virtual filesystem
Ntypedef uint32_t (*vfs_read_cb_t)(uint32_t sector_offset, uint8_t *data, uint32_t num_sectors);
N// Callback for when a file's attributes are changed on the virtual filesystem.  Note that the 'file' parameter
N// can be saved and compared to other files to see if they are referencing the same object.  The
N// same cannot be done with new_file_data since it points to a temporary buffer.
Ntypedef void (*vfs_file_change_cb_t)(const vfs_filename_t filename, vfs_file_change_t change,
N                                     vfs_file_t file, vfs_file_t new_file_data);
N
N// Initialize the filesystem with the given size and name
Nvoid vfs_init(const vfs_filename_t drive_name, uint32_t disk_size);
N
N// Get the total size of the virtual filesystem
Nuint32_t vfs_get_total_size(void);
N
N// Add a file to the virtual FS and return a handle to this file.
N// This must be called before vfs_read or vfs_write are called.
N// Adding a new file after vfs_read or vfs_write have been called results in undefined behavior.
Nvfs_file_t vfs_create_file(const vfs_filename_t filename, vfs_read_cb_t read_cb, vfs_write_cb_t write_cb, uint32_t len);
N
N// Set the attributes of a file
Nvoid vfs_file_set_attr(vfs_file_t file, vfs_file_attr_bit_t attr);
N
N// Get the starting sector of this file.
N// NOTE - If the file size is 0 there is no starting
N// sector so VFS_INVALID_SECTOR will be returned.
Nvfs_sector_t vfs_file_get_start_sector(vfs_file_t file);
N
N// Get the size of the file.
Nuint32_t vfs_file_get_size(vfs_file_t file);
N
N// Get the attributes of a file
Nvfs_file_attr_bit_t vfs_file_get_attr(vfs_file_t file);
N
N// Set the callback when a file is created, deleted or has atributes changed.
Nvoid vfs_set_file_change_callback(vfs_file_change_cb_t cb);
N
N// Read one or more sectors from the virtual filesystem
Nvoid vfs_read(uint32_t sector, uint8_t *buf, uint32_t num_of_sectors);
N
N// Write one or more sectors to the virtual filesystem
Nvoid vfs_write(uint32_t sector, const uint8_t *buf, uint32_t num_of_sectors);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 24 "..\..\..\source\daplink\bootloader\daplink.c" 2
N#include "compiler.h"
N
NCOMPILER_ASSERT(DAPLINK_BUILD_KEY == DAPLINK_BUILD_KEY_BL);
Xenum { compiler_assert_8 = 1/((0x9B939D93 == 0x9B939D93) ? 1 : 0) };
N
N// daplink_mode_file_name, daplink_url_name and
N// daplink_drive_name strings must be 11 characters
N// excluding the null terminated character
Nconst char daplink_mode_file_name[11] = "START_IFACT";
N
Nbool daplink_is_bootloader()
X_Bool daplink_is_bootloader()
N{
N    return true;
X    return 1;
N}
N
Nbool daplink_is_interface()
X_Bool daplink_is_interface()
N{
N    return false;
X    return 0;
N}
