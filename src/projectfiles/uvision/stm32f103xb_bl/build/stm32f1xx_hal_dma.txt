; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\stm32f1xx_hal_dma.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink -I..\..\..\source\daplink\bootloader -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\settings -I..\..\..\source\target -I..\..\..\source\rtos_none -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_bl -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DMSC_ENDPOINT -DDAPLINK_BL -DDAPLINK_BUILD_KEY=0x9B939D93 -DDRAG_N_DROP_SUPPORT -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 --omf_browse=.\build\stm32f1xx_hal_dma.crf ..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;670      */
;;;671    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b510              PUSH     {r4,lr}
;;;672    {
;;;673      /* Configure DMA Channel data length */
;;;674      hdma->Instance->CNDTR = DataLength;
000002  6804              LDR      r4,[r0,#0]
000004  6063              STR      r3,[r4,#4]
;;;675      
;;;676      /* Peripheral to Memory */
;;;677      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000006  6843              LDR      r3,[r0,#4]
000008  2b10              CMP      r3,#0x10
00000a  6803              LDR      r3,[r0,#0]            ;672
00000c  d003              BEQ      |L1.22|
;;;678      {
;;;679        /* Configure DMA Channel destination address */
;;;680        hdma->Instance->CPAR = DstAddress;
;;;681        
;;;682        /* Configure DMA Channel source address */
;;;683        hdma->Instance->CMAR = SrcAddress;
;;;684      }
;;;685      /* Memory to Peripheral */
;;;686      else
;;;687      {
;;;688        /* Configure DMA Channel source address */
;;;689        hdma->Instance->CPAR = SrcAddress;
00000e  6099              STR      r1,[r3,#8]
;;;690        
;;;691        /* Configure DMA Channel destination address */
;;;692        hdma->Instance->CMAR = DstAddress;
000010  6800              LDR      r0,[r0,#0]
000012  60c2              STR      r2,[r0,#0xc]
;;;693      }
;;;694    }
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  609a              STR      r2,[r3,#8]            ;680
000018  6800              LDR      r0,[r0,#0]            ;683
00001a  60c1              STR      r1,[r0,#0xc]          ;683
00001c  bd10              POP      {r4,pc}
;;;695    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;387      */
;;;388    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;389    {
000004  4604              MOV      r4,r0
;;;390      uint32_t tickstart = 0x00;
;;;391      
;;;392      /* Disable the channel */
;;;393      __HAL_DMA_DISABLE(hdma);
000006  6800              LDR      r0,[r0,#0]
000008  6801              LDR      r1,[r0,#0]
00000a  f0210101          BIC      r1,r1,#1
00000e  6001              STR      r1,[r0,#0]
;;;394    
;;;395      /* Get tick */
;;;396      tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4605              MOV      r5,r0
000016  2600              MOVS     r6,#0
;;;397      
;;;398      /* Check if the DMA Channel is effectively disabled */
;;;399      while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
;;;400      {
;;;401        /* Check for the Timeout */
;;;402        if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
000018  f44f777a          MOV      r7,#0x3e8
00001c  e00f              B        |L2.62|
                  |L2.30|
00001e  f7fffffe          BL       HAL_GetTick
000022  1b40              SUBS     r0,r0,r5
000024  42b8              CMP      r0,r7
000026  d90a              BLS      |L2.62|
;;;403        {
;;;404          /* Update error code */
;;;405          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
000028  f8540f34          LDR      r0,[r4,#0x34]!
00002c  f0400020          ORR      r0,r0,#0x20
000030  f8440914          STR      r0,[r4],#-0x14
;;;406    
;;;407          /* Change the DMA state */
;;;408          hdma->State = HAL_DMA_STATE_TIMEOUT;
000034  2003              MOVS     r0,#3
000036  7060              STRB     r0,[r4,#1]
;;;409    
;;;410          /* Process Unlocked */
;;;411          __HAL_UNLOCK(hdma);
000038  7026              STRB     r6,[r4,#0]
                  |L2.58|
;;;412    
;;;413          return HAL_TIMEOUT;
;;;414        }
;;;415      }
;;;416      /* Change the DMA state */
;;;417      hdma->State = HAL_DMA_STATE_READY;
;;;418      
;;;419      /* Process Unlocked */
;;;420      __HAL_UNLOCK(hdma);
;;;421      
;;;422      return HAL_OK;
;;;423    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.62|
00003e  6820              LDR      r0,[r4,#0]            ;399
000040  6800              LDR      r0,[r0,#0]            ;399
000042  07c0              LSLS     r0,r0,#31             ;399
000044  d1eb              BNE      |L2.30|
000046  2001              MOVS     r0,#1                 ;417
000048  f8840021          STRB     r0,[r4,#0x21]         ;417
00004c  f8846020          STRB     r6,[r4,#0x20]         ;420
000050  2000              MOVS     r0,#0                 ;422
000052  e7f2              B        |L2.58|
;;;424    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;230      */
;;;231    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b5f0              PUSH     {r4-r7,lr}
;;;232    {
000002  b338              CBZ      r0,|L3.84|
;;;233      /* Check the DMA handle allocation */
;;;234      if(hdma == NULL)
;;;235      {
;;;236        return HAL_ERROR;
;;;237      }
;;;238      
;;;239      /* Check the parameters */
;;;240      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;241    
;;;242      /* Check the DMA peripheral state */
;;;243      if(hdma->State == HAL_DMA_STATE_BUSY)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2902              CMP      r1,#2
00000a  d023              BEQ      |L3.84|
;;;244      {
;;;245         return HAL_ERROR;
;;;246      }
;;;247    
;;;248      /* Disable the selected DMA Channelx */
;;;249      __HAL_DMA_DISABLE(hdma);
00000c  6801              LDR      r1,[r0,#0]
00000e  680a              LDR      r2,[r1,#0]
000010  f0220201          BIC      r2,r2,#1
000014  600a              STR      r2,[r1,#0]
;;;250      
;;;251      /* Reset DMA Channel control register */
;;;252      hdma->Instance->CCR  = 0;
000016  6801              LDR      r1,[r0,#0]
000018  f04f0e00          MOV      lr,#0
00001c  f8c1e000          STR      lr,[r1,#0]
;;;253      
;;;254      /* Reset DMA Channel Number of Data to Transfer register */
;;;255      hdma->Instance->CNDTR = 0;
000020  6801              LDR      r1,[r0,#0]
000022  f8c1e004          STR      lr,[r1,#4]
;;;256      
;;;257      /* Reset DMA Channel peripheral address register */
;;;258      hdma->Instance->CPAR  = 0;
000026  6801              LDR      r1,[r0,#0]
000028  f8c1e008          STR      lr,[r1,#8]
;;;259      
;;;260      /* Reset DMA Channel memory address register */
;;;261      hdma->Instance->CMAR = 0;
00002c  6801              LDR      r1,[r0,#0]
00002e  f8c1e00c          STR      lr,[r1,#0xc]
;;;262    
;;;263      /* Clear all flags */
;;;264      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
000032  4a3c              LDR      r2,|L3.292|
000034  4b3b              LDR      r3,|L3.292|
000036  4c3b              LDR      r4,|L3.292|
000038  4d3a              LDR      r5,|L3.292|
00003a  4e3a              LDR      r6,|L3.292|
00003c  f8dfc0e4          LDR      r12,|L3.292|
000040  6801              LDR      r1,[r0,#0]
000042  3214              ADDS     r2,r2,#0x14
000044  3328              ADDS     r3,r3,#0x28
000046  343c              ADDS     r4,r4,#0x3c
000048  3550              ADDS     r5,r5,#0x50
00004a  3664              ADDS     r6,r6,#0x64
00004c  4561              CMP      r1,r12
00004e  d103              BNE      |L3.88|
000050  2102              MOVS     r1,#2
000052  e01b              B        |L3.140|
                  |L3.84|
000054  2001              MOVS     r0,#1                 ;245
;;;265      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
;;;266      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;267      
;;;268      /* Initialize the error code */
;;;269      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;270    
;;;271      /* Initialize the DMA state */
;;;272      hdma->State = HAL_DMA_STATE_RESET;
;;;273    
;;;274      /* Release Lock */
;;;275      __HAL_UNLOCK(hdma);
;;;276    
;;;277      return HAL_OK;
;;;278    }
000056  bdf0              POP      {r4-r7,pc}
                  |L3.88|
000058  4291              CMP      r1,r2                 ;264
00005a  d101              BNE      |L3.96|
00005c  2120              MOVS     r1,#0x20              ;264
00005e  e015              B        |L3.140|
                  |L3.96|
000060  4299              CMP      r1,r3                 ;264
000062  d102              BNE      |L3.106|
000064  f44f7100          MOV      r1,#0x200             ;264
000068  e010              B        |L3.140|
                  |L3.106|
00006a  42a1              CMP      r1,r4                 ;264
00006c  d102              BNE      |L3.116|
00006e  f44f5100          MOV      r1,#0x2000            ;264
000072  e00b              B        |L3.140|
                  |L3.116|
000074  42a9              CMP      r1,r5                 ;264
000076  d102              BNE      |L3.126|
000078  f44f3100          MOV      r1,#0x20000           ;264
00007c  e006              B        |L3.140|
                  |L3.126|
00007e  42b1              CMP      r1,r6                 ;264
000080  d102              BNE      |L3.136|
000082  f44f1100          MOV      r1,#0x200000          ;264
000086  e001              B        |L3.140|
                  |L3.136|
000088  f04f7100          MOV      r1,#0x2000000         ;264
                  |L3.140|
00008c  4f25              LDR      r7,|L3.292|
00008e  3f08              SUBS     r7,r7,#8              ;264
000090  6079              STR      r1,[r7,#4]            ;264
000092  6801              LDR      r1,[r0,#0]            ;265
000094  4561              CMP      r1,r12                ;265
000096  d101              BNE      |L3.156|
000098  2108              MOVS     r1,#8                 ;265
00009a  e019              B        |L3.208|
                  |L3.156|
00009c  4291              CMP      r1,r2                 ;265
00009e  d101              BNE      |L3.164|
0000a0  2180              MOVS     r1,#0x80              ;265
0000a2  e015              B        |L3.208|
                  |L3.164|
0000a4  4299              CMP      r1,r3                 ;265
0000a6  d102              BNE      |L3.174|
0000a8  f44f6100          MOV      r1,#0x800             ;265
0000ac  e010              B        |L3.208|
                  |L3.174|
0000ae  42a1              CMP      r1,r4                 ;265
0000b0  d102              BNE      |L3.184|
0000b2  f44f4100          MOV      r1,#0x8000            ;265
0000b6  e00b              B        |L3.208|
                  |L3.184|
0000b8  42a9              CMP      r1,r5                 ;265
0000ba  d102              BNE      |L3.194|
0000bc  f44f2100          MOV      r1,#0x80000           ;265
0000c0  e006              B        |L3.208|
                  |L3.194|
0000c2  42b1              CMP      r1,r6                 ;265
0000c4  d102              BNE      |L3.204|
0000c6  f44f0100          MOV      r1,#0x800000          ;265
0000ca  e001              B        |L3.208|
                  |L3.204|
0000cc  f04f6100          MOV      r1,#0x8000000         ;265
                  |L3.208|
0000d0  6079              STR      r1,[r7,#4]            ;265
0000d2  6801              LDR      r1,[r0,#0]            ;266
0000d4  4561              CMP      r1,r12                ;266
0000d6  d101              BNE      |L3.220|
0000d8  2104              MOVS     r1,#4                 ;266
0000da  e019              B        |L3.272|
                  |L3.220|
0000dc  4291              CMP      r1,r2                 ;266
0000de  d101              BNE      |L3.228|
0000e0  2140              MOVS     r1,#0x40              ;266
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  4299              CMP      r1,r3                 ;266
0000e6  d102              BNE      |L3.238|
0000e8  f44f6180          MOV      r1,#0x400             ;266
0000ec  e010              B        |L3.272|
                  |L3.238|
0000ee  42a1              CMP      r1,r4                 ;266
0000f0  d102              BNE      |L3.248|
0000f2  f44f4180          MOV      r1,#0x4000            ;266
0000f6  e00b              B        |L3.272|
                  |L3.248|
0000f8  42a9              CMP      r1,r5                 ;266
0000fa  d102              BNE      |L3.258|
0000fc  f44f2180          MOV      r1,#0x40000           ;266
000100  e006              B        |L3.272|
                  |L3.258|
000102  42b1              CMP      r1,r6                 ;266
000104  d102              BNE      |L3.268|
000106  f44f0180          MOV      r1,#0x400000          ;266
00010a  e001              B        |L3.272|
                  |L3.268|
00010c  f04f6180          MOV      r1,#0x4000000         ;266
                  |L3.272|
000110  6079              STR      r1,[r7,#4]            ;266
000112  f8c0e034          STR      lr,[r0,#0x34]         ;269
000116  f880e021          STRB     lr,[r0,#0x21]         ;272
00011a  f880e020          STRB     lr,[r0,#0x20]         ;275
00011e  2000              MOVS     r0,#0                 ;277
000120  bdf0              POP      {r4-r7,pc}
;;;279    
                          ENDP

000122  0000              DCW      0x0000
                  |L3.292|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;644      */
;;;645    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b40              LDR      r0,[r0,#0x34]
;;;646    {
;;;647      return hdma->ErrorCode;
;;;648    }
000002  4770              BX       lr
;;;649    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;633      */
;;;634    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;635    {
;;;636      return hdma->State;
;;;637    }
000004  4770              BX       lr
;;;638    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;521      */
;;;522    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;523    {
;;;524      /* Transfer Error Interrupt management ***************************************/
;;;525      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
000004  f8df8240          LDR      r8,|L6.584|
000008  4604              MOV      r4,r0                 ;523
00000a  f8d8c000          LDR      r12,[r8,#0]
00000e  f8dfb238          LDR      r11,|L6.584|
000012  4d8d              LDR      r5,|L6.584|
000014  4e8c              LDR      r6,|L6.584|
000016  4f8c              LDR      r7,|L6.584|
000018  6800              LDR      r0,[r0,#0]
00001a  f44f6100          MOV      r1,#0x800
00001e  f8df9228          LDR      r9,|L6.584|
000022  f8dfa224          LDR      r10,|L6.584|
000026  f10b0b08          ADD      r11,r11,#8
00002a  010b              LSLS     r3,r1,#4
00002c  351c              ADDS     r5,r5,#0x1c
00002e  3630              ADDS     r6,r6,#0x30
000030  3744              ADDS     r7,r7,#0x44
000032  f44f2e00          MOV      lr,#0x80000
000036  f1090958          ADD      r9,r9,#0x58
00003a  f10a0a6c          ADD      r10,r10,#0x6c
00003e  4558              CMP      r0,r11
000040  d101              BNE      |L6.70|
000042  2208              MOVS     r2,#8
000044  e016              B        |L6.116|
                  |L6.70|
000046  42a8              CMP      r0,r5
000048  d101              BNE      |L6.78|
00004a  2280              MOVS     r2,#0x80
00004c  e012              B        |L6.116|
                  |L6.78|
00004e  42b0              CMP      r0,r6
000050  d101              BNE      |L6.86|
000052  460a              MOV      r2,r1
000054  e00e              B        |L6.116|
                  |L6.86|
000056  42b8              CMP      r0,r7
000058  d101              BNE      |L6.94|
00005a  461a              MOV      r2,r3
00005c  e00a              B        |L6.116|
                  |L6.94|
00005e  4548              CMP      r0,r9
000060  d101              BNE      |L6.102|
000062  4672              MOV      r2,lr
000064  e006              B        |L6.116|
                  |L6.102|
000066  4550              CMP      r0,r10
000068  d102              BNE      |L6.112|
00006a  f44f0200          MOV      r2,#0x800000
00006e  e001              B        |L6.116|
                  |L6.112|
000070  f04f6200          MOV      r2,#0x8000000
                  |L6.116|
000074  ea1c0f02          TST      r12,r2
000078  d031              BEQ      |L6.222|
;;;526      {
;;;527        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
00007a  6802              LDR      r2,[r0,#0]
00007c  43d2              MVNS     r2,r2
00007e  0712              LSLS     r2,r2,#28
000080  d42d              BMI      |L6.222|
;;;528        {
;;;529          /* Disable the transfer error interrupt */
;;;530          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
000082  6802              LDR      r2,[r0,#0]
000084  f0220208          BIC      r2,r2,#8
000088  6002              STR      r2,[r0,#0]
;;;531          
;;;532          /* Clear the transfer error flag */
;;;533          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
00008a  6820              LDR      r0,[r4,#0]
00008c  4558              CMP      r0,r11
00008e  d101              BNE      |L6.148|
000090  2108              MOVS     r1,#8
000092  e014              B        |L6.190|
                  |L6.148|
000094  42a8              CMP      r0,r5
000096  d101              BNE      |L6.156|
000098  2180              MOVS     r1,#0x80
00009a  e010              B        |L6.190|
                  |L6.156|
00009c  42b0              CMP      r0,r6
00009e  d00e              BEQ      |L6.190|
0000a0  42b8              CMP      r0,r7
0000a2  d101              BNE      |L6.168|
0000a4  4619              MOV      r1,r3
0000a6  e00a              B        |L6.190|
                  |L6.168|
0000a8  4548              CMP      r0,r9
0000aa  d101              BNE      |L6.176|
0000ac  4671              MOV      r1,lr
0000ae  e006              B        |L6.190|
                  |L6.176|
0000b0  4550              CMP      r0,r10
0000b2  d102              BNE      |L6.186|
0000b4  f44f0100          MOV      r1,#0x800000
0000b8  e001              B        |L6.190|
                  |L6.186|
0000ba  f04f6100          MOV      r1,#0x8000000
                  |L6.190|
0000be  f8c81004          STR      r1,[r8,#4]
;;;534          
;;;535          /* Update error code */
;;;536          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
0000c2  6b60              LDR      r0,[r4,#0x34]
0000c4  f0400001          ORR      r0,r0,#1
0000c8  6360              STR      r0,[r4,#0x34]
;;;537          
;;;538          /* Change the DMA state */
;;;539          hdma->State = HAL_DMA_STATE_ERROR;
0000ca  2004              MOVS     r0,#4
0000cc  f8840021          STRB     r0,[r4,#0x21]
;;;540          
;;;541          /* Process Unlocked */
;;;542          __HAL_UNLOCK(hdma); 
0000d0  2000              MOVS     r0,#0
0000d2  f8840020          STRB     r0,[r4,#0x20]
;;;543          
;;;544          if (hdma->XferErrorCallback != NULL)
0000d6  6b21              LDR      r1,[r4,#0x30]
0000d8  b109              CBZ      r1,|L6.222|
;;;545          {
;;;546            /* Transfer error callback */
;;;547            hdma->XferErrorCallback(hdma);
0000da  4620              MOV      r0,r4
0000dc  4788              BLX      r1
                  |L6.222|
;;;548          }
;;;549        }
;;;550      }
;;;551    
;;;552      /* Half Transfer Complete Interrupt management ******************************/
;;;553      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
0000de  485a              LDR      r0,|L6.584|
0000e0  f8d08000          LDR      r8,[r0,#0]
0000e4  f44f6180          MOV      r1,#0x400
0000e8  6820              LDR      r0,[r4,#0]
0000ea  010b              LSLS     r3,r1,#4
0000ec  f44f2e80          MOV      lr,#0x40000
0000f0  f04f6c80          MOV      r12,#0x4000000
0000f4  4558              CMP      r0,r11
0000f6  d101              BNE      |L6.252|
0000f8  2204              MOVS     r2,#4
0000fa  e015              B        |L6.296|
                  |L6.252|
0000fc  42a8              CMP      r0,r5
0000fe  d101              BNE      |L6.260|
000100  2240              MOVS     r2,#0x40
000102  e011              B        |L6.296|
                  |L6.260|
000104  42b0              CMP      r0,r6
000106  d101              BNE      |L6.268|
000108  460a              MOV      r2,r1
00010a  e00d              B        |L6.296|
                  |L6.268|
00010c  42b8              CMP      r0,r7
00010e  d101              BNE      |L6.276|
000110  461a              MOV      r2,r3
000112  e009              B        |L6.296|
                  |L6.276|
000114  4548              CMP      r0,r9
000116  d101              BNE      |L6.284|
000118  4672              MOV      r2,lr
00011a  e005              B        |L6.296|
                  |L6.284|
00011c  4550              CMP      r0,r10
00011e  d102              BNE      |L6.294|
000120  f44f0280          MOV      r2,#0x400000
000124  e000              B        |L6.296|
                  |L6.294|
000126  4662              MOV      r2,r12
                  |L6.296|
000128  ea180f02          TST      r8,r2
00012c  d02c              BEQ      |L6.392|
;;;554      {
;;;555        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
00012e  6802              LDR      r2,[r0,#0]
000130  43d2              MVNS     r2,r2
000132  0752              LSLS     r2,r2,#29
000134  d428              BMI      |L6.392|
;;;556        { 
;;;557          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;558          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
000136  6802              LDR      r2,[r0,#0]
000138  0692              LSLS     r2,r2,#26
00013a  d403              BMI      |L6.324|
;;;559          {
;;;560            /* Disable the half transfer interrupt */
;;;561            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
00013c  6802              LDR      r2,[r0,#0]
00013e  f0220204          BIC      r2,r2,#4
000142  6002              STR      r2,[r0,#0]
                  |L6.324|
;;;562          }
;;;563          /* Clear the half transfer complete flag */
;;;564          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000144  6820              LDR      r0,[r4,#0]
000146  4558              CMP      r0,r11
000148  d101              BNE      |L6.334|
00014a  2104              MOVS     r1,#4
00014c  e013              B        |L6.374|
                  |L6.334|
00014e  42a8              CMP      r0,r5
000150  d101              BNE      |L6.342|
000152  2140              MOVS     r1,#0x40
000154  e00f              B        |L6.374|
                  |L6.342|
000156  42b0              CMP      r0,r6
000158  d00d              BEQ      |L6.374|
00015a  42b8              CMP      r0,r7
00015c  d101              BNE      |L6.354|
00015e  4619              MOV      r1,r3
000160  e009              B        |L6.374|
                  |L6.354|
000162  4548              CMP      r0,r9
000164  d101              BNE      |L6.362|
000166  4671              MOV      r1,lr
000168  e005              B        |L6.374|
                  |L6.362|
00016a  4550              CMP      r0,r10
00016c  d102              BNE      |L6.372|
00016e  f44f0180          MOV      r1,#0x400000
000172  e000              B        |L6.374|
                  |L6.372|
000174  4661              MOV      r1,r12
                  |L6.374|
000176  4834              LDR      r0,|L6.584|
000178  6041              STR      r1,[r0,#4]
;;;565    
;;;566          /* Change DMA peripheral state */
;;;567          hdma->State = HAL_DMA_STATE_READY_HALF;
00017a  2011              MOVS     r0,#0x11
00017c  f8840021          STRB     r0,[r4,#0x21]
;;;568    
;;;569          if(hdma->XferHalfCpltCallback != NULL)
000180  6ae1              LDR      r1,[r4,#0x2c]
000182  b109              CBZ      r1,|L6.392|
;;;570          {
;;;571            /* Half transfer callback */
;;;572            hdma->XferHalfCpltCallback(hdma);
000184  4620              MOV      r0,r4
000186  4788              BLX      r1
                  |L6.392|
;;;573          }
;;;574        }
;;;575      }
;;;576      
;;;577      /* Transfer Complete Interrupt management ***********************************/
;;;578      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
000188  4b2f              LDR      r3,|L6.584|
00018a  f8d38000          LDR      r8,[r3,#0]
00018e  46dc              MOV      r12,r11
000190  6820              LDR      r0,[r4,#0]
000192  1559              ASRS     r1,r3,#21
000194  f44f5b00          MOV      r11,#0x2000
000198  f44f3e00          MOV      lr,#0x20000
00019c  4560              CMP      r0,r12
00019e  d101              BNE      |L6.420|
0001a0  2202              MOVS     r2,#2
0001a2  e016              B        |L6.466|
                  |L6.420|
0001a4  42a8              CMP      r0,r5
0001a6  d101              BNE      |L6.428|
0001a8  2220              MOVS     r2,#0x20
0001aa  e012              B        |L6.466|
                  |L6.428|
0001ac  42b0              CMP      r0,r6
0001ae  d101              BNE      |L6.436|
0001b0  460a              MOV      r2,r1
0001b2  e00e              B        |L6.466|
                  |L6.436|
0001b4  42b8              CMP      r0,r7
0001b6  d101              BNE      |L6.444|
0001b8  465a              MOV      r2,r11
0001ba  e00a              B        |L6.466|
                  |L6.444|
0001bc  4548              CMP      r0,r9
0001be  d101              BNE      |L6.452|
0001c0  4672              MOV      r2,lr
0001c2  e006              B        |L6.466|
                  |L6.452|
0001c4  4550              CMP      r0,r10
0001c6  d102              BNE      |L6.462|
0001c8  f44f1200          MOV      r2,#0x200000
0001cc  e001              B        |L6.466|
                  |L6.462|
0001ce  f04f7200          MOV      r2,#0x2000000
                  |L6.466|
0001d2  ea180f02          TST      r8,r2
0001d6  d034              BEQ      |L6.578|
;;;579      {
;;;580        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
0001d8  6802              LDR      r2,[r0,#0]
0001da  43d2              MVNS     r2,r2
0001dc  0792              LSLS     r2,r2,#30
0001de  d430              BMI      |L6.578|
;;;581        {
;;;582          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
0001e0  6802              LDR      r2,[r0,#0]
0001e2  0692              LSLS     r2,r2,#26
0001e4  d403              BMI      |L6.494|
;;;583          {
;;;584            /* Disable the transfer complete interrupt */
;;;585            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
0001e6  6802              LDR      r2,[r0,#0]
0001e8  f0220202          BIC      r2,r2,#2
0001ec  6002              STR      r2,[r0,#0]
                  |L6.494|
;;;586          }
;;;587          /* Clear the transfer complete flag */
;;;588          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0001ee  6820              LDR      r0,[r4,#0]
0001f0  4560              CMP      r0,r12
0001f2  d101              BNE      |L6.504|
0001f4  2102              MOVS     r1,#2
0001f6  e014              B        |L6.546|
                  |L6.504|
0001f8  42a8              CMP      r0,r5
0001fa  d101              BNE      |L6.512|
0001fc  2120              MOVS     r1,#0x20
0001fe  e010              B        |L6.546|
                  |L6.512|
000200  42b0              CMP      r0,r6
000202  d00e              BEQ      |L6.546|
000204  42b8              CMP      r0,r7
000206  d101              BNE      |L6.524|
000208  4659              MOV      r1,r11
00020a  e00a              B        |L6.546|
                  |L6.524|
00020c  4548              CMP      r0,r9
00020e  d101              BNE      |L6.532|
000210  4671              MOV      r1,lr
000212  e006              B        |L6.546|
                  |L6.532|
000214  4550              CMP      r0,r10
000216  d102              BNE      |L6.542|
000218  f44f1100          MOV      r1,#0x200000
00021c  e001              B        |L6.546|
                  |L6.542|
00021e  f04f7100          MOV      r1,#0x2000000
                  |L6.546|
000222  6059              STR      r1,[r3,#4]
;;;589        
;;;590          /* Update error code */
;;;591          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
000224  6b60              LDR      r0,[r4,#0x34]
000226  6360              STR      r0,[r4,#0x34]
;;;592    
;;;593          /* Change the DMA state */
;;;594          hdma->State = HAL_DMA_STATE_READY;
000228  2001              MOVS     r0,#1
00022a  f8840021          STRB     r0,[r4,#0x21]
;;;595        
;;;596          /* Process Unlocked */
;;;597          __HAL_UNLOCK(hdma);
00022e  2000              MOVS     r0,#0
000230  f8840020          STRB     r0,[r4,#0x20]
;;;598        
;;;599          if(hdma->XferCpltCallback != NULL)
000234  6aa1              LDR      r1,[r4,#0x28]
000236  2900              CMP      r1,#0
000238  d003              BEQ      |L6.578|
;;;600          {       
;;;601            /* Transfer complete callback */
;;;602            hdma->XferCpltCallback(hdma);
00023a  4620              MOV      r0,r4
00023c  e8bd5ff0          POP      {r4-r12,lr}
000240  4708              BX       r1
                  |L6.578|
;;;603          }
;;;604        }
;;;605      }
;;;606    }
000242  e8bd9ff0          POP      {r4-r12,pc}
;;;607    
                          ENDP

000246  0000              DCW      0x0000
                  |L6.584|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Init PROC
;;;169      */
;;;170    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;171    { 
000002  b120              CBZ      r0,|L7.14|
;;;172      uint32_t tmp = 0;
;;;173      
;;;174      /* Check the DMA handle allocation */
;;;175      if(hdma == NULL)
;;;176      {
;;;177        return HAL_ERROR;
;;;178      }
;;;179      
;;;180      /* Check the parameters */
;;;181      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;182      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;183      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;184      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;185      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;186      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;187      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;188      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;189      
;;;190      if(hdma->State == HAL_DMA_STATE_RESET)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2400              MOVS     r4,#0
00000a  b111              CBZ      r1,|L7.18|
00000c  e003              B        |L7.22|
                  |L7.14|
00000e  2001              MOVS     r0,#1                 ;177
;;;191      {  
;;;192        /* Allocate lock resource and initialize it */
;;;193        hdma->Lock = HAL_UNLOCKED;
;;;194      }
;;;195      
;;;196      /* Change DMA peripheral state */
;;;197      hdma->State = HAL_DMA_STATE_BUSY;
;;;198    
;;;199      /* Get the CR register value */
;;;200      tmp = hdma->Instance->CCR;
;;;201      
;;;202      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
;;;203      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;204                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;205                          DMA_CCR_DIR));
;;;206      
;;;207      /* Prepare the DMA Channel configuration */
;;;208      tmp |=  hdma->Init.Direction        |
;;;209              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;210              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;211              hdma->Init.Mode                | hdma->Init.Priority;
;;;212    
;;;213      /* Write to DMA Channel CR register */
;;;214      hdma->Instance->CCR = tmp;  
;;;215      
;;;216      /* Initialise the error code */
;;;217      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;218    
;;;219      /* Initialize the DMA state*/
;;;220      hdma->State = HAL_DMA_STATE_READY;
;;;221      
;;;222      return HAL_OK;
;;;223    }
000010  bd70              POP      {r4-r6,pc}
                  |L7.18|
000012  f8804020          STRB     r4,[r0,#0x20]         ;193
                  |L7.22|
000016  2102              MOVS     r1,#2                 ;197
000018  f8801021          STRB     r1,[r0,#0x21]         ;197
00001c  6801              LDR      r1,[r0,#0]            ;200
00001e  680a              LDR      r2,[r1,#0]            ;200
000020  f64373f0          MOV      r3,#0x3ff0            ;203
000024  439a              BICS     r2,r2,r3              ;203
000026  e9d03501          LDRD     r3,r5,[r0,#4]         ;203
00002a  432b              ORRS     r3,r3,r5              ;208
00002c  e9d05603          LDRD     r5,r6,[r0,#0xc]       ;208
000030  4335              ORRS     r5,r5,r6              ;208
000032  432b              ORRS     r3,r3,r5              ;208
000034  6945              LDR      r5,[r0,#0x14]         ;208
000036  432b              ORRS     r3,r3,r5              ;208
000038  6985              LDR      r5,[r0,#0x18]         ;208
00003a  432b              ORRS     r3,r3,r5              ;208
00003c  69c5              LDR      r5,[r0,#0x1c]         ;208
00003e  432b              ORRS     r3,r3,r5              ;208
000040  4313              ORRS     r3,r3,r2              ;208
000042  600b              STR      r3,[r1,#0]            ;214
000044  6344              STR      r4,[r0,#0x34]         ;217
000046  2101              MOVS     r1,#1                 ;220
000048  f8801021          STRB     r1,[r0,#0x21]         ;220
00004c  2000              MOVS     r0,#0                 ;222
00004e  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP


                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;434    {
000004  b082              SUB      sp,sp,#8
;;;435      uint32_t temp;
;;;436      uint32_t tickstart = 0x00;
;;;437      
;;;438      /* Get the level transfer complete flag */
;;;439      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;440      {
;;;441        /* Transfer Complete flag */
;;;442        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
000006  4f8b              LDR      r7,|L8.564|
000008  9903              LDR      r1,[sp,#0xc]
00000a  3714              ADDS     r7,r7,#0x14
00000c  4604              MOV      r4,r0                 ;434
00000e  f8df8224          LDR      r8,|L8.564|
000012  f8df9220          LDR      r9,|L8.564|
000016  f8dfa21c          LDR      r10,|L8.564|
00001a  2900              CMP      r1,#0                 ;439
00001c  4e85              LDR      r6,|L8.564|
00001e  6800              LDR      r0,[r0,#0]
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Half Transfer Complete flag */
;;;447        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
000020  4985              LDR      r1,|L8.568|
000022  4615              MOV      r5,r2                 ;434
000024  f1080828          ADD      r8,r8,#0x28           ;442
000028  f109093c          ADD      r9,r9,#0x3c           ;442
00002c  f10a0a50          ADD      r10,r10,#0x50         ;442
000030  d003              BEQ      |L8.58|
000032  4288              CMP      r0,r1
000034  d120              BNE      |L8.120|
000036  2004              MOVS     r0,#4
000038  e038              B        |L8.172|
                  |L8.58|
00003a  4288              CMP      r0,r1                 ;442
00003c  d101              BNE      |L8.66|
00003e  2002              MOVS     r0,#2                 ;442
000040  e034              B        |L8.172|
                  |L8.66|
000042  42b0              CMP      r0,r6                 ;442
000044  d101              BNE      |L8.74|
000046  2020              MOVS     r0,#0x20              ;442
000048  e030              B        |L8.172|
                  |L8.74|
00004a  42b8              CMP      r0,r7                 ;442
00004c  d102              BNE      |L8.84|
00004e  f44f7000          MOV      r0,#0x200             ;442
000052  e02b              B        |L8.172|
                  |L8.84|
000054  4540              CMP      r0,r8                 ;442
000056  d102              BNE      |L8.94|
000058  f44f5000          MOV      r0,#0x2000            ;442
00005c  e026              B        |L8.172|
                  |L8.94|
00005e  4548              CMP      r0,r9                 ;442
000060  d102              BNE      |L8.104|
000062  f44f3000          MOV      r0,#0x20000           ;442
000066  e021              B        |L8.172|
                  |L8.104|
000068  4550              CMP      r0,r10                ;442
00006a  d102              BNE      |L8.114|
00006c  f44f1000          MOV      r0,#0x200000          ;442
000070  e01c              B        |L8.172|
                  |L8.114|
000072  f04f7000          MOV      r0,#0x2000000         ;442
000076  e019              B        |L8.172|
                  |L8.120|
000078  42b0              CMP      r0,r6
00007a  d101              BNE      |L8.128|
00007c  2040              MOVS     r0,#0x40
00007e  e015              B        |L8.172|
                  |L8.128|
000080  42b8              CMP      r0,r7
000082  d102              BNE      |L8.138|
000084  f44f6080          MOV      r0,#0x400
000088  e010              B        |L8.172|
                  |L8.138|
00008a  4540              CMP      r0,r8
00008c  d102              BNE      |L8.148|
00008e  f44f4080          MOV      r0,#0x4000
000092  e00b              B        |L8.172|
                  |L8.148|
000094  4548              CMP      r0,r9
000096  d102              BNE      |L8.158|
000098  f44f2080          MOV      r0,#0x40000
00009c  e006              B        |L8.172|
                  |L8.158|
00009e  4550              CMP      r0,r10
0000a0  d102              BNE      |L8.168|
0000a2  f44f0080          MOV      r0,#0x400000
0000a6  e001              B        |L8.172|
                  |L8.168|
0000a8  f04f6080          MOV      r0,#0x4000000
                  |L8.172|
0000ac  4683              MOV      r11,r0
;;;448      }
;;;449    
;;;450      /* Get tick */
;;;451      tickstart = HAL_GetTick();
0000ae  f7fffffe          BL       HAL_GetTick
;;;452    
;;;453      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
0000b2  9000              STR      r0,[sp,#0]
0000b4  e067              B        |L8.390|
                  |L8.182|
;;;454      {
;;;455        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
0000b6  680a              LDR      r2,[r1,#0]
0000b8  495f              LDR      r1,|L8.568|
0000ba  6820              LDR      r0,[r4,#0]
0000bc  4288              CMP      r0,r1
0000be  d101              BNE      |L8.196|
0000c0  2108              MOVS     r1,#8
0000c2  e019              B        |L8.248|
                  |L8.196|
0000c4  42b0              CMP      r0,r6
0000c6  d101              BNE      |L8.204|
0000c8  2180              MOVS     r1,#0x80
0000ca  e015              B        |L8.248|
                  |L8.204|
0000cc  42b8              CMP      r0,r7
0000ce  d102              BNE      |L8.214|
0000d0  f44f6100          MOV      r1,#0x800
0000d4  e010              B        |L8.248|
                  |L8.214|
0000d6  4540              CMP      r0,r8
0000d8  d102              BNE      |L8.224|
0000da  f44f4100          MOV      r1,#0x8000
0000de  e00b              B        |L8.248|
                  |L8.224|
0000e0  4548              CMP      r0,r9
0000e2  d102              BNE      |L8.234|
0000e4  f44f2100          MOV      r1,#0x80000
0000e8  e006              B        |L8.248|
                  |L8.234|
0000ea  4550              CMP      r0,r10
0000ec  d102              BNE      |L8.244|
0000ee  f44f0100          MOV      r1,#0x800000
0000f2  e001              B        |L8.248|
                  |L8.244|
0000f4  f04f6100          MOV      r1,#0x8000000
                  |L8.248|
0000f8  420a              TST      r2,r1
0000fa  d02f              BEQ      |L8.348|
;;;456        {      
;;;457          /* Clear the transfer error flags */
;;;458          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
0000fc  494e              LDR      r1,|L8.568|
0000fe  4288              CMP      r0,r1
000100  d101              BNE      |L8.262|
000102  2008              MOVS     r0,#8
000104  e019              B        |L8.314|
                  |L8.262|
000106  42b0              CMP      r0,r6
000108  d101              BNE      |L8.270|
00010a  2080              MOVS     r0,#0x80
00010c  e015              B        |L8.314|
                  |L8.270|
00010e  42b8              CMP      r0,r7
000110  d102              BNE      |L8.280|
000112  f44f6000          MOV      r0,#0x800
000116  e010              B        |L8.314|
                  |L8.280|
000118  4540              CMP      r0,r8
00011a  d102              BNE      |L8.290|
00011c  f44f4000          MOV      r0,#0x8000
000120  e00b              B        |L8.314|
                  |L8.290|
000122  4548              CMP      r0,r9
000124  d102              BNE      |L8.300|
000126  f44f2000          MOV      r0,#0x80000
00012a  e006              B        |L8.314|
                  |L8.300|
00012c  4550              CMP      r0,r10
00012e  d102              BNE      |L8.310|
000130  f44f0000          MOV      r0,#0x800000
000134  e001              B        |L8.314|
                  |L8.310|
000136  f04f6000          MOV      r0,#0x8000000
                  |L8.314|
00013a  493f              LDR      r1,|L8.568|
00013c  3908              SUBS     r1,r1,#8
00013e  6048              STR      r0,[r1,#4]
;;;459          
;;;460          /* Update error code */
;;;461          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
000140  f8540f34          LDR      r0,[r4,#0x34]!
000144  f0400001          ORR      r0,r0,#1
000148  f8440914          STR      r0,[r4],#-0x14
;;;462    
;;;463          /* Change the DMA state */
;;;464          hdma->State= HAL_DMA_STATE_ERROR;
00014c  2004              MOVS     r0,#4
00014e  7060              STRB     r0,[r4,#1]
;;;465          
;;;466          /* Process Unlocked */
;;;467          __HAL_UNLOCK(hdma);
000150  2000              MOVS     r0,#0
000152  7020              STRB     r0,[r4,#0]
;;;468          
;;;469          return HAL_ERROR;
000154  2001              MOVS     r0,#1
                  |L8.342|
;;;470        }
;;;471        /* Check for the Timeout */
;;;472        if(Timeout != HAL_MAX_DELAY)
;;;473        {
;;;474          if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
;;;475          {
;;;476            /* Update error code */
;;;477            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;478            
;;;479            /* Change the DMA state */
;;;480            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;481    
;;;482            /* Process Unlocked */
;;;483            __HAL_UNLOCK(hdma);
;;;484            
;;;485            return HAL_TIMEOUT;
;;;486          }
;;;487        }
;;;488      }
;;;489    
;;;490      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;491      {
;;;492        /* Clear the transfer complete flag */
;;;493        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;494    
;;;495        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;496        all transfers are complete) */
;;;497        hdma->State = HAL_DMA_STATE_READY;
;;;498    
;;;499      }
;;;500      else
;;;501      { 
;;;502        /* Clear the half transfer complete flag */
;;;503        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;504      
;;;505        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;506        all transfers of half buffer are complete) */
;;;507        hdma->State = HAL_DMA_STATE_READY_HALF;
;;;508      }
;;;509      
;;;510      /* Process unlocked */
;;;511      __HAL_UNLOCK(hdma);
;;;512    
;;;513      return HAL_OK;
;;;514    }
000156  b005              ADD      sp,sp,#0x14
000158  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.348|
00015c  1c68              ADDS     r0,r5,#1              ;472
00015e  d012              BEQ      |L8.390|
000160  b12d              CBZ      r5,|L8.366|
000162  f7fffffe          BL       HAL_GetTick
000166  9900              LDR      r1,[sp,#0]            ;474
000168  1a40              SUBS     r0,r0,r1              ;474
00016a  42a8              CMP      r0,r5                 ;474
00016c  d90b              BLS      |L8.390|
                  |L8.366|
00016e  f8540f34          LDR      r0,[r4,#0x34]!        ;477
000172  f0400020          ORR      r0,r0,#0x20           ;477
000176  f8440914          STR      r0,[r4],#-0x14        ;477
00017a  2003              MOVS     r0,#3                 ;480
00017c  7060              STRB     r0,[r4,#1]            ;480
00017e  2000              MOVS     r0,#0                 ;483
000180  7020              STRB     r0,[r4,#0]            ;483
000182  2003              MOVS     r0,#3                 ;485
000184  e7e7              B        |L8.342|
                  |L8.390|
000186  492c              LDR      r1,|L8.568|
000188  3908              SUBS     r1,r1,#8              ;453
00018a  6808              LDR      r0,[r1,#0]            ;453
00018c  ea100f0b          TST      r0,r11                ;453
000190  d091              BEQ      |L8.182|
000192  9803              LDR      r0,[sp,#0xc]          ;490
000194  4928              LDR      r1,|L8.568|
000196  2800              CMP      r0,#0                 ;490
000198  6820              LDR      r0,[r4,#0]            ;490
00019a  d003              BEQ      |L8.420|
00019c  4288              CMP      r0,r1                 ;503
00019e  d124              BNE      |L8.490|
0001a0  2004              MOVS     r0,#4                 ;503
0001a2  e03c              B        |L8.542|
                  |L8.420|
0001a4  4288              CMP      r0,r1                 ;493
0001a6  d101              BNE      |L8.428|
0001a8  2002              MOVS     r0,#2                 ;493
0001aa  e019              B        |L8.480|
                  |L8.428|
0001ac  42b0              CMP      r0,r6                 ;493
0001ae  d101              BNE      |L8.436|
0001b0  2020              MOVS     r0,#0x20              ;493
0001b2  e015              B        |L8.480|
                  |L8.436|
0001b4  42b8              CMP      r0,r7                 ;493
0001b6  d102              BNE      |L8.446|
0001b8  f44f7000          MOV      r0,#0x200             ;493
0001bc  e010              B        |L8.480|
                  |L8.446|
0001be  4540              CMP      r0,r8                 ;493
0001c0  d102              BNE      |L8.456|
0001c2  f44f5000          MOV      r0,#0x2000            ;493
0001c6  e00b              B        |L8.480|
                  |L8.456|
0001c8  4548              CMP      r0,r9                 ;493
0001ca  d102              BNE      |L8.466|
0001cc  f44f3000          MOV      r0,#0x20000           ;493
0001d0  e006              B        |L8.480|
                  |L8.466|
0001d2  4550              CMP      r0,r10                ;493
0001d4  d102              BNE      |L8.476|
0001d6  f44f1000          MOV      r0,#0x200000          ;493
0001da  e001              B        |L8.480|
                  |L8.476|
0001dc  f04f7000          MOV      r0,#0x2000000         ;493
                  |L8.480|
0001e0  4915              LDR      r1,|L8.568|
0001e2  3908              SUBS     r1,r1,#8              ;493
0001e4  6048              STR      r0,[r1,#4]            ;493
0001e6  2001              MOVS     r0,#1                 ;497
0001e8  e01d              B        |L8.550|
                  |L8.490|
0001ea  42b0              CMP      r0,r6                 ;503
0001ec  d101              BNE      |L8.498|
0001ee  2040              MOVS     r0,#0x40              ;503
0001f0  e015              B        |L8.542|
                  |L8.498|
0001f2  42b8              CMP      r0,r7                 ;503
0001f4  d102              BNE      |L8.508|
0001f6  f44f6080          MOV      r0,#0x400             ;503
0001fa  e010              B        |L8.542|
                  |L8.508|
0001fc  4540              CMP      r0,r8                 ;503
0001fe  d102              BNE      |L8.518|
000200  f44f4080          MOV      r0,#0x4000            ;503
000204  e00b              B        |L8.542|
                  |L8.518|
000206  4548              CMP      r0,r9                 ;503
000208  d102              BNE      |L8.528|
00020a  f44f2080          MOV      r0,#0x40000           ;503
00020e  e006              B        |L8.542|
                  |L8.528|
000210  4550              CMP      r0,r10                ;503
000212  d102              BNE      |L8.538|
000214  f44f0080          MOV      r0,#0x400000          ;503
000218  e001              B        |L8.542|
                  |L8.538|
00021a  f04f6080          MOV      r0,#0x4000000         ;503
                  |L8.542|
00021e  4906              LDR      r1,|L8.568|
000220  3908              SUBS     r1,r1,#8              ;503
000222  6048              STR      r0,[r1,#4]            ;503
000224  2011              MOVS     r0,#0x11              ;507
                  |L8.550|
000226  f8840021          STRB     r0,[r4,#0x21]         ;507
00022a  2000              MOVS     r0,#0                 ;511
00022c  f8840020          STRB     r0,[r4,#0x20]         ;511
000230  e791              B        |L8.342|
;;;515    
                          ENDP

000232  0000              DCW      0x0000
                  |L8.564|
                          DCD      0x4002001c
                  |L8.568|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;311      */
;;;312    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314      /* Process locked */
;;;315      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2801              CMP      r0,#1
00000a  d014              BEQ      |L9.54|
00000c  2001              MOVS     r0,#1
00000e  f8840020          STRB     r0,[r4,#0x20]
;;;316    
;;;317      /* Change DMA peripheral state */
;;;318      hdma->State = HAL_DMA_STATE_BUSY;
000012  2002              MOVS     r0,#2
000014  f8840021          STRB     r0,[r4,#0x21]
;;;319    
;;;320       /* Check the parameters */
;;;321      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;322      
;;;323      /* Disable the peripheral */
;;;324      __HAL_DMA_DISABLE(hdma);
000018  6820              LDR      r0,[r4,#0]
00001a  6805              LDR      r5,[r0,#0]
00001c  f0250501          BIC      r5,r5,#1
000020  6005              STR      r5,[r0,#0]
;;;325      
;;;326      /* Configure the source, destination address and the data length */
;;;327      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DMA_SetConfig
;;;328    
;;;329      /* Enable the Peripheral */
;;;330      __HAL_DMA_ENABLE(hdma);
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410101          ORR      r1,r1,#1
000030  6001              STR      r1,[r0,#0]
;;;331    
;;;332      return HAL_OK; 
000032  2000              MOVS     r0,#0
;;;333    }
000034  bd70              POP      {r4-r6,pc}
                  |L9.54|
000036  2002              MOVS     r0,#2                 ;315
000038  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;343      */
;;;344    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;345    {
000002  4604              MOV      r4,r0
;;;346      /* Process locked */
;;;347      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2801              CMP      r0,#1
00000a  d023              BEQ      |L10.84|
00000c  2001              MOVS     r0,#1
00000e  f8840020          STRB     r0,[r4,#0x20]
;;;348    
;;;349      /* Change DMA peripheral state */
;;;350      hdma->State = HAL_DMA_STATE_BUSY;
000012  2002              MOVS     r0,#2
000014  f8840021          STRB     r0,[r4,#0x21]
;;;351    
;;;352       /* Check the parameters */
;;;353      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;354      
;;;355      /* Disable the peripheral */
;;;356      __HAL_DMA_DISABLE(hdma);
000018  6820              LDR      r0,[r4,#0]
00001a  6805              LDR      r5,[r0,#0]
00001c  f0250501          BIC      r5,r5,#1
000020  6005              STR      r5,[r0,#0]
;;;357      
;;;358      /* Configure the source, destination address and the data length */
;;;359      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DMA_SetConfig
;;;360      
;;;361      /* Enable the transfer complete interrupt */
;;;362      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410102          ORR      r1,r1,#2
000030  6001              STR      r1,[r0,#0]
;;;363    
;;;364      /* Enable the Half transfer complete interrupt */
;;;365      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
000032  6820              LDR      r0,[r4,#0]
000034  6801              LDR      r1,[r0,#0]
000036  f0410104          ORR      r1,r1,#4
00003a  6001              STR      r1,[r0,#0]
;;;366    
;;;367      /* Enable the transfer Error interrupt */
;;;368      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
00003c  6820              LDR      r0,[r4,#0]
00003e  6801              LDR      r1,[r0,#0]
000040  f0410108          ORR      r1,r1,#8
000044  6001              STR      r1,[r0,#0]
;;;369      
;;;370       /* Enable the Peripheral */
;;;371      __HAL_DMA_ENABLE(hdma);
000046  6820              LDR      r0,[r4,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0410101          ORR      r1,r1,#1
00004e  6001              STR      r1,[r0,#0]
;;;372      
;;;373      return HAL_OK;
000050  2000              MOVS     r0,#0
;;;374    } 
000052  bd70              POP      {r4-r6,pc}
                  |L10.84|
000054  2002              MOVS     r0,#2                 ;347
000056  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\hic_hal\\stm32\\stm32f103xb\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 480 "..\\..\\..\\source\\cmsis-core\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 481

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 495
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 496

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 682
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 683

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
