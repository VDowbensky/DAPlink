; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\cmsis_os2_port.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\cmsis_os2_port.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink -I..\..\..\source\daplink\bootloader -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\settings -I..\..\..\source\target -I..\..\..\source\rtos_none -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_bl -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DMSC_ENDPOINT -DDAPLINK_BL -DDAPLINK_BUILD_KEY=0x9B939D93 -DDRAG_N_DROP_SUPPORT -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 --omf_browse=.\build\cmsis_os2_port.crf ..\..\..\source\rtos_none\cmsis_os2_port.c]
                          THUMB

                          AREA ||i.osDelay||, CODE, READONLY, ALIGN=1

                  osDelay PROC
;;;47     
;;;48     osStatus_t osDelay(uint32_t ticks)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         sysTickWait(ticks);
000002  f7fffffe          BL       sysTickWait
;;;51         return osOK;
000006  2000              MOVS     r0,#0
;;;52     }
000008  bd10              POP      {r4,pc}
;;;53     
                          ENDP


                          AREA ||i.osKernelInitialize||, CODE, READONLY, ALIGN=1

                  osKernelInitialize PROC
;;;23     
;;;24     osStatus_t osKernelInitialize(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26         sysTickInit();
000002  f7fffffe          BL       sysTickInit
;;;27         return osOK;
000006  2000              MOVS     r0,#0
;;;28     }
000008  bd10              POP      {r4,pc}
;;;29     
                          ENDP


                          AREA ||i.osKernelStart||, CODE, READONLY, ALIGN=1

                  osKernelStart PROC
;;;35     
;;;36     osStatus_t osKernelStart(void)
000000  b510              PUSH     {r4,lr}
;;;37     {
;;;38         sysTickStartMain();
000002  f7fffffe          BL       sysTickStartMain
;;;39         return osOK;
000006  2000              MOVS     r0,#0
;;;40     }
000008  bd10              POP      {r4,pc}
;;;41     
                          ENDP


                          AREA ||i.osMutexAcquire||, CODE, READONLY, ALIGN=1

                  osMutexAcquire PROC
;;;75     
;;;76     osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout)
000000  2000              MOVS     r0,#0
;;;77     {
;;;78         return osOK;
;;;79     }
000002  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.osMutexNew||, CODE, READONLY, ALIGN=1

                  osMutexNew PROC
;;;70     
;;;71     osMutexId_t osMutexNew(const osMutexAttr_t *attr)
000000  2000              MOVS     r0,#0
;;;72     {
;;;73         return NULL;
;;;74     }
000002  4770              BX       lr
;;;75     
                          ENDP


                          AREA ||i.osMutexRelease||, CODE, READONLY, ALIGN=1

                  osMutexRelease PROC
;;;80     
;;;81     osStatus_t osMutexRelease (osMutexId_t mutex_id)
000000  2000              MOVS     r0,#0
;;;82     {
;;;83         return osOK;
;;;84     }
000002  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||i.osThreadFlagsSet||, CODE, READONLY, ALIGN=1

                  osThreadFlagsSet PROC
;;;41     
;;;42     uint32_t osThreadFlagsSet(osThreadId_t thread_id, uint32_t flags)
000000  b510              PUSH     {r4,lr}
;;;43     {
000002  460c              MOV      r4,r1
;;;44         sysTickEvtSet(flags);
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       sysTickEvtSet
;;;45         return flags;
00000a  4620              MOV      r0,r4
;;;46     }
00000c  bd10              POP      {r4,pc}
;;;47     
                          ENDP


                          AREA ||i.osThreadFlagsWait||, CODE, READONLY, ALIGN=1

                  osThreadFlagsWait PROC
;;;65     
;;;66     uint32_t osThreadFlagsWait(uint32_t flags, uint32_t options, uint32_t timeout)
000000  f7ffbffe          B.W      sysTickEvtWaitOr
;;;67     {
;;;68         return sysTickEvtWaitOr(flags);
;;;69     }
;;;70     
                          ENDP


                          AREA ||i.osThreadGetId||, CODE, READONLY, ALIGN=1

                  osThreadGetId PROC
;;;85     
;;;86     osThreadId_t osThreadGetId (void)
000000  2001              MOVS     r0,#1
;;;87     {
;;;88         return (osThreadId_t)1;
;;;89     }
000002  4770              BX       lr
                          ENDP


                          AREA ||i.osThreadNew||, CODE, READONLY, ALIGN=1

                  osThreadNew PROC
;;;29     
;;;30     osThreadId_t osThreadNew(osThreadFunc_t func, void *argument, const osThreadAttr_t *attr)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32         sysTickRegMainFunc(func);
000002  f7fffffe          BL       sysTickRegMainFunc
;;;33         return (osThreadId_t)1;
000006  2001              MOVS     r0,#1
;;;34     }
000008  bd10              POP      {r4,pc}
;;;35     
                          ENDP


                          AREA ||i.osTimerNew||, CODE, READONLY, ALIGN=1

                  osTimerNew PROC
;;;53     
;;;54     osTimerId_t osTimerNew(osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr)
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56         sysTickRegCallback(func);
000002  f7fffffe          BL       sysTickRegCallback
;;;57         return (osTimerId_t)1;
000006  2001              MOVS     r0,#1
;;;58     }
000008  bd10              POP      {r4,pc}
;;;59     
                          ENDP


                          AREA ||i.osTimerStart||, CODE, READONLY, ALIGN=1

                  osTimerStart PROC
;;;59     
;;;60     osStatus_t osTimerStart(osTimerId_t timer_id, uint32_t ticks)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  4608              MOV      r0,r1
;;;62         sysTickFreqSet(ticks);
000004  f7fffffe          BL       sysTickFreqSet
;;;63         return osOK;
000008  2000              MOVS     r0,#0
;;;64     }
00000a  bd10              POP      {r4,pc}
;;;65     
                          ENDP

