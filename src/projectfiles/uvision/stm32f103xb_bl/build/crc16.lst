L 1 "..\..\..\source\daplink\crc16.c"
N/**********************************************************************
N *
N * Filename:    crc.c
N *
N * Description: Slow and fast implementations of the CRC standards.
N *
N * Notes:       The parameters for each supported CRC standard are
N *				defined in the header file crc.h.  The implementations
N *				here should stand up to further additions to that list.
N *
N *
N * Copyright (c) 2000 by Michael Barr.  This software is placed into
N * the public domain and may be used for any purpose.  However, this
N * notice must not be changed or removed and no warranty is either
N * expressed or implied by its publication or distribution.
N **********************************************************************/
N
N/**
N * @file    crc16.c
N * @brief   Implementation of crc.h
N */
N
N#include "crc.h"
L 1 "..\..\..\source\daplink\crc.h" 1
N/**********************************************************************
N *
N * Filename:    crc.h
N *
N * Description: A header file describing the various CRC standards.
N *
N * Notes:
N *
N *
N * Copyright (c) 2000 by Michael Barr.  This software is placed into
N * the public domain and may be used for any purpose.  However, this
N * notice must not be changed or removed and no warranty is either
N * expressed or implied by its publication or distribution.
N **********************************************************************/
N
N/**
N * @file    crc.h
N * @brief   CRC functions
N */
N
N#ifndef _crc_h
N#define _crc_h
N
N#include <stdint.h>
L 1 "C:\Keil_v535\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 25 "..\..\..\source\daplink\crc.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nuint16_t crc16(const void *data, int nBytes);
Nuint32_t crc32(const void *data, int nBytes);
Nuint32_t crc32_continue(uint32_t prev_crc, const void *data, int nBytes);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 24 "..\..\..\source\daplink\crc16.c" 2
N
N#define FALSE	0
N#define TRUE	!FALSE
N
Ntypedef unsigned short  crc;
N
N#define CRC_NAME			"CRC-16"
N#define POLYNOMIAL			0x8005
N#define INITIAL_REMAINDER	0x0000
N#define FINAL_XOR_VALUE		0x0000
N#define REFLECT_DATA		TRUE
N#define REFLECT_REMAINDER	TRUE
N#define CHECK_VALUE			0xBB3D
N
N/*
N * Derive parameters from the standard-specific parameters in crc.h.
N */
N#define WIDTH    (8 * sizeof(crc))
N#define TOPBIT   (1 << (WIDTH - 1))
N
N#if (REFLECT_DATA == TRUE)
X#if (!0 == !0)
N#undef  REFLECT_DATA
N#define REFLECT_DATA(X)			((unsigned char) reflect((X), 8))
N#else
S#undef  REFLECT_DATA
S#define REFLECT_DATA(X)			(X)
N#endif
N
N#if (REFLECT_REMAINDER == TRUE)
X#if (!0 == !0)
N#undef  REFLECT_REMAINDER
N#define REFLECT_REMAINDER(X)	((crc) reflect((X), WIDTH))
N#else
S#undef  REFLECT_REMAINDER
S#define REFLECT_REMAINDER(X)	(X)
N#endif
N
N
N/*********************************************************************
N *
N * Function:    reflect()
N *
N * Description: Reorder the bits of a binary sequence, by reflecting
N *				them about the middle position.
N *
N * Notes:		No checking is done that nBits <= 32.
N *
N * Returns:		The reflection of the original data.
N *
N *********************************************************************/
Nstatic unsigned long
Nreflect(unsigned long data, unsigned char nBits)
N{
N    unsigned long  reflection = 0x00000000;
N    unsigned char  bit;
N
N    /*
N     * Reflect the data about the center bit.
N     */
N    for (bit = 0; bit < nBits; ++bit) {
N        /*
N         * If the LSB bit is set, set the reflection of it.
N         */
N        if (data & 0x01) {
N            reflection |= (1 << ((nBits - 1) - bit));
N        }
N
N        data = (data >> 1);
N    }
N
N    return (reflection);
N}	/* reflect() */
N
N
N/*********************************************************************
N *
N * Function:    crcSlow()
N *
N * Description: Compute the CRC of a given message.
N *
N * Notes:
N *
N * Returns:		The CRC of the message.
N *
N *********************************************************************/
Nuint16_t
Ncrc16(const void *data, int nBytes)
N{
N    crc            remainder = INITIAL_REMAINDER;
X    crc            remainder = 0x0000;
N    int            byte;
N    unsigned char  bit;
N    unsigned char const *message = data;
N
N    /*
N     * Perform modulo-2 division, a byte at a time.
N     */
N    for (byte = 0; byte < nBytes; ++byte) {
N        /*
N         * Bring the next byte into the remainder.
N         */
N        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
X        remainder ^= (((unsigned char) reflect((message[byte]), 8)) << ((8 * sizeof(crc)) - 8));
N
N        /*
N         * Perform modulo-2 division, a bit at a time.
N         */
N        for (bit = 8; bit > 0; --bit) {
N            /*
N             * Try to divide the current data bit.
N             */
N            if (remainder & TOPBIT) {
X            if (remainder & (1 << ((8 * sizeof(crc)) - 1))) {
N                remainder = (remainder << 1) ^ POLYNOMIAL;
X                remainder = (remainder << 1) ^ 0x8005;
N            } else {
N                remainder = (remainder << 1);
N            }
N        }
N    }
N
N    /*
N     * The final remainder is the CRC result.
N     */
N    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
X    return (((crc) reflect((remainder), (8 * sizeof(crc)))) ^ 0x0000);
N}   /* crcSlow() */
