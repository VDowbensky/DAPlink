; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\build\usb_config.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\usb_config.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\..\source\usb -I..\..\..\source\daplink -I..\..\..\source\daplink\bootloader -I..\..\..\source\cmsis-core -I..\..\..\source\hic_hal -I..\..\..\source\daplink\drag-n-drop -I..\..\..\source\daplink\settings -I..\..\..\source\target -I..\..\..\source\rtos_none -I..\..\..\source\hic_hal\stm32\stm32f103xb -I..\..\..\source\hic_hal\stm32\stm32f103xb\cmsis -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver -I..\..\..\source\hic_hal\stm32\stm32f103xb\STM32F1xx_HAL_Driver\Inc -I.\RTE\_stm32f103xb_bl -IC:\Users\Admin\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\Admin\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=538 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DDAPLINK_VERSION=256 -DMSC_ENDPOINT -DDAPLINK_BL -DDAPLINK_BUILD_KEY=0x9B939D93 -DDRAG_N_DROP_SUPPORT -DOS_TICK=10000 -DINTERFACE_STM32F103XB -DUSE_HAL_DRIVER -DSTM32F103xB -DDAPLINK_HIC_ID=0x97969908 -D__packed=__packed -DDAPLINK_NO_ASSERT_FILENAMES -DOS_CLOCK=72000000 --omf_browse=.\build\usb_config.crf ..\..\..\source\hic_hal\stm32\stm32f103xb\usb_config.c]
                          THUMB

                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToEP PROC
;;;640    }
;;;641    BOOL USBD_EndPoint0_Out_ADC_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;642    {
;;;643        return (__FALSE);
;;;644    }
000002  4770              BX       lr
;;;645    #endif  /* (USBD_ADC_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToIF PROC
;;;636    }
;;;637    BOOL USBD_EndPoint0_Out_ADC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;638    {
;;;639        return (__FALSE);
;;;640    }
000002  4770              BX       lr
;;;641    BOOL USBD_EndPoint0_Out_ADC_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CDC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CDC_ReqToIF PROC
;;;915    }
;;;916    BOOL USBD_EndPoint0_Out_CDC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;917    {
;;;918        return (__FALSE);
;;;919    }
000002  4770              BX       lr
;;;920    #endif  /* (USBD_CDC_ACM_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToDEV PROC
;;;1039   }
;;;1040   BOOL USBD_EndPoint0_Out_CLS_ReqToDEV(void)
000000  2000              MOVS     r0,#0
;;;1041   {
;;;1042       return (__FALSE);
;;;1043   }
000002  4770              BX       lr
;;;1044   BOOL USBD_EndPoint0_Out_CLS_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToEP PROC
;;;1047   }
;;;1048   BOOL USBD_EndPoint0_Out_CLS_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;1049   {
;;;1050       return (__FALSE);
;;;1051   }
000002  4770              BX       lr
;;;1052   #endif  /* (USBD_CLS_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToIF PROC
;;;1043   }
;;;1044   BOOL USBD_EndPoint0_Out_CLS_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;1045   {
;;;1046       return (__FALSE);
;;;1047   }
000002  4770              BX       lr
;;;1048   BOOL USBD_EndPoint0_Out_CLS_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_HID_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_HID_ReqToIF PROC
;;;408    }
;;;409    BOOL USBD_EndPoint0_Out_HID_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;410    {
;;;411        return (__FALSE);
;;;412    }
000002  4770              BX       lr
;;;413    #endif  /* (USBD_HID_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToEP PROC
;;;632    }
;;;633    BOOL USBD_EndPoint0_Setup_ADC_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;634    {
;;;635        return (__FALSE);
;;;636    }
000002  4770              BX       lr
;;;637    BOOL USBD_EndPoint0_Out_ADC_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToIF PROC
;;;628    #if    (USBD_ADC_ENABLE == 0)
;;;629    BOOL USBD_EndPoint0_Setup_ADC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;630    {
;;;631        return (__FALSE);
;;;632    }
000002  4770              BX       lr
;;;633    BOOL USBD_EndPoint0_Setup_ADC_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CDC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CDC_ReqToIF PROC
;;;911    #else
;;;912    BOOL USBD_EndPoint0_Setup_CDC_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;913    {
;;;914        return (__FALSE);
;;;915    }
000002  4770              BX       lr
;;;916    BOOL USBD_EndPoint0_Out_CDC_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToDEV PROC
;;;1027   #else
;;;1028   BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV(void)
000000  2000              MOVS     r0,#0
;;;1029   {
;;;1030       return (__FALSE);
;;;1031   }
000002  4770              BX       lr
;;;1032   BOOL USBD_EndPoint0_Setup_CLS_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToEP PROC
;;;1035   }
;;;1036   BOOL USBD_EndPoint0_Setup_CLS_ReqToEP(void)
000000  2000              MOVS     r0,#0
;;;1037   {
;;;1038       return (__FALSE);
;;;1039   }
000002  4770              BX       lr
;;;1040   BOOL USBD_EndPoint0_Out_CLS_ReqToDEV(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToIF PROC
;;;1031   }
;;;1032   BOOL USBD_EndPoint0_Setup_CLS_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;1033   {
;;;1034       return (__FALSE);
;;;1035   }
000002  4770              BX       lr
;;;1036   BOOL USBD_EndPoint0_Setup_CLS_ReqToEP(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_HID_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_HID_ReqToIF PROC
;;;404    }
;;;405    BOOL USBD_EndPoint0_Setup_HID_ReqToIF(void)
000000  2000              MOVS     r0,#0
;;;406    {
;;;407        return (__FALSE);
;;;408    }
000002  4770              BX       lr
;;;409    BOOL USBD_EndPoint0_Out_HID_ReqToIF(void)
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_WebUSB_ReqToDevice||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_WebUSB_ReqToDevice PROC
;;;2461   
;;;2462   BOOL USBD_EndPoint0_Setup_WebUSB_ReqToDevice(void)
000000  2000              MOVS     r0,#0
;;;2463   {
;;;2464       return (__FALSE);
;;;2465   }
000002  4770              BX       lr
;;;2466   
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_WinUSB_ReqToDevice||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_WinUSB_ReqToDevice PROC
;;;1801   
;;;1802   BOOL USBD_EndPoint0_Setup_WinUSB_ReqToDevice(void)
000000  2000              MOVS     r0,#0
;;;1803   {
;;;1804       return (__FALSE);
;;;1805   }
000002  4770              BX       lr
;;;1806   
                          ENDP


                          AREA ||i.USBD_RTX_TaskInit||, CODE, READONLY, ALIGN=1

                  USBD_RTX_TaskInit PROC
;;;1528   
;;;1529   void USBD_RTX_TaskInit(void)
000000  4770              BX       lr
;;;1530   {
;;;1531   #ifdef __RTX
;;;1532       /* Initialize memory pools for endpoints */
;;;1533       U32 i;
;;;1534       USBD_RTX_DevTask = 0;
;;;1535   
;;;1536       if (USBD_RTX_P_Device) {
;;;1537           USBD_RTX_DevTask = os_tsk_create_user(USBD_RTX_Device, 3, usbd_device_stack,
;;;1538                                                 sizeof(usbd_device_stack));
;;;1539       }
;;;1540   
;;;1541       for (i = 0; i <= 15; i++) {
;;;1542           USBD_RTX_EPTask[i] = 0;
;;;1543   
;;;1544           if (USBD_RTX_P_EP[i]) {
;;;1545               // Set the control endpoint (endpoint 0) thread to a high priority.
;;;1546               // According to the USB 2.0 specification, the time to complete standard
;;;1547               // request with no data must be under 50ms.  If a long caluclation
;;;1548               // such as a CRC is running on a higher priority thread, USB enumeration
;;;1549               // can fail because of this timeout.
;;;1550               uint8_t priority = 0 == i ? 200 : 20;
;;;1551               USBD_RTX_EPTask[i] = os_tsk_create_user(USBD_RTX_P_EP[i], priority, user_stack_list[i].stack,
;;;1552                                                       user_stack_list[i].size);
;;;1553           }
;;;1554       }
;;;1555   
;;;1556       USBD_RTX_CoreTask = 0;
;;;1557   
;;;1558       if (USBD_RTX_P_Core) {
;;;1559           USBD_RTX_CoreTask = os_tsk_create_user(USBD_RTX_Core, 2, usbd_core_stack,
;;;1560                                                  sizeof(usbd_core_stack));
;;;1561       }
;;;1562   
;;;1563   #endif
;;;1564   }
;;;1565   
                          ENDP


                          AREA ||i.USBD_ReqGetDescriptor_HID||, CODE, READONLY, ALIGN=1

                  USBD_ReqGetDescriptor_HID PROC
;;;400    #else
;;;401    BOOL USBD_ReqGetDescriptor_HID(U8 **pD, U32 *len)
000000  2000              MOVS     r0,#0
;;;402    {
;;;403        return (__FALSE);
;;;404    }
000002  4770              BX       lr
;;;405    BOOL USBD_EndPoint0_Setup_HID_ReqToIF(void)
                          ENDP


                          AREA ||i.usbd_class_init||, CODE, READONLY, ALIGN=2

                  usbd_class_init PROC
;;;2668   
;;;2669   void usbd_class_init(void)
000000  b530              PUSH     {r4,r5,lr}
000002  a310              ADR      r3,|L19.68|
;;;2670   {   
000004  b087              SUB      sp,sp,#0x1c
000006  cb0e              LDM      r3,{r1-r3}
000008  e88d000e          STM      sp,{r1-r3}
;;;2671       U8  if_num = 0;
00000c  2500              MOVS     r5,#0
;;;2672       U16 desc_ptr = 0;
;;;2673       
;;;2674       desc_ptr += start_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], if_num);    
00000e  480c              LDR      r0,|L19.64|
000010  2209              MOVS     r2,#9
000012  4669              MOV      r1,sp
000014  f7fffffe          BL       __aeabi_memcpy
;;;2675       
;;;2676   #if (USBD_ADC_ENABLE)
;;;2677       usbd_adc_init();
;;;2678   #endif
;;;2679   
;;;2680   
;;;2681   #if (USBD_MSC_ENABLE)        
;;;2682       
;;;2683   #if !(defined(DAPLINK_BL)) &&  defined(DRAG_N_DROP_SUPPORT)
;;;2684       //change descriptors here
;;;2685       if (config_ram_get_disable_msd() == 1 || flash_algo_valid()==0 ){
;;;2686           usbd_if_num -= USBD_MSC_ENABLE;
;;;2687           USB_CONFIGURATION_DESCRIPTOR * usb_conf_desc = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;2688           usb_conf_desc->bNumInterfaces = usbd_if_num;
;;;2689           U16 usb_wtotal_len = USBD_WTOTALLENGTH_MAX - (USBD_MSC_DESC_LEN     * USBD_MSC_ENABLE);
;;;2690           usb_conf_desc->wTotalLength = usb_wtotal_len;
;;;2691           USBD_ConfigDescriptor[usb_wtotal_len] = 0;
;;;2692           USBD_HID_DescriptorOffset -= USBD_MSC_ENABLE * USBD_MSC_DESC_LEN;
;;;2693   #if (USBD_HS_ENABLE == 1)
;;;2694           usb_conf_desc = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
;;;2695           usb_conf_desc->bNumInterfaces = usbd_if_num;
;;;2696           usb_conf_desc->wTotalLength = usb_wtotal_len;
;;;2697           USBD_ConfigDescriptor_HS[usb_wtotal_len] = 0;
;;;2698   #endif         
;;;2699       } else
;;;2700   #endif
;;;2701       {
;;;2702       usbd_msc_if_num = if_num++;
000018  480d              LDR      r0,|L19.80|
;;;2703       desc_ptr += msc_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_msc_if_num);
00001a  4c09              LDR      r4,|L19.64|
00001c  2218              MOVS     r2,#0x18
00001e  7045              STRB     r5,[r0,#1]            ;2702
000020  3409              ADDS     r4,r4,#9
000022  a10c              ADR      r1,|L19.84|
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __aeabi_memcpy4
00002a  2217              MOVS     r2,#0x17
00002c  4669              MOV      r1,sp
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       __aeabi_memcpy
000034  70a5              STRB     r5,[r4,#2]
;;;2704       usbd_msc_init();
000036  b007              ADD      sp,sp,#0x1c
000038  e8bd4030          POP      {r4,r5,lr}
00003c  f7ffbffe          B.W      usbd_msc_init
;;;2705   
;;;2706       }
;;;2707   #endif //#if (USBD_MSC_ENABLE)  
;;;2708   
;;;2709   #if (USBD_CDC_ACM_ENABLE)
;;;2710       usbd_cdc_acm_cif_num = if_num++;
;;;2711       usbd_cdc_acm_dif_num = if_num++;
;;;2712       desc_ptr += acm_cdc_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_cdc_acm_cif_num);
;;;2713       USBD_CDC_ACM_Initialize();
;;;2714   #endif
;;;2715   
;;;2716   #if (USBD_HID_ENABLE) 
;;;2717       usbd_hid_if_num = if_num++;
;;;2718       desc_ptr += hid_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_hid_if_num);
;;;2719       usbd_hid_init();
;;;2720   #endif
;;;2721   
;;;2722   #if (USBD_WEBUSB_ENABLE)
;;;2723       usbd_webusb_if_num = if_num++;   
;;;2724       desc_ptr += webusb_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_webusb_if_num);
;;;2725   #endif
;;;2726   
;;;2727   #if (USBD_BULK_ENABLE)
;;;2728       usbd_bulk_if_num = if_num++;  
;;;2729       desc_ptr += bulk_desc_fill(&USBD_ConfigDescriptor[desc_ptr], &USBD_ConfigDescriptor_HS[desc_ptr], usbd_bulk_if_num);
;;;2730       usbd_bulk_init();
;;;2731   #endif
;;;2732   
;;;2733   #if (USBD_CLS_ENABLE)
;;;2734       usbd_cls_init();
;;;2735   #endif
;;;2736   
;;;2737   }
;;;2738   
                          ENDP

                  |L19.64|
                          DCD      USBD_ConfigDescriptor
                  |L19.68|
000044  09022000          DCB      "\t",2," ",0
000048  010100            DCB      1,1,0
00004b  80fa00            DCB      128,250,0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L19.80|
                          DCD      ||area_number.61||
                  |L19.84|
000054  090400            DCB      "\t",4,0
000057  00                DCB      0
000058  02080650          DCB      2,"\b",6,"P",4,"\a",5,130,2,"@",0
00005c  04070582
000060  024000  
000063  00                DCB      0
000064  07050202          DCB      "\a",5,2,2,"@",0
000068  4000    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.usbd_os_evt_get||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_get PROC
;;;1338   }
;;;1339   U16  usbd_os_evt_get(void)
000000  2000              MOVS     r0,#0
;;;1340   {
;;;1341       return (0);
;;;1342   }
000002  4770              BX       lr
;;;1343   U32  usbd_os_evt_wait_or(U16 wait_flags, U16 timeout)
                          ENDP


                          AREA ||i.usbd_os_evt_set||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_set PROC
;;;1334   
;;;1335   void usbd_os_evt_set(U16 event_flags, U32 task)
000000  4770              BX       lr
;;;1336   {
;;;1337       
;;;1338   }
;;;1339   U16  usbd_os_evt_get(void)
                          ENDP


                          AREA ||i.usbd_os_evt_wait_or||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_wait_or PROC
;;;1342   }
;;;1343   U32  usbd_os_evt_wait_or(U16 wait_flags, U16 timeout)
000000  2000              MOVS     r0,#0
;;;1344   {
;;;1345       return (0);
;;;1346   }
000002  4770              BX       lr
;;;1347   #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USBD_ConfigDescriptor
                          %        200

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.bss||
                  USBD_EP0Buf
                          %        64

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.bss||
                  USBD_MSC_BulkBuf
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  usbd_power
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.constdata||
                  usbd_hs_enable
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.constdata||
                  usbd_bos_enable
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.constdata||
                  usbd_ep_num
000000  02                DCB      0x02

                          AREA ||area_number.32||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.constdata||
                  usbd_max_packet0
000000  40                DCB      0x40

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.constdata||
                  usbd_msc_ep_bulkin
000000  02                DCB      0x02

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  usbd_msc_ep_bulkout
000000  02                DCB      0x02

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.35||, ||.constdata||
                  usbd_msc_maxpacketsize
000000  00400200          DCW      0x0040,0x0200

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.constdata||
                  USBD_MSC_BulkBufSize
000000  0040              DCW      0x0040

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.constdata||
                  USBD_P_Power_Event
                          DCD      USBD_Power_Event

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.constdata||
                  USBD_P_Reset_Event
                          DCD      USBD_Reset_Event

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.constdata||
                  USBD_P_Suspend_Event
                          DCD      USBD_Suspend_Event

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.constdata||
                  USBD_P_Resume_Event
                          DCD      USBD_Resume_Event

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.constdata||
                  USBD_P_WakeUp_Event
                          DCD      USBD_WakeUp_Event

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.constdata||
                  USBD_P_SOF_Event
                          DCD      USBD_SOF_Event

                          AREA ||area_number.43||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.constdata||
                  USBD_P_Error_Event
                          DCD      USBD_Error_Event

                          AREA ||area_number.44||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.constdata||
                  USBD_P_EP
                          DCD      USBD_EndPoint0
                          DCD      USBD_EndPoint1
                          DCD      USBD_MSC_EP_BULK_Event
                          DCD      USBD_EndPoint3
                          DCD      USBD_EndPoint4
                          DCD      USBD_EndPoint5
                          DCD      USBD_EndPoint6
                          DCD      USBD_EndPoint7
                          DCD      USBD_EndPoint8
                          DCD      USBD_EndPoint9
                          DCD      USBD_EndPoint10
                          DCD      USBD_EndPoint11
                          DCD      USBD_EndPoint12
                          DCD      USBD_EndPoint13
                          DCD      USBD_EndPoint14
                          DCD      USBD_EndPoint15

                          AREA ||area_number.45||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.constdata||
                  USBD_P_Configure_Event
                          DCD      USBD_Configure_Event

                          AREA ||area_number.46||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.constdata||
                  USBD_P_Interface_Event
                          DCD      USBD_Interface_Event

                          AREA ||area_number.47||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.constdata||
                  USBD_P_Feature_Event
                          DCD      USBD_Feature_Event

                          AREA ||area_number.48||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.constdata||
                  __rtx
                          DCD      0x00000000

                          AREA ||area_number.49||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.constdata||
                  USBD_HID_ReportDescriptor
000000  0600ff09          DCB      0x06,0x00,0xff,0x09
000004  01a10115          DCB      0x01,0xa1,0x01,0x15
000008  0026ff00          DCB      0x00,0x26,0xff,0x00
00000c  75089540          DCB      0x75,0x08,0x95,0x40
000010  09018102          DCB      0x09,0x01,0x81,0x02
000014  95400901          DCB      0x95,0x40,0x09,0x01
000018  91029501          DCB      0x91,0x02,0x95,0x01
00001c  0901b102          DCB      0x09,0x01,0xb1,0x02
000020  c0                DCB      0xc0

                          AREA ||area_number.50||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.50||, ||.constdata||
                  USBD_HID_ReportDescriptorSize
000000  0021              DCW      0x0021

                          AREA ||area_number.51||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.constdata||
                  USBD_DeviceDescriptor
000000  12011001          DCB      0x12,0x01,0x10,0x01
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  280d0402          DCB      0x28,0x0d,0x04,0x02
00000c  00010102          DCB      0x00,0x01,0x01,0x02
000010  0301              DCB      0x03,0x01

                          AREA ||area_number.52||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.constdata||
                  USBD_DeviceQualifier
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.constdata||
                  USBD_DeviceQualifier_HS
000000  00                DCB      0x00

                          AREA ||area_number.54||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.constdata||
                  USBD_WinUSBDescriptorSetDescriptor
000000  00                DCB      0x00

                          AREA ||area_number.55||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.constdata||
                  USBD_BinaryObjectStoreDescriptor
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.56||, ||.constdata||
                  USBD_StringDescriptor
000000  0403              DCB      0x04,0x03
000002  0409              DCW      0x0409
000004  08034100          DCB      0x08,0x03,0x41,0x00
000008  52004d00          DCB      0x52,0x00,0x4d,0x00
00000c  24034400          DCB      0x24,0x03,0x44,0x00
000010  41005000          DCB      0x41,0x00,0x50,0x00
000014  4c006900          DCB      0x4c,0x00,0x69,0x00
000018  6e006b00          DCB      0x6e,0x00,0x6b,0x00
00001c  20004300          DCB      0x20,0x00,0x43,0x00
000020  4d005300          DCB      0x4d,0x00,0x53,0x00
000024  49005300          DCB      0x49,0x00,0x53,0x00
000028  2d004400          DCB      0x2d,0x00,0x44,0x00
00002c  41005000          DCB      0x41,0x00,0x50,0x00
000030  1a033000          DCB      0x1a,0x03,0x30,0x00
000034  30003000          DCB      0x30,0x00,0x30,0x00
000038  31004100          DCB      0x31,0x00,0x41,0x00
00003c  30003000          DCB      0x30,0x00,0x30,0x00
000040  30003000          DCB      0x30,0x00,0x30,0x00
000044  30003000          DCB      0x30,0x00,0x30,0x00
000048  30001003          DCB      0x30,0x00,0x10,0x03
00004c  55005300          DCB      0x55,0x00,0x53,0x00
000050  42005f00          DCB      0x42,0x00,0x5f,0x00
000054  4d005300          DCB      0x4d,0x00,0x53,0x00
000058  4300              DCB      0x43,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4d424544          DCB      "MBED    VFS             0.1",0
000004  20202020
000008  56465320
00000c  20202020
000010  20202020
000014  20202020
000018  302e3100

                          AREA ||.data||, DATA, ALIGN=1

                  usbd_if_num
000000  0001              DCW      0x0001

                          AREA ||area_number.59||, DATA, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.data||
                  usbd_msc_inquiry_data
                          DCD      ||.conststring||

                          AREA ||area_number.60||, DATA, ALIGN=1

                          EXPORTAS ||area_number.60||, ||.data||
                  USBD_HID_DescriptorOffset
000000  0029              DCW      0x0029

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  USBD_ConfigDescriptor_HS
000000  00                DCB      0x00
                  usbd_msc_if_num
000001  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.data||
                  USBD_WebUSBURLDescriptor
000000  00                DCB      0x00

                          AREA ||area_number.63||, DATA, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.data||
                  USBD_AltSetting
000000  00                DCB      0x00

                          AREA ||area_number.64||, DATA, ALIGN=0

                          EXPORTAS ||area_number.64||, ||.data||
                  usbd_webusb_vendor_code
000000  00                DCB      0x00

                          AREA ||area_number.65||, DATA, ALIGN=0

                          EXPORTAS ||area_number.65||, ||.data||
                  usbd_winusb_vendor_code
000000  00                DCB      0x00
